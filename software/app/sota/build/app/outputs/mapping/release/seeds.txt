androidx.lifecycle.ProcessLifecycleInitializer
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver
me.carda.awesome_notifications.core.utils.BooleanUtils
com.google.android.material.transformation.FabTransformationScrimBehavior
android.support.v4.media.RatingCompat
com.google.android.material.snackbar.Snackbar$SnackbarLayout
kotlin.internal.jdk8.JDK8PlatformImplementations
com.google.gson.internal.bind.TypeAdapters$8
androidx.lifecycle.ProcessLifecycleOwner$attach$1
me.carda.awesome_notifications.core.managers.DefaultsManager
com.google.gson.internal.bind.TypeAdapters$5
androidx.lifecycle.LifecycleDispatcher$DispatcherActivityCallback
android.support.v4.media.session.PlaybackStateCompat$CustomAction
com.google.gson.Gson$3
me.carda.awesome_notifications.core.utils.JsonUtils
com.google.gson.internal.bind.DateTypeAdapter
com.google.gson.TypeAdapter$1
com.google.android.gms.common.api.internal.zzd
com.google.gson.Gson$2
com.google.gson.internal.bind.TypeAdapters$10
androidx.media.AudioAttributesImplBaseParcelizer
com.google.android.material.datepicker.MaterialDatePicker
me.carda.awesome_notifications.core.builders.NotificationBuilder
androidx.constraintlayout.widget.ConstraintLayout
io.flutter.plugins.firebase.core.FlutterFirebaseCoreRegistrar
androidx.core.app.RemoteActionCompat
com.google.gson.internal.bind.TypeAdapters$28
com.google.firebase.FirebaseCommonKtxRegistrar
io.flutter.plugins.firebase.core.FlutterFirebasePlugin
com.google.android.material.internal.BaselineLayout
androidx.core.app.CoreComponentFactory
kotlin.coroutines.jvm.internal.BaseContinuationImpl
com.google.firebase.firestore.core.ActivityScope$StopListenerSupportFragment
android.support.v4.media.AudioAttributesImplApi21Parcelizer
me.leolin.shortcutbadger.impl.ApexHomeBadger
me.carda.awesome_notifications.core.threads.NotificationThread
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$RecordAdapter
androidx.annotation.Keep
me.carda.awesome_notifications.core.utils.TimeZoneUtils
androidx.window.extensions.core.util.function.Function
me.carda.awesome_notifications.core.models.NotificationLocalizationModel
com.google.gson.stream.JsonReader$1
com.google.android.gms.common.api.internal.BasePendingResult
androidx.core.widget.NestedScrollView
com.google.android.material.appbar.MaterialToolbar
com.google.gson.internal.bind.TypeAdapters$7
io.flutter.plugins.firebase.core.FlutterFirebaseCorePlugin
androidx.lifecycle.SavedStateHandlesVM
com.google.android.material.chip.Chip
me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper
me.carda.awesome_notifications.DartNotificationActionReceiver
com.google.gson.Gson$1
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeBroadcastReceiver
com.google.firebase.firestore.ktx.FirebaseFirestoreKtxRegistrar
me.carda.awesome_notifications.core.enumerators.NotificationLayout
me.carda.awesome_notifications.core.managers.ScheduleManager
com.google.android.gms.auth.api.signin.GoogleSignInAccount
me.carda.awesome_notifications.core.background.BackgroundExecutor
io.flutter.view.AccessibilityViewEmbedder
androidx.lifecycle.ProcessLifecycleOwner$attach$1$onActivityPreCreated$1
me.carda.awesome_notifications.core.managers.LostEventsManager
com.google.android.gms.common.util.DynamiteApi
com.google.firebase.concurrent.ExecutorsRegistrar
androidx.fragment.app.DialogFragment
com.google.gson.internal.bind.TypeAdapters$21
androidx.appcompat.widget.ActionBarOverlayLayout
com.google.gson.internal.bind.TreeTypeAdapter
androidx.media.AudioAttributesCompatParcelizer
com.google.gson.internal.bind.DefaultDateTypeAdapter
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader
androidx.appcompat.widget.ActivityChooserView$InnerLayout
com.google.android.gms.common.api.Status
me.leolin.shortcutbadger.impl.NewHtcHomeBadger
me.carda.awesome_notifications.core.models.NotificationMessageModel
io.grpc.internal.DnsNameResolverProvider
androidx.profileinstaller.ProfileInstallReceiver
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter
me.carda.awesome_notifications.core.managers.StatusBarManager
com.google.android.material.appbar.AppBarLayout$BaseBehavior
androidx.media.AudioAttributesImplApi26
me.carda.awesome_notifications.core.managers.LifeCycleManager
androidx.appcompat.widget.DialogTitle
me.carda.awesome_notifications.core.enumerators.NotificationPlayState
me.carda.awesome_notifications.FlutterBitmapUtils
io.flutter.plugin.platform.SingleViewPresentation
me.carda.awesome_notifications.core.threads.NotificationSender
me.carda.awesome_notifications.core.managers.ChannelManager
me.carda.awesome_notifications.core.completion_handlers.ActivityCompletionHandler
android.support.v4.media.AudioAttributesImplBaseParcelizer
me.carda.awesome_notifications.core.utils.SerializableUtils
com.google.gson.stream.JsonScope
com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton$ExtendedFloatingActionButtonBehavior
com.google.gson.stream.MalformedJsonException
android.support.v4.media.session.ParcelableVolumeInfo
com.google.gson.stream.JsonToken
io.flutter.view.TextureRegistry$ImageTextureEntry
me.carda.awesome_notifications.core.models.returnedData.ActionReceived
me.carda.awesome_notifications.core.enumerators.GroupSort
me.carda.awesome_notifications.DartBackgroundExecutor
me.carda.awesome_notifications.core.utils.IntegerUtils
androidx.media.AudioAttributesImpl
me.carda.awesome_notifications.core.enumerators.MediaSource
me.carda.awesome_notifications.core.completion_handlers.BitmapCompletionHandler
com.google.gson.internal.bind.TypeAdapters$16
com.google.gson.internal.bind.NumberTypeAdapter$1
com.google.firebase.firestore.core.ActivityScope$StopListenerFragment
me.carda.awesome_notifications.core.managers.LocalizationManager
com.google.firebase.FirebaseCommonRegistrar
android.support.v4.media.MediaBrowserCompat$ItemReceiver
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB
me.carda.awesome_notifications.core.broadcasters.receivers.DismissedNotificationReceiver
android.support.v4.media.AudioAttributesCompatParcelizer
com.google.gson.internal.sql.SqlTimestampTypeAdapter
androidx.recyclerview.widget.LinearLayoutManager
me.carda.awesome_notifications.core.utils.MediaUtils
com.google.android.material.internal.NavigationMenuItemView
com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior
me.carda.awesome_notifications.core.managers.EventManager
androidx.appcompat.widget.FitWindowsFrameLayout
android.support.v4.media.AudioAttributesImplApi26Parcelizer
me.carda.awesome_notifications.core.models.NotificationCrontabModel
com.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory
com.google.gson.internal.bind.TypeAdapters$29
io.flutter.view.TextureRegistry$ImageConsumer
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference
android.support.v4.media.session.MediaSessionCompat$QueueItem
com.google.android.material.datepicker.MaterialTextInputPicker
com.google.gson.internal.bind.TypeAdapters$31
com.google.android.gms.common.SupportErrorDialogFragment
me.carda.awesome_notifications.core.listeners.AwesomeLifeCycleEventListener
me.carda.awesome_notifications.core.models.NotificationCalendarModel
com.google.gson.internal.bind.TypeAdapters$15
androidx.window.area.reflectionguard.WindowAreaComponentApi2Requirements
com.google.android.gms.common.api.internal.zzb
com.google.gson.internal.bind.TypeAdapters$18
com.google.gson.internal.bind.ArrayTypeAdapter
me.carda.awesome_notifications.core.models.DefaultsModel
com.google.gson.Gson$FutureTypeAdapter
com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter
androidx.recyclerview.widget.StaggeredGridLayoutManager
com.google.android.material.timepicker.ChipTextInputComboView
me.carda.awesome_notifications.core.AwesomeNotificationsExtension
me.carda.awesome_notifications.core.utils.BitmapUtils
androidx.window.extensions.core.util.function.Consumer
com.google.gson.internal.bind.TypeAdapters$27
me.leolin.shortcutbadger.impl.SonyHomeBadger
com.google.gson.internal.bind.TypeAdapters$34$1
com.google.gson.internal.bind.ObjectTypeAdapter$1
com.google.firebase.firestore.FirebaseFirestore
me.carda.awesome_notifications.core.managers.ChannelGroupManager
me.carda.awesome_notifications.core.utils.StringUtils
com.google.gson.internal.sql.SqlTimeTypeAdapter
me.leolin.shortcutbadger.impl.AdwHomeBadger
androidx.appcompat.widget.SearchView$SearchAutoComplete
androidx.appcompat.widget.FitWindowsLinearLayout
me.carda.awesome_notifications.core.utils.ListUtils
com.google.gson.internal.bind.TypeAdapters$24
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry
com.google.android.material.timepicker.ClockHandView
com.google.android.material.timepicker.TimePickerView
androidx.appcompat.widget.ContentFrameLayout
io.grpc.util.SecretRoundRobinLoadBalancerProvider$Provider
android.support.v4.media.MediaBrowserCompat$MediaItem
com.google.android.material.search.SearchView$Behavior
androidx.window.layout.adapter.sidecar.DistinctElementSidecarCallback
androidx.appcompat.widget.ActionBarContextView
androidx.room.MultiInstanceInvalidationService
androidx.constraintlayout.helper.widget.Flow
io.flutter.embedding.engine.FlutterOverlaySurface
androidx.recyclerview.widget.RecyclerView
androidx.profileinstaller.ProfileInstallerInitializer
com.google.gson.internal.bind.TypeAdapters$30
com.google.android.material.transformation.ExpandableBehavior
me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer
androidx.media.AudioAttributesImplApi21Parcelizer
androidx.appcompat.app.AlertController$RecycleListView
com.google.gson.internal.bind.TypeAdapters$11
com.google.android.gms.common.annotation.KeepName
androidx.lifecycle.ReportFragment
me.carda.awesome_notifications.core.services.ForegroundService
com.google.gson.internal.bind.TypeAdapters$13
me.carda.awesome_notifications.DartBackgroundService
androidx.appcompat.view.menu.ExpandedMenuView
androidx.window.area.reflectionguard.ExtensionWindowAreaStatusRequirements
kotlinx.coroutines.internal.StackTraceRecoveryKt
com.google.gson.internal.bind.TypeAdapters$20
com.google.firebase.ktx.FirebaseCommonLegacyRegistrar
me.carda.awesome_notifications.core.AwesomeNotifications
com.google.gson.internal.bind.TypeAdapters$3
com.google.android.gms.common.GooglePlayServicesManifestException
android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper
androidx.loader.app.LoaderManagerImpl$LoaderViewModel
com.google.android.material.snackbar.BaseTransientBottomBar$Behavior
io.grpc.internal.JndiResourceResolverFactory
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback
android.support.v4.media.MediaBrowserCompat$SearchResultReceiver
com.google.android.gms.common.api.Scope
com.google.android.material.bottomsheet.BottomSheetBehavior
androidx.core.graphics.drawable.IconCompat
com.google.android.material.floatingactionbutton.FloatingActionButton$BaseBehavior
me.carda.awesome_notifications.core.utils.CompareUtils
com.google.gson.internal.bind.TypeAdapters$33
com.google.android.gms.common.api.internal.LifecycleCallback
androidx.window.extensions.core.util.function.Predicate
androidx.core.graphics.drawable.IconCompatParcelizer
com.google.gson.stream.JsonReader
me.carda.awesome_notifications.core.broadcasters.receivers.ScheduledNotificationReceiver
me.carda.awesome_notifications.DartDismissedNotificationReceiver
com.google.gson.internal.bind.NumberTypeAdapter
me.carda.awesome_notifications.core.enumerators.NotificationCategory
com.google.gson.internal.bind.TypeAdapters$6
me.carda.awesome_notifications.core.models.NotificationContentModel
com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper
androidx.startup.InitializationProvider
android.support.v4.media.session.MediaSessionCompat$Token
com.google.gson.internal.bind.TypeAdapters$17
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements
androidx.window.area.reflectionguard.ExtensionWindowAreaPresentationRequirements
com.google.android.gms.common.internal.ReflectedParcelable
androidx.versionedparcelable.ParcelImpl
me.carda.awesome_notifications.core.externalLibs.CronExpression
com.google.android.gms.common.GooglePlayServicesIncorrectManifestValueException
me.carda.awesome_notifications.core.utils.HtmlUtils
com.google.android.material.button.MaterialButtonToggleGroup
com.google.android.gms.common.ErrorDialogFragment
io.flutter.view.TextureRegistry$SurfaceProducer
androidx.appcompat.view.menu.ActionMenuItemView
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback
com.google.android.material.internal.TouchObserverFrameLayout
me.carda.awesome_notifications.core.managers.RepositoryManager
me.carda.awesome_notifications.core.utils.EnumUtils
com.google.gson.stream.package-info
com.google.android.material.transformation.FabTransformationSheetBehavior
me.carda.awesome_notifications.DartScheduledNotificationReceiver
com.google.gson.stream.JsonWriter
android.support.v4.media.session.PlaybackStateCompat
me.carda.awesome_notifications.core.completion_handlers.PermissionCompletionHandler
me.carda.awesome_notifications.core.listeners.AwesomeNotificationEventListener
me.carda.awesome_notifications.AwesomeNotificationsPlugin
me.carda.awesome_notifications.core.logs.Logger
me.carda.awesome_notifications.core.broadcasters.receivers.NotificationActionReceiver
com.google.android.material.transformation.ExpandableTransformationBehavior
me.carda.awesome_notifications.core.exceptions.ExceptionCode
androidx.appcompat.view.menu.ListMenuItemView
androidx.appcompat.widget.ActionMenuView
androidx.recyclerview.widget.GridLayoutManager
androidx.emoji2.text.EmojiCompatInitializer
com.google.gson.internal.bind.TypeAdapters$2
com.google.gson.internal.bind.TypeAdapters$9
com.google.android.material.datepicker.MaterialCalendarGridView
me.carda.awesome_notifications.core.enumerators.ActionType
me.carda.awesome_notifications.core.models.returnedData.NotificationReceived
me.carda.awesome_notifications.core.enumerators.ForegroundStartMode
com.google.android.material.floatingactionbutton.FloatingActionButton$Behavior
androidx.lifecycle.ReportFragment$LifecycleCallbacks
me.carda.awesome_notifications.core.databases.SqLiteCypher
me.carda.awesome_notifications.core.threads.NotificationScheduler
me.carda.awesome_notifications.core.broadcasters.receivers.RefreshSchedulesReceiver
com.google.firebase.provider.FirebaseInitProvider
com.google.gson.internal.bind.TypeAdapters$26
androidx.media.AudioAttributesCompat
com.google.android.material.search.SearchBar$ScrollingViewBehavior
com.google.gson.internal.Excluder
androidx.media.AudioAttributesImplApi21
com.google.gson.internal.bind.DateTypeAdapter$1
com.google.gson.internal.bind.SerializationDelegatingTypeAdapter
androidx.appcompat.widget.ActionBarContainer
com.google.android.gms.common.api.GoogleApiActivity
me.carda.awesome_notifications.core.models.NotificationChannelModel
com.google.android.material.datepicker.MaterialCalendar
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry
com.google.gson.internal.bind.TypeAdapters$34
me.carda.awesome_notifications.core.services.ForegroundService$ForegroundServiceIntent
com.google.gson.internal.sql.SqlDateTypeAdapter$1
com.google.gson.Gson$5
androidx.appcompat.widget.ViewStubCompat
me.carda.awesome_notifications.core.listeners.AwesomeEventListener
me.carda.awesome_notifications.R
com.ottobiss.sota.MainActivity
me.carda.awesome_notifications.core.managers.DisplayedManager
androidx.appcompat.widget.AlertDialogLayout
androidx.versionedparcelable.CustomVersionedParcelable
me.carda.awesome_notifications.core.managers.BadgeManager
com.google.gson.internal.bind.TypeAdapters$22
com.google.gson.internal.bind.TypeAdapters$25
com.google.android.material.internal.NavigationMenuView
androidx.core.app.RemoteActionCompatParcelizer
me.carda.awesome_notifications.core.threads.NotificationForegroundSender
me.carda.awesome_notifications.core.listeners.AwesomeExceptionListener
io.flutter.plugins.GeneratedPluginRegistrant
androidx.coordinatorlayout.widget.CoordinatorLayout
android.support.v4.media.MediaBrowserCompat$CustomActionResultReceiver
com.google.firebase.components.ComponentDiscoveryService
com.google.gson.internal.Excluder$1
com.google.android.gms.common.GooglePlayServicesMissingManifestValueException
me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour
com.google.android.material.internal.CheckableImageButton
com.google.gson.internal.bind.TypeAdapters$19
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack
com.google.gson.internal.bind.TypeAdapters$14
me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle
com.google.android.material.behavior.SwipeDismissBehavior
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeExceptionReceiver
me.carda.awesome_notifications.core.decoders.BitmapResourceDecoder
me.carda.awesome_notifications.core.listeners.AwesomeActionEventListener
androidx.transition.FragmentTransitionSupport
androidx.appcompat.widget.Toolbar
me.carda.awesome_notifications.core.R
io.flutter.view.FlutterCallbackInformation
android.support.v4.media.session.MediaControllerCompat$MediaControllerImplApi21$ExtraBinderRequestResultReceiver
com.google.android.material.carousel.CarouselLayoutManager
me.carda.awesome_notifications.AwesomeNotificationsFlutterExtension
me.carda.awesome_notifications.core.managers.CancellationManager
me.carda.awesome_notifications.DartRefreshSchedulesReceiver
me.carda.awesome_notifications.core.managers.PermissionManager
io.flutter.embedding.engine.FlutterJNI
me.carda.awesome_notifications.core.exceptions.ExceptionFactory
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$FieldReflectionAdapter
me.carda.awesome_notifications.core.models.AbstractModel
com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter
me.carda.awesome_notifications.core.managers.SharedManager
me.carda.awesome_notifications.core.utils.MapUtils
me.carda.awesome_notifications.core.enumerators.NotificationImportance
androidx.window.layout.adapter.sidecar.SidecarCompat$TranslatingCallback
me.carda.awesome_notifications.core.models.NotificationIntervalModel
com.google.android.material.snackbar.SnackbarContentLayout
me.carda.awesome_notifications.core.models.NotificationModel
com.google.android.material.behavior.HideBottomViewOnScrollBehavior
io.flutter.view.TextureRegistry$SurfaceTextureEntry
android.support.v4.graphics.drawable.IconCompatParcelizer
me.leolin.shortcutbadger.impl.NovaHomeBadger
com.google.android.material.textfield.TextInputEditText
io.flutter.plugins.firebase.firestore.FlutterFirebaseFirestoreRegistrar
androidx.fragment.app.FragmentContainerView
me.carda.awesome_notifications.core.services.AutoCancelService
com.google.gson.internal.bind.TypeAdapters$1
com.google.gson.internal.bind.TypeAdapters$23
io.flutter.plugins.firebase.firestore.FlutterFirebaseFirestorePlugin
com.google.gson.internal.bind.ArrayTypeAdapter$1
io.grpc.okhttp.OkHttpChannelProvider
com.google.android.material.bottomappbar.BottomAppBar$Behavior
com.google.firebase.firestore.FirebaseFirestoreKtxRegistrar
com.google.android.material.sidesheet.SideSheetBehavior
me.carda.awesome_notifications.core.managers.ActionManager
me.carda.awesome_notifications.core.utils.ThreadUtils
me.leolin.shortcutbadger.impl.XiaomiHomeBadger
me.carda.awesome_notifications.core.completion_handlers.NotificationThreadCompletionHandler
androidx.media.AudioAttributesImplBase
com.google.gson.Gson$4
me.carda.awesome_notifications.core.services.BackgroundService
me.carda.awesome_notifications.core.enumerators.LogLevel
com.google.android.material.internal.ClippableRoundedCornerLayout
io.flutter.plugin.text.ProcessTextPlugin
me.carda.awesome_notifications.core.managers.CreatedManager
com.google.gson.internal.sql.SqlTimestampTypeAdapter$1
com.google.gson.internal.sql.SqlDateTypeAdapter
com.google.gson.internal.bind.MapTypeAdapterFactory
io.flutter.view.TextureRegistry$GLTextureConsumer
me.carda.awesome_notifications.core.utils.AudioUtils
com.google.gson.internal.bind.TypeAdapters$32
com.google.gson.internal.bind.TypeAdapters$12
me.carda.awesome_notifications.core.enumerators.ForegroundServiceType
androidx.media.AudioAttributesImplApi26Parcelizer
com.google.firebase.ktx.FirebaseCommonKtxRegistrar
me.leolin.shortcutbadger.impl.DefaultBadger
me.carda.awesome_notifications.core.enumerators.NotificationPermission
me.carda.awesome_notifications.core.models.NotificationButtonModel
me.carda.awesome_notifications.core.utils.CronUtils
me.carda.awesome_notifications.core.models.NotificationChannelGroupModel
me.carda.awesome_notifications.core.managers.DismissedManager
com.google.android.material.timepicker.ClockFaceView
me.carda.awesome_notifications.core.Definitions
com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter
kotlin.internal.jdk7.JDK7PlatformImplementations
me.carda.awesome_notifications.core.enumerators.SafeEnum
me.carda.awesome_notifications.core.models.NotificationScheduleModel
me.carda.awesome_notifications.core.enumerators.NotificationSource
me.carda.awesome_notifications.core.broadcasters.senders.BroadcastSender
com.google.firebase.firestore.FirestoreRegistrar
kotlinx.coroutines.android.AndroidDispatcherFactory
com.google.gson.internal.sql.SqlTimeTypeAdapter$1
com.google.android.material.textfield.TextInputLayout
me.carda.awesome_notifications.core.utils.CalendarUtils
me.carda.awesome_notifications.core.BuildConfig
me.carda.awesome_notifications.core.enumerators.NotificationPrivacy
com.google.android.material.transformation.FabTransformationBehavior
com.google.gson.internal.bind.CollectionTypeAdapterFactory
com.google.android.material.button.MaterialButton
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory
io.grpc.internal.PickFirstLoadBalancerProvider
com.google.firebase.components.ComponentRegistrar
android.support.v4.media.MediaDescriptionCompat
android.support.v4.app.RemoteActionCompatParcelizer
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory
com.google.gson.internal.bind.TypeAdapters$4
android.support.v4.media.MediaMetadataCompat
com.google.android.material.appbar.AppBarLayout$Behavior
com.google.gson.internal.bind.ObjectTypeAdapter
androidx.appcompat.widget.ButtonBarLayout
com.google.firestore.v1.BloomFilter: int HASH_COUNT_FIELD_NUMBER
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: long id
me.carda.awesome_notifications.core.enumerators.NotificationPermission: me.carda.awesome_notifications.core.enumerators.NotificationPermission CriticalAlert
com.google.firestore.v1.BitSequence: com.google.protobuf.Parser PARSER
com.google.firestore.v1.Target$DocumentsTarget: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.externalLibs.CronExpression: int ALL_SPEC_INT
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_ACTION_DATE
com.google.firestore.v1.StructuredQuery$FieldFilter: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.Definitions: java.lang.String SHARED_SCHEDULED_NOTIFICATIONS
com.google.firebase.firestore.proto.Target: com.google.firebase.firestore.proto.Target DEFAULT_INSTANCE
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$InsetsListener insetsListener
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: android.graphics.Matrix finalMatrix
me.carda.awesome_notifications.core.threads.NotificationForegroundSender: long endTime
me.carda.awesome_notifications.core.Definitions: java.lang.String SHARED_SCHEDULED_NOT_CHANNELS
me.carda.awesome_notifications.core.models.NotificationModel: boolean groupSummary
com.google.firestore.v1.Target$QueryTarget: java.lang.String parent_
com.google.firestore.v1.Cursor: com.google.firestore.v1.Cursor DEFAULT_INSTANCE
me.carda.awesome_notifications.core.exceptions.ExceptionCode: java.lang.String DETAILED_REPOSITORY
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_BUTTON_KEY_INPUT
com.google.firestore.v1.DocumentChange: int removedTargetIdsMemoizedSerializedSize
com.google.firestore.v1.StructuredQuery: int OFFSET_FIELD_NUMBER
me.carda.awesome_notifications.core.builders.NotificationBuilder: java.util.concurrent.ConcurrentHashMap messagingQueue
kotlinx.coroutines.scheduling.CoroutineScheduler: long parkedWorkersStack
com.google.firestore.v1.TargetChange: com.google.protobuf.ByteString resumeToken_
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_SCHEDULE_YEAR
io.flutter.view.AccessibilityViewEmbedder: java.lang.String TAG
me.carda.awesome_notifications.core.enumerators.NotificationSource: me.carda.awesome_notifications.core.enumerators.NotificationSource ForegroundService
me.carda.awesome_notifications.core.models.returnedData.ActionReceived: me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle dismissedLifeCycle
com.google.firestore.v1.StructuredQuery$Filter: int filterTypeCase_
me.carda.awesome_notifications.core.utils.CalendarUtils: me.carda.awesome_notifications.core.utils.CalendarUtils instance
me.carda.awesome_notifications.core.models.NotificationLocalizationModel: java.lang.String bigPicture
me.carda.awesome_notifications.DartBackgroundExecutor: io.flutter.plugin.common.MethodChannel backgroundChannel
io.flutter.view.AccessibilityViewEmbedder: int nextFlutterId
com.google.firestore.v1.TransactionOptions: int READ_WRITE_FIELD_NUMBER
com.google.firestore.v1.CommitRequest: com.google.protobuf.Internal$ProtobufList writes_
com.google.gson.stream.JsonWriter: java.util.regex.Pattern VALID_JSON_NUMBER_PATTERN
me.carda.awesome_notifications.core.enumerators.ForegroundServiceType: me.carda.awesome_notifications.core.enumerators.ForegroundServiceType dataSync
me.carda.awesome_notifications.core.enumerators.NotificationPermission: me.carda.awesome_notifications.core.enumerators.NotificationPermission Sound
me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType: me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType[] valueList
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_GROUP_ALERT_BEHAVIOR
me.carda.awesome_notifications.core.models.NotificationChannelModel: java.lang.Boolean onlyAlertOnce
com.google.firestore.v1.AggregationResult: com.google.protobuf.Parser PARSER
com.google.firestore.v1.RunAggregationQueryResponse: com.google.protobuf.Parser PARSER
com.google.firestore.v1.CommitResponse: int COMMIT_TIME_FIELD_NUMBER
me.carda.awesome_notifications.core.enumerators.ForegroundServiceType: me.carda.awesome_notifications.core.enumerators.ForegroundServiceType redeliveryIntent
io.flutter.plugins.GeneratedPluginRegistrant: java.lang.String TAG
me.carda.awesome_notifications.core.utils.EnumUtils: me.carda.awesome_notifications.core.utils.EnumUtils instance
me.carda.awesome_notifications.core.threads.NotificationSender: me.carda.awesome_notifications.core.completion_handlers.NotificationThreadCompletionHandler threadCompletionHandler
kotlinx.coroutines.CompletedExceptionally: int _handled
com.google.firestore.v1.ListenResponse: int responseTypeCase_
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: java.util.Map registeredPlugins
me.carda.awesome_notifications.core.threads.NotificationScheduler: android.content.Intent originalIntent
me.carda.awesome_notifications.core.AwesomeNotifications: java.lang.Class actionReceiverClass
com.google.firestore.v1.StructuredQuery$FieldReference: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.exceptions.ExceptionCode: java.lang.String DETAILED_REQUIRED_ARGUMENTS
io.flutter.view.AccessibilityViewEmbedder: java.util.Map originToFlutterId
com.google.firestore.v1.RunAggregationQueryResponse: com.google.protobuf.ByteString transaction_
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: java.lang.String TABLE_NAME
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_START_FOREGROUND
com.google.firestore.v1.StructuredQuery$FieldFilter: com.google.firestore.v1.StructuredQuery$FieldFilter DEFAULT_INSTANCE
me.carda.awesome_notifications.core.exceptions.ExceptionCode: java.lang.String CODE_PAGE_NOT_FOUND
me.carda.awesome_notifications.core.models.NotificationModel: me.carda.awesome_notifications.core.models.NotificationScheduleModel schedule
com.google.firestore.v1.StructuredQuery$FieldFilter: int op_
me.carda.awesome_notifications.core.models.NotificationCalendarModel: java.lang.Integer year
me.carda.awesome_notifications.core.databases.SqLiteCypher: boolean isInitialized
io.flutter.plugin.platform.SingleViewPresentation: int viewId
com.google.firestore.v1.BatchGetDocumentsResponse: int FOUND_FIELD_NUMBER
me.carda.awesome_notifications.AwesomeNotificationsPlugin: java.lang.String TAG
kotlinx.coroutines.DefaultExecutor: int debugStatus
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _removedRef
com.google.firestore.v1.StructuredQuery: int END_AT_FIELD_NUMBER
me.carda.awesome_notifications.core.enumerators.ForegroundServiceType: me.carda.awesome_notifications.core.enumerators.ForegroundServiceType connectedDevice
com.google.protobuf.Int64Value: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_COLOR
com.google.firestore.v1.Target: int DOCUMENTS_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_SOUND_SOURCE
me.carda.awesome_notifications.core.enumerators.NotificationImportance: me.carda.awesome_notifications.core.enumerators.NotificationImportance Default
me.carda.awesome_notifications.core.Definitions: java.lang.String EVENT_NOTIFICATION_DISMISSED
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_DECREMENT_BADGE_COUNT
androidx.coordinatorlayout.widget.CoordinatorLayout$SavedState: android.os.Parcelable$Creator CREATOR
me.carda.awesome_notifications.core.Definitions: java.lang.String SHARED_CREATED
com.google.firebase.firestore.proto.WriteBatch: int bitField0_
me.carda.awesome_notifications.core.externalLibs.CronExpression: long serialVersionUID
me.carda.awesome_notifications.core.enumerators.GroupSort: me.carda.awesome_notifications.core.enumerators.GroupSort Asc
com.google.firestore.v1.ListenRequest: com.google.protobuf.Parser PARSER
androidx.core.app.JobIntentService: boolean mDestroyed
me.carda.awesome_notifications.core.exceptions.ExceptionCode: java.lang.String DETAILED_INVALID_FORMAT
com.google.firestore.v1.ListenRequest: int REMOVE_TARGET_FIELD_NUMBER
com.google.firestore.v1.Target: int targetId_
me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle: me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle AppKilled
me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType: me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType Alarm
me.carda.awesome_notifications.core.models.NotificationChannelModel: java.lang.Boolean enableVibration
com.google.protobuf.Timestamp: int SECONDS_FIELD_NUMBER
me.carda.awesome_notifications.core.exceptions.ExceptionCode: java.lang.String CODE_NOTIFICATION_THREAD_EXCEPTION
com.google.firestore.v1.RunAggregationQueryRequest: int NEW_TRANSACTION_FIELD_NUMBER
me.carda.awesome_notifications.core.threads.NotificationSender: android.content.Intent originalIntent
androidx.fragment.app.FragmentManagerState: android.os.Parcelable$Creator CREATOR
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int requestedWidth
me.carda.awesome_notifications.core.models.NotificationChannelModel: me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType defaultRingtoneType
me.carda.awesome_notifications.core.enumerators.NotificationPermission: me.carda.awesome_notifications.core.enumerators.NotificationPermission Alert
me.carda.awesome_notifications.core.managers.SharedManager: java.lang.Class clazz
me.carda.awesome_notifications.core.Definitions: java.lang.String EVENT_NOTIFICATION_DISPLAYED
me.carda.awesome_notifications.core.exceptions.ExceptionCode: java.lang.String CODE_CLASS_NOT_FOUND
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_BODY_LOC_ARGS
io.flutter.plugin.platform.SingleViewPresentation: android.content.Context outerContext
io.flutter.embedding.engine.FlutterJNI: java.util.Set engineLifecycleListeners
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.Boolean fullScreenIntent
me.carda.awesome_notifications.core.AwesomeNotifications: java.lang.String packageName
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.Integer backgroundColor
me.carda.awesome_notifications.core.models.AbstractModel: java.util.Map defaultValues
com.google.firestore.v1.CommitRequest: int TRANSACTION_FIELD_NUMBER
me.carda.awesome_notifications.core.managers.LifeCycleManager: java.lang.String TAG
com.google.firestore.v1.DocumentTransform$FieldTransform: int APPEND_MISSING_ELEMENTS_FIELD_NUMBER
me.carda.awesome_notifications.core.exceptions.ExceptionCode: java.lang.String DETAILED_PAGE_NOT_FOUND
me.carda.awesome_notifications.core.models.NotificationLocalizationModel: java.lang.String body
com.google.firestore.v1.WriteRequest: int DATABASE_FIELD_NUMBER
io.flutter.embedding.engine.FlutterJNI: boolean loadLibraryCalled
com.google.firestore.v1.DocumentTransform$FieldTransform: com.google.protobuf.Parser PARSER
com.google.gson.stream.JsonReader: int peeked
me.carda.awesome_notifications.core.externalLibs.CronExpression: int DAY_OF_MONTH
me.carda.awesome_notifications.core.managers.ChannelManager: me.carda.awesome_notifications.core.utils.StringUtils stringUtils
com.google.gson.stream.JsonReader: int PEEKED_DOUBLE_QUOTED_NAME
com.google.android.gms.common.api.Status: android.os.Parcelable$Creator CREATOR
com.google.firestore.v1.StructuredQuery$Projection: int FIELDS_FIELD_NUMBER
com.google.firestore.v1.StructuredAggregationQuery$Aggregation$Sum: com.google.firestore.v1.StructuredQuery$FieldReference field_
me.carda.awesome_notifications.core.utils.StringUtils: java.lang.String TAG
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_MODEL_CONTENT
androidx.core.widget.NestedScrollView$SavedState: android.os.Parcelable$Creator CREATOR
me.carda.awesome_notifications.core.managers.CancellationManager: me.carda.awesome_notifications.core.utils.StringUtils stringUtils
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_ID
com.google.firestore.v1.Document: int UPDATE_TIME_FIELD_NUMBER
com.google.firestore.v1.DocumentTransform$FieldTransform: int REMOVE_ALL_FROM_ARRAY_FIELD_NUMBER
me.carda.awesome_notifications.core.services.ForegroundService: java.util.Map serviceIntentStack
me.carda.awesome_notifications.core.enumerators.ForegroundStartMode: me.carda.awesome_notifications.core.enumerators.ForegroundStartMode stickCompatibility
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_CANCEL_NOTIFICATIONS_BY_CHANNEL_KEY
com.google.android.gms.common.internal.RootTelemetryConfiguration: android.os.Parcelable$Creator CREATOR
me.carda.awesome_notifications.core.enumerators.NotificationImportance: me.carda.awesome_notifications.core.enumerators.NotificationImportance Low
com.google.firestore.v1.Write: com.google.firestore.v1.Precondition currentDocument_
com.google.firestore.v1.StructuredAggregationQuery$Aggregation: int AVG_FIELD_NUMBER
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory Message
io.flutter.embedding.engine.FlutterJNI: java.lang.String vmServiceUri
com.google.firestore.v1.Write: com.google.protobuf.Internal$ProtobufList updateTransforms_
me.carda.awesome_notifications.core.threads.NotificationSender: me.carda.awesome_notifications.core.enumerators.NotificationSource createdSource
com.google.firestore.v1.TargetChange: int targetChangeType_
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.lang.Integer NO_SPEC
com.google.protobuf.Any: java.lang.String typeUrl_
me.carda.awesome_notifications.core.Definitions: java.lang.String BROADCAST_SILENT_ACTION
me.carda.awesome_notifications.core.utils.AudioUtils: me.carda.awesome_notifications.core.utils.AudioUtils instance
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_BODY_LOC_KEY
me.carda.awesome_notifications.core.models.NotificationModel: me.carda.awesome_notifications.core.models.NotificationContentModel content
me.carda.awesome_notifications.core.threads.NotificationForegroundSender: java.lang.ref.WeakReference wContextReference
me.carda.awesome_notifications.core.threads.NotificationThread: java.lang.String TAG
me.carda.awesome_notifications.core.Definitions: java.lang.String SCHEDULER_HELPER_ALL
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.Boolean displayOnForeground
androidx.lifecycle.ProcessLifecycleOwner$attach$1$onActivityPreCreated$1: androidx.lifecycle.ProcessLifecycleOwner this$0
com.google.firebase.firestore.proto.MaybeDocument: int UNKNOWN_DOCUMENT_FIELD_NUMBER
com.google.firestore.v1.Write: int VERIFY_FIELD_NUMBER
me.carda.awesome_notifications.core.managers.DismissedManager: me.carda.awesome_notifications.core.managers.RepositoryManager shared
me.carda.awesome_notifications.core.logs.Logger: java.lang.String redColor
me.carda.awesome_notifications.core.models.NotificationScheduleModel: java.util.Calendar createdDate
com.google.firestore.v1.BatchGetDocumentsRequest: com.google.firestore.v1.BatchGetDocumentsRequest DEFAULT_INSTANCE
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.Integer color
com.google.firestore.admin.v1.Index$IndexField: java.lang.Object valueMode_
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.Integer timeoutAfter
com.google.firestore.v1.WriteResponse: int COMMIT_TIME_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_DEFAULT_RINGTONE_TYPE
com.google.firestore.v1.WriteRequest: com.google.protobuf.Internal$ProtobufList writes_
com.google.firestore.v1.DocumentChange: int targetIdsMemoizedSerializedSize
me.carda.awesome_notifications.core.models.NotificationContentModel: java.util.List messages
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_CANCEL_ALL_NOTIFICATIONS
me.carda.awesome_notifications.core.models.NotificationChannelModel: java.lang.Long defaultColor
com.google.android.gms.signin.internal.zaa: android.os.Parcelable$Creator CREATOR
me.carda.awesome_notifications.core.models.NotificationCalendarModel: java.lang.Integer day
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean released
com.google.firebase.firestore.proto.Target: int TARGET_ID_FIELD_NUMBER
com.google.firebase.firestore.proto.Target: com.google.protobuf.Timestamp snapshotVersion_
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.lang.Integer ALL_SPEC
me.carda.awesome_notifications.core.AwesomeNotifications: boolean isTheMainInstance
me.carda.awesome_notifications.core.enumerators.ForegroundServiceType: me.carda.awesome_notifications.core.enumerators.ForegroundServiceType phoneCall
me.carda.awesome_notifications.core.Definitions: java.lang.String DISPLAYED_HANDLE
me.carda.awesome_notifications.core.managers.DefaultsManager: me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB sqLitePrimitives
com.google.firestore.v1.CommitRequest: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_SHOW_ALARM_PAGE
io.flutter.plugins.firebase.core.FlutterFirebasePlugin: java.util.concurrent.ExecutorService cachedThreadPool
com.google.firestore.v1.WriteResponse: int STREAM_TOKEN_FIELD_NUMBER
android.support.v4.media.session.PlaybackStateCompat$CustomAction: android.os.Parcelable$Creator CREATOR
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_STOP_FOREGROUND
me.carda.awesome_notifications.core.AwesomeNotifications: java.lang.String TAG
me.carda.awesome_notifications.core.managers.RepositoryManager: java.lang.String hashedReference
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean createNewReader
com.google.gson.stream.JsonReader: long peekedLong
com.google.firestore.v1.StructuredAggregationQuery$Aggregation$Avg: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_CANCEL_SCHEDULES_BY_GROUP_KEY
com.google.gson.stream.JsonReader: int lineNumber
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver: me.carda.awesome_notifications.core.utils.StringUtils stringUtils
com.google.firestore.v1.StructuredAggregationQuery$Aggregation: com.google.firestore.v1.StructuredAggregationQuery$Aggregation DEFAULT_INSTANCE
com.google.firestore.v1.StructuredQuery$FieldReference: java.lang.String fieldPath_
com.google.firestore.v1.StructuredAggregationQuery$Aggregation$Avg: com.google.firestore.v1.StructuredQuery$FieldReference field_
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_CUSTOM_SOUND
com.google.firestore.v1.DocumentTransform$FieldTransform: java.lang.Object transformType_
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_PERMISSIONS
me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour: me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour Summary
com.google.gson.stream.JsonWriter: int[] stack
me.carda.awesome_notifications.core.threads.NotificationSender: java.lang.Boolean displayed
com.google.firestore.v1.ListenRequest: com.google.protobuf.MapFieldLite labels_
com.google.firestore.v1.StructuredAggregationQuery$Aggregation$Sum: com.google.firestore.v1.StructuredAggregationQuery$Aggregation$Sum DEFAULT_INSTANCE
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: java.lang.String TAG
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_PLAYBACK_SPEED
me.carda.awesome_notifications.core.threads.NotificationForegroundSender: me.carda.awesome_notifications.core.enumerators.NotificationSource createdSource
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.String icon
com.google.firestore.v1.Target$QueryTarget: int STRUCTURED_QUERY_FIELD_NUMBER
me.carda.awesome_notifications.core.enumerators.NotificationPermission: me.carda.awesome_notifications.core.enumerators.NotificationPermission FullScreenIntent
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_HIDE_LARGE_ICON_ON_EXPAND
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_DEFAULT_PRIVACY
com.google.firebase.firestore.proto.MaybeDocument: int NO_DOCUMENT_FIELD_NUMBER
me.carda.awesome_notifications.core.models.NotificationChannelModel: long[] vibrationPattern
com.google.firestore.v1.DocumentRemove: int bitField0_
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_GET_INITIAL_ACTION
me.carda.awesome_notifications.core.exceptions.ExceptionCode: java.lang.String CODE_INVALID_IMAGE
com.google.android.gms.common.internal.GetServiceRequest: android.os.Parcelable$Creator CREATOR
com.google.firestore.v1.RunAggregationQueryRequest: com.google.protobuf.Parser PARSER
com.google.firestore.v1.StructuredAggregationQuery$Aggregation: int ALIAS_FIELD_NUMBER
com.google.firestore.v1.StructuredQuery$Filter: com.google.firestore.v1.StructuredQuery$Filter DEFAULT_INSTANCE
kotlinx.coroutines.scheduling.WorkQueue: java.lang.Object lastScheduledTask
com.google.protobuf.Any: com.google.protobuf.Any DEFAULT_INSTANCE
io.flutter.embedding.engine.FlutterJNI: java.lang.Long nativeShellHolderId
com.google.firestore.v1.StructuredQuery$CollectionSelector: java.lang.String collectionId_
com.google.firebase.firestore.proto.MaybeDocument: com.google.firebase.firestore.proto.MaybeDocument DEFAULT_INSTANCE
me.carda.awesome_notifications.core.models.NotificationLocalizationModel: java.lang.String TAG
me.carda.awesome_notifications.core.models.NotificationButtonModel: me.carda.awesome_notifications.core.enumerators.ActionType actionType
kotlinx.coroutines.scheduling.WorkQueue: int consumerIndex
com.google.gson.stream.JsonReader: int PEEKED_BEGIN_OBJECT
com.google.firebase.firestore.proto.UnknownDocument: int VERSION_FIELD_NUMBER
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeExceptionReceiver: java.lang.String TAG
me.carda.awesome_notifications.AwesomeNotificationsPlugin: io.flutter.plugin.common.MethodChannel pluginChannel
me.carda.awesome_notifications.core.threads.NotificationScheduler: long endTime
me.carda.awesome_notifications.core.utils.JsonUtils: java.lang.String TAG
kotlinx.coroutines.channels.BufferedChannel: long completedExpandBuffersAndPauseFlag
com.google.firestore.v1.ListenResponse: int DOCUMENT_REMOVE_FIELD_NUMBER
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate asyncWaitForVsyncDelegate
com.google.firestore.v1.BitSequence: int BITMAP_FIELD_NUMBER
me.carda.awesome_notifications.core.managers.ChannelManager: me.carda.awesome_notifications.core.managers.RepositoryManager shared
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List finalClippingPaths
me.carda.awesome_notifications.core.decoders.BitmapResourceDecoder: java.lang.ref.WeakReference wContextReference
me.carda.awesome_notifications.core.models.NotificationChannelModel: java.lang.Boolean channelShowBadge
com.google.firestore.v1.DocumentRemove: com.google.protobuf.Timestamp readTime_
com.google.firestore.v1.DocumentChange: com.google.protobuf.Internal$IntList targetIds_
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout rootView
com.google.firestore.v1.CommitRequest: int DATABASE_FIELD_NUMBER
kotlinx.coroutines.channels.BufferedChannel: long receivers
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_NEW_FCM_TOKEN
com.google.firestore.v1.WriteResponse: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.models.NotificationCrontabModel: java.lang.String TAG
com.google.firestore.v1.Write: java.lang.Object operation_
com.google.firestore.v1.RunAggregationQueryRequest: int TRANSACTION_FIELD_NUMBER
com.google.gson.stream.JsonReader: int NUMBER_CHAR_NONE
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: java.lang.String DATABASE_NAME
me.carda.awesome_notifications.core.enumerators.NotificationCategory: java.lang.String rawValue
io.flutter.view.AccessibilityViewEmbedder: java.util.Map embeddedViewToDisplayBounds
io.flutter.plugin.platform.SingleViewPresentation: android.view.View$OnFocusChangeListener focusChangeListener
com.google.android.material.button.MaterialButton$SavedState: android.os.Parcelable$Creator CREATOR
com.google.firestore.bundle.BundledQuery: com.google.protobuf.Parser PARSER
com.google.gson.stream.JsonReader: int limit
me.carda.awesome_notifications.core.models.returnedData.ActionReceived: java.util.Calendar dismissedDate
me.carda.awesome_notifications.core.Definitions: java.lang.String SHARED_CHANNEL_GROUP
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int MAX_IMAGES
com.google.rpc.Status: int code_
com.google.firestore.v1.TransactionOptions: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.threads.NotificationForegroundSender: me.carda.awesome_notifications.core.completion_handlers.NotificationThreadCompletionHandler threadCompletionHandler
com.google.firestore.v1.AggregationResult: com.google.protobuf.MapFieldLite aggregateFields_
me.carda.awesome_notifications.core.exceptions.ExceptionCode: java.lang.String CODE_UNKNOWN_EXCEPTION
com.google.firestore.v1.Target: int QUERY_FIELD_NUMBER
me.carda.awesome_notifications.core.decoders.BitmapResourceDecoder: java.lang.String TAG
com.google.firestore.v1.StructuredQuery: int SELECT_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_ENABLE_VIBRATION
com.google.firestore.v1.BloomFilter: com.google.firestore.v1.BitSequence bits_
me.carda.awesome_notifications.core.Definitions: java.lang.String SCHEDULER_HELPER_GROUP
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.util.TreeSet months
com.google.gson.stream.JsonReader: int PEEKED_SINGLE_QUOTED_NAME
com.google.firestore.v1.StructuredQuery$FieldFilter: int OP_FIELD_NUMBER
com.google.firestore.v1.StructuredQuery$FieldReference: int FIELD_PATH_FIELD_NUMBER
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.String largeIcon
me.carda.awesome_notifications.core.AwesomeNotifications: java.util.List awesomeEventListeners
android.support.v4.media.MediaDescriptionCompat: android.os.Parcelable$Creator CREATOR
me.carda.awesome_notifications.core.enumerators.GroupSort: me.carda.awesome_notifications.core.enumerators.GroupSort[] valueList
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$PresentationState state
com.google.firebase.firestore.proto.Target: int SNAPSHOT_VERSION_FIELD_NUMBER
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int deferredInsetTypes
com.google.firestore.v1.Precondition: com.google.firestore.v1.Precondition DEFAULT_INSTANCE
com.google.firestore.v1.WriteRequest: com.google.protobuf.MapFieldLite labels_
me.carda.awesome_notifications.core.exceptions.ExceptionCode: java.lang.String CODE_INVALID_ARGUMENTS
com.google.firestore.v1.BloomFilter: com.google.firestore.v1.BloomFilter DEFAULT_INSTANCE
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.Integer chronometer
com.google.firestore.v1.ListenResponse: com.google.firestore.v1.ListenResponse DEFAULT_INSTANCE
me.carda.awesome_notifications.core.enumerators.NotificationSource: me.carda.awesome_notifications.core.enumerators.NotificationSource[] valueList
me.carda.awesome_notifications.core.enumerators.MediaSource: me.carda.awesome_notifications.core.enumerators.MediaSource Network
me.carda.awesome_notifications.core.AwesomeNotifications: boolean areExtensionsLoaded
androidx.fragment.app.BackStackRecordState: android.os.Parcelable$Creator CREATOR
com.google.firestore.admin.v1.Index: int queryScope_
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_IS_DANGEROUS_OPTION
com.google.firestore.v1.Cursor: com.google.protobuf.Internal$ProtobufList values_
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.util.TreeSet seconds
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_INITIAL_FIXED_DATE
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_BUTTON_KEY
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _next
com.google.firestore.v1.StructuredQuery$CompositeFilter: int FILTERS_FIELD_NUMBER
me.carda.awesome_notifications.core.enumerators.NotificationImportance: me.carda.awesome_notifications.core.enumerators.NotificationImportance[] valueList
me.carda.awesome_notifications.core.enumerators.NotificationLayout: me.carda.awesome_notifications.core.enumerators.NotificationLayout MediaPlayer
me.carda.awesome_notifications.core.threads.NotificationSender: me.carda.awesome_notifications.core.builders.NotificationBuilder notificationBuilder
com.google.firestore.v1.StructuredQuery: int FROM_FIELD_NUMBER
com.google.gson.internal.JsonReaderInternalAccess: com.google.gson.internal.JsonReaderInternalAccess INSTANCE
me.carda.awesome_notifications.core.managers.SharedManager: java.lang.String className
com.google.firestore.v1.DocumentRemove: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.enumerators.NotificationPlayState: int rawValue
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int workerCtl
com.google.firestore.bundle.BundledQuery: int queryTypeCase_
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory Error
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.Float playbackSpeed
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken END_ARRAY
io.flutter.embedding.engine.FlutterOverlaySurface: int id
com.google.firestore.v1.BitSequence: com.google.protobuf.ByteString bitmap_
com.google.firebase.firestore.proto.NoDocument: int READ_TIME_FIELD_NUMBER
me.carda.awesome_notifications.core.enumerators.MediaSource: me.carda.awesome_notifications.core.enumerators.MediaSource File
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackLibraryPath
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_DISMISS_NOTIFICATION
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_GET_UTC_TIMEZONE_IDENTIFIER
me.carda.awesome_notifications.core.models.NotificationCalendarModel: java.lang.Integer weekOfMonth
io.flutter.embedding.engine.FlutterJNI: android.os.Looper mainLooper
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_DISMISSED_LIFECYCLE
com.google.gson.stream.JsonReader: int NUMBER_CHAR_EXP_DIGIT
me.carda.awesome_notifications.AwesomeNotificationsPlugin: io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener permissionsResultListener
com.google.firestore.v1.Value: int NULL_VALUE_FIELD_NUMBER
com.google.firestore.v1.WriteResponse: java.lang.String streamId_
kotlinx.coroutines.JobSupport$Finishing: int _isCompleting
com.google.firestore.v1.StructuredAggregationQuery: com.google.firestore.v1.StructuredAggregationQuery DEFAULT_INSTANCE
me.carda.awesome_notifications.core.models.NotificationChannelModel: java.lang.String soundSource
me.carda.awesome_notifications.core.Definitions: java.lang.String SHARED_SCHEDULED_NOT_GROUPS
androidx.concurrent.futures.AbstractResolvableFuture: androidx.concurrent.futures.AbstractResolvableFuture$Waiter waiters
kotlinx.coroutines.internal.LimitedDispatcher: int runningWorkers
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean CLEANUP_ON_MEMORY_PRESSURE
com.google.firestore.bundle.BundledQuery: java.lang.Object queryType_
me.carda.awesome_notifications.core.threads.NotificationForegroundSender: me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle appLifeCycle
me.carda.awesome_notifications.core.exceptions.ExceptionCode: java.lang.String DETAILED_INITIALIZATION_FAILED
me.carda.awesome_notifications.core.models.NotificationContentModel: java.util.Calendar displayedDate
me.carda.awesome_notifications.core.models.returnedData.ActionReceived: java.lang.String buttonKeyPressed
me.carda.awesome_notifications.core.models.NotificationChannelModel: java.lang.Integer iconResourceId
com.google.gson.stream.JsonWriter: java.lang.String[] HTML_SAFE_REPLACEMENT_CHARS
com.google.firestore.admin.v1.Index$IndexField: com.google.firestore.admin.v1.Index$IndexField DEFAULT_INSTANCE
com.google.firestore.v1.Value: int DOUBLE_VALUE_FIELD_NUMBER
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: long lastScheduleTime
com.google.firestore.v1.StructuredQuery: int bitField0_
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.Boolean playSound
com.google.firestore.v1.TargetChange: com.google.rpc.Status cause_
me.carda.awesome_notifications.core.exceptions.ExceptionCode: java.lang.String DETAILED_UNEXPECTED_ERROR
me.carda.awesome_notifications.core.utils.BitmapUtils: java.lang.String TAG
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_FLUTTER_PLUGIN
me.carda.awesome_notifications.core.models.NotificationButtonModel: java.lang.Boolean isAuthenticationRequired
me.carda.awesome_notifications.core.threads.NotificationScheduler: java.lang.Boolean rescheduled
me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle: me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle[] $VALUES
com.google.firestore.v1.StructuredAggregationQuery$Aggregation$Count: com.google.firestore.v1.StructuredAggregationQuery$Aggregation$Count DEFAULT_INSTANCE
me.carda.awesome_notifications.core.models.NotificationCalendarModel: java.lang.Integer weekday
me.carda.awesome_notifications.AwesomeNotificationsPlugin: io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding activityBinding
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_ROUNDED_BIG_PICTURE
me.carda.awesome_notifications.core.models.NotificationContentModel: boolean isRefreshNotification
com.google.protobuf.Int32Value: com.google.protobuf.Int32Value DEFAULT_INSTANCE
me.carda.awesome_notifications.core.enumerators.ForegroundServiceType: me.carda.awesome_notifications.core.enumerators.ForegroundServiceType location
com.google.gson.stream.JsonReader: int PEEKED_TRUE
com.google.firestore.v1.WriteRequest: java.lang.String streamId_
me.carda.awesome_notifications.core.models.NotificationCrontabModel: java.util.List preciseSchedules
com.google.firestore.v1.StructuredQuery$Filter: java.lang.Object filterType_
me.carda.awesome_notifications.core.utils.BooleanUtils: me.carda.awesome_notifications.core.utils.BooleanUtils instance
me.carda.awesome_notifications.core.enumerators.NotificationSource: me.carda.awesome_notifications.core.enumerators.NotificationSource Schedule
me.carda.awesome_notifications.core.enumerators.NotificationPrivacy: me.carda.awesome_notifications.core.enumerators.NotificationPrivacy Secret
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int requestedHeight
com.google.firestore.v1.TransactionOptions$ReadOnly: com.google.firestore.v1.TransactionOptions$ReadOnly DEFAULT_INSTANCE
me.carda.awesome_notifications.core.models.NotificationCalendarModel: java.lang.String weekdayName
com.google.android.material.timepicker.TimeModel: android.os.Parcelable$Creator CREATOR
me.carda.awesome_notifications.core.models.NotificationChannelModel: java.lang.String channelDescription
me.carda.awesome_notifications.core.externalLibs.CronExpression: boolean lastdayOfWeek
com.google.firestore.v1.TargetChange: int READ_TIME_FIELD_NUMBER
com.google.firestore.v1.StructuredAggregationQuery: com.google.protobuf.Internal$ProtobufList aggregations_
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean ignoringFence
com.google.firestore.v1.AggregationResult: com.google.firestore.v1.AggregationResult DEFAULT_INSTANCE
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean newFrameAvailable
com.google.firestore.v1.MapValue: com.google.firestore.v1.MapValue DEFAULT_INSTANCE
com.google.rpc.Status: com.google.protobuf.Internal$ProtobufList details_
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: int DATABASE_VERSION
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_SCHEDULE_HOUR
com.google.firestore.v1.DocumentChange: com.google.protobuf.Parser PARSER
com.google.firestore.v1.WriteResponse: int bitField0_
com.google.android.material.datepicker.CalendarConstraints: android.os.Parcelable$Creator CREATOR
me.carda.awesome_notifications.core.models.NotificationChannelModel: java.lang.Integer ledColor
com.google.firestore.v1.StructuredQuery$Order: com.google.firestore.v1.StructuredQuery$FieldReference field_
me.carda.awesome_notifications.core.models.NotificationCrontabModel: java.util.Calendar expirationDateTime
me.carda.awesome_notifications.core.models.NotificationChannelModel: java.lang.String channelGroupKey
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_IS_NOTIFICATION_ACTIVE
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback animationCallback
com.google.android.material.datepicker.Month: android.os.Parcelable$Creator CREATOR
com.google.firebase.firestore.proto.Target: int QUERY_FIELD_NUMBER
com.google.firestore.v1.Document: java.lang.String name_
com.google.firebase.firestore.proto.MaybeDocument: com.google.protobuf.Parser PARSER
com.google.firestore.v1.TargetChange: int bitField0_
me.carda.awesome_notifications.core.enumerators.NotificationPermission: me.carda.awesome_notifications.core.enumerators.NotificationPermission Provisional
com.google.firestore.v1.Target: java.lang.Object resumeType_
com.google.firestore.v1.DocumentDelete: int DOCUMENT_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_SET_NOTIFICATION_CHANNEL
com.google.firestore.v1.CommitRequest: com.google.firestore.v1.CommitRequest DEFAULT_INSTANCE
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_DISPLAY_ON_BACKGROUND
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_DISPLAYED_DATE
me.carda.awesome_notifications.core.enumerators.ForegroundServiceType: java.lang.String safeName
com.google.firestore.v1.TransactionOptions: int modeCase_
io.flutter.embedding.engine.FlutterJNI: float refreshRateFPS
me.carda.awesome_notifications.core.exceptions.ExceptionCode: java.lang.String DETAILED_INSUFFICIENT_PERMISSIONS
com.google.firestore.v1.StructuredQuery$Order: int FIELD_FIELD_NUMBER
com.google.firestore.v1.BatchGetDocumentsResponse: int resultCase_
me.carda.awesome_notifications.core.exceptions.ExceptionFactory: java.lang.String TAG
me.carda.awesome_notifications.core.enumerators.NotificationPermission: me.carda.awesome_notifications.core.enumerators.NotificationPermission PreciseAlarms
me.carda.awesome_notifications.core.models.NotificationCalendarModel: java.lang.Integer hour
com.google.firestore.v1.StructuredAggregationQuery: int queryTypeCase_
me.carda.awesome_notifications.core.managers.SharedManager: java.lang.String TAG
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_CREATED_SOURCE
me.carda.awesome_notifications.core.externalLibs.CronExpression: boolean lastdayOfMonth
com.google.firestore.v1.StructuredQuery$CollectionSelector: int COLLECTION_ID_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_DURATION
me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType: me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType Notification
kotlinx.coroutines.channels.BufferedChannel: long sendersAndCloseStatus
me.carda.awesome_notifications.core.builders.NotificationBuilder: java.lang.String mainTargetClassName
com.google.firestore.v1.DocumentMask: com.google.protobuf.Internal$ProtobufList fieldPaths_
me.carda.awesome_notifications.core.Definitions: java.lang.String BACKGROUND_HANDLE
me.carda.awesome_notifications.core.threads.NotificationSender: java.lang.Boolean created
com.google.firestore.v1.ListenResponse: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.broadcasters.senders.BroadcastSender: java.lang.String TAG
me.carda.awesome_notifications.core.models.NotificationIntervalModel: java.lang.String TAG
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.String bodyLocKey
me.carda.awesome_notifications.core.enumerators.NotificationPlayState: me.carda.awesome_notifications.core.enumerators.NotificationPlayState error
com.google.firestore.v1.DocumentTransform$FieldTransform: int MINIMUM_FIELD_NUMBER
me.carda.awesome_notifications.core.enumerators.ForegroundServiceType: me.carda.awesome_notifications.core.enumerators.ForegroundServiceType[] valueList
com.google.firestore.v1.WriteResponse: com.google.firestore.v1.WriteResponse DEFAULT_INSTANCE
com.google.firestore.v1.Value: com.google.protobuf.Parser PARSER
com.google.firestore.v1.StructuredQuery$UnaryFilter: int op_
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_LARGE_ICON
com.google.firestore.v1.StructuredQuery: com.google.protobuf.Internal$ProtobufList orderBy_
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory Navigation
com.google.gson.stream.JsonReader: int NUMBER_CHAR_DECIMAL
com.google.gson.stream.JsonReader: int PEEKED_EOF
me.carda.awesome_notifications.core.background.BackgroundExecutor: java.lang.Long actionCallbackHandle
com.google.firestore.v1.ExistenceFilter: com.google.firestore.v1.ExistenceFilter DEFAULT_INSTANCE
com.google.rpc.Status: java.lang.String message_
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.lang.Object concurrencyLock
com.google.gson.stream.JsonWriter: boolean serializeNulls
com.google.firestore.v1.TransactionOptions: java.lang.Object mode_
me.carda.awesome_notifications.core.models.AbstractModel: me.carda.awesome_notifications.core.utils.SerializableUtils serializableUtils
me.carda.awesome_notifications.core.managers.DefaultsManager: me.carda.awesome_notifications.core.managers.RepositoryManager shared
me.carda.awesome_notifications.core.managers.PermissionManager: int OFF
com.google.firestore.v1.AggregationResult: int AGGREGATE_FIELDS_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_ICON
com.google.firestore.admin.v1.Index: com.google.firestore.admin.v1.Index DEFAULT_INSTANCE
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: java.lang.String COLUMN_CHANNEL_KEY
kotlinx.coroutines.EventLoopImplBase: int _isCompleted
me.carda.awesome_notifications.core.broadcasters.receivers.DismissedNotificationReceiver: java.lang.String TAG
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_SET_LOCALIZATION
com.google.gson.stream.JsonScope: int EMPTY_DOCUMENT
com.google.android.gms.common.internal.MethodInvocation: android.os.Parcelable$Creator CREATOR
com.google.protobuf.Int64Value: long value_
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_SCHEDULE_DAY
me.carda.awesome_notifications.core.managers.LifeCycleManager: me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle appLifeCycle
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.util.Map dayMap
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_SCHEDULE_REPEATS
me.carda.awesome_notifications.core.models.NotificationModel: java.lang.String TAG
me.carda.awesome_notifications.core.utils.SerializableUtils: me.carda.awesome_notifications.core.utils.EnumUtils enumUtils
me.carda.awesome_notifications.core.enumerators.ActionType: java.lang.String safeName
com.google.firestore.v1.DocumentDelete: int removedTargetIdsMemoizedSerializedSize
io.flutter.embedding.engine.FlutterJNI: float displayDensity
com.google.gson.stream.JsonWriter: java.lang.String deferredName
me.carda.awesome_notifications.core.enumerators.NotificationPrivacy: me.carda.awesome_notifications.core.enumerators.NotificationPrivacy Private
me.carda.awesome_notifications.core.Definitions: java.lang.String BROADCAST_DISMISSED_NOTIFICATION
me.carda.awesome_notifications.core.externalLibs.CronExpression: int HOUR
kotlinx.coroutines.channels.BufferedChannel: long bufferEnd
com.google.gson.stream.JsonWriter: java.io.Writer out
com.google.firestore.v1.Value: int BYTES_VALUE_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_SET_BADGE_COUNT
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_CHANNEL_SHOW_BADGE
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.lang.String TABLE_LONG
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.Boolean roundedLargeIcon
com.google.gson.stream.JsonReader: char[] buffer
com.google.firestore.v1.Document: com.google.protobuf.Timestamp createTime_
me.carda.awesome_notifications.core.enumerators.ActionType: me.carda.awesome_notifications.core.enumerators.ActionType DismissAction
com.google.firestore.v1.StructuredQuery: com.google.protobuf.Parser PARSER
com.google.firestore.admin.v1.Index: int NAME_FIELD_NUMBER
me.carda.awesome_notifications.core.models.DefaultsModel: java.lang.String silentDataCallback
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager deferredComponentManager
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.String privateMessage
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeExceptionReceiver: me.carda.awesome_notifications.core.utils.StringUtils stringUtils
com.google.firestore.v1.StructuredQuery$Order: int direction_
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: java.lang.Runnable onFrameConsumed
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory[] $VALUES
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: java.lang.String COLUMN_CONTENT
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_SCHEDULE_MINUTE
com.google.firestore.v1.StructuredAggregationQuery$Aggregation: java.lang.Object operator_
me.carda.awesome_notifications.core.managers.PermissionManager: java.util.concurrent.BlockingQueue activityQueue
me.carda.awesome_notifications.core.enumerators.NotificationPlayState: me.carda.awesome_notifications.core.enumerators.NotificationPlayState buffering
me.carda.awesome_notifications.core.exceptions.ExceptionCode: java.lang.String DETAILED_CLASS_NOT_FOUND
me.carda.awesome_notifications.core.models.NotificationCalendarModel: java.lang.Integer second
com.google.firestore.v1.TransactionOptions$ReadWrite: int RETRY_TRANSACTION_FIELD_NUMBER
com.google.firestore.v1.StructuredAggregationQuery$Aggregation$Avg: int FIELD_FIELD_NUMBER
android.support.v4.media.MediaMetadataCompat: android.os.Parcelable$Creator CREATOR
me.carda.awesome_notifications.core.managers.CreatedManager: me.carda.awesome_notifications.core.managers.CreatedManager instance
me.carda.awesome_notifications.core.models.NotificationContentModel: me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle displayedLifeCycle
com.google.firestore.v1.BitSequence: com.google.firestore.v1.BitSequence DEFAULT_INSTANCE
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_CANCEL_SCHEDULES_BY_CHANNEL_KEY
com.google.firestore.v1.StructuredQuery$FieldFilter: int VALUE_FIELD_NUMBER
com.google.firestore.v1.StructuredQuery$UnaryFilter: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.enumerators.ActionType: me.carda.awesome_notifications.core.enumerators.ActionType Default
me.carda.awesome_notifications.core.exceptions.ExceptionCode: java.lang.String CODE_INITIALIZATION_EXCEPTION
me.carda.awesome_notifications.core.managers.PermissionManager: java.util.List oldAndroidShouldShowRationale
me.carda.awesome_notifications.core.models.NotificationScheduleModel: java.lang.Boolean repeats
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int numTrims
me.carda.awesome_notifications.core.models.NotificationCalendarModel: java.lang.Integer minute
com.google.firebase.firestore.proto.Target: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_PLAY_SOUND
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: java.lang.Object concurrencyLock
me.carda.awesome_notifications.core.enumerators.NotificationPlayState: me.carda.awesome_notifications.core.enumerators.NotificationPlayState paused
me.carda.awesome_notifications.core.managers.PermissionManager: int REQUEST_CODE
com.google.firestore.v1.Value: int STRING_VALUE_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_BUTTON_ACTION_PREFIX
me.carda.awesome_notifications.core.enumerators.NotificationPlayState: me.carda.awesome_notifications.core.enumerators.NotificationPlayState skippingToQueueItem
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_ENABLE_LIGHTS
me.carda.awesome_notifications.core.Definitions: java.lang.String INITIALIZE_STORE_INITIAL_ACTION
me.carda.awesome_notifications.core.enumerators.ActionType: me.carda.awesome_notifications.core.enumerators.ActionType InputField
me.carda.awesome_notifications.core.models.NotificationModel: java.lang.String remoteHistory
me.carda.awesome_notifications.core.Definitions: java.lang.String BROADCAST_CREATED_NOTIFICATION
kotlinx.coroutines.android.AndroidExceptionPreHandler: java.lang.Object _preHandler
com.google.firestore.v1.TargetChange: com.google.protobuf.Timestamp readTime_
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_SCHEDULE_ERA
com.google.rpc.Status: int MESSAGE_FIELD_NUMBER
me.carda.awesome_notifications.core.enumerators.MediaSource: me.carda.awesome_notifications.core.enumerators.MediaSource[] valueList
kotlinx.coroutines.scheduling.CoroutineScheduler: int _isTerminated
com.google.firestore.v1.ExistenceFilter: int bitField0_
me.carda.awesome_notifications.core.Definitions: java.lang.String SHARED_PREFERENCES_CHANNEL_MANAGER
me.carda.awesome_notifications.core.logs.Logger: java.lang.String blueColor
me.carda.awesome_notifications.core.utils.MapUtils: java.lang.String TAG
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_GET_APP_LIFE_CYCLE
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_LED_OFF_MS
me.carda.awesome_notifications.core.models.NotificationChannelModel: java.lang.Integer ledOffMs
me.carda.awesome_notifications.core.models.NotificationScheduleModel: java.util.TimeZone timeZone
com.google.protobuf.Any: com.google.protobuf.ByteString value_
com.google.firestore.v1.RunAggregationQueryRequest: java.lang.Object consistencySelector_
com.google.firestore.v1.Value: int INTEGER_VALUE_FIELD_NUMBER
me.carda.awesome_notifications.core.AwesomeNotifications: java.lang.Class backgroundServiceClass
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_REMOVE_NOTIFICATION_CHANNEL
me.carda.awesome_notifications.core.enumerators.MediaSource: me.carda.awesome_notifications.core.enumerators.MediaSource Asset
me.carda.awesome_notifications.core.logs.Logger: java.lang.String yellowColor
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_LAYOUT
com.google.firestore.v1.BatchGetDocumentsRequest: int DATABASE_FIELD_NUMBER
com.google.firebase.Timestamp: android.os.Parcelable$Creator CREATOR
com.google.firestore.v1.ListenRequest: int DATABASE_FIELD_NUMBER
com.google.protobuf.Int64Value: com.google.protobuf.Int64Value DEFAULT_INSTANCE
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.lang.String TABLE_FLOAT
me.carda.awesome_notifications.core.models.NotificationChannelModel: java.lang.Boolean playSound
com.google.firestore.v1.StructuredQuery$FieldFilter: com.google.firestore.v1.Value value_
me.carda.awesome_notifications.core.exceptions.ExceptionCode: java.lang.String CODE_BACKGROUND_EXECUTION_EXCEPTION
com.google.gson.stream.JsonScope: int NONEMPTY_ARRAY
com.google.firestore.v1.ExistenceFilter: int TARGET_ID_FIELD_NUMBER
me.carda.awesome_notifications.core.models.NotificationChannelGroupModel: java.lang.String TAG
com.google.firestore.v1.ListenResponse: java.lang.Object responseType_
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_SHOW_NOTIFICATION_PAGE
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_LED_ON_MS
me.carda.awesome_notifications.core.models.returnedData.ActionReceived: java.lang.String buttonKeyInput
me.carda.awesome_notifications.DartBackgroundExecutor: android.content.Context applicationContext
com.google.firestore.v1.DocumentRemove: java.lang.String document_
com.google.gson.stream.JsonReader: int PEEKED_BEGIN_ARRAY
com.google.firestore.v1.BatchGetDocumentsRequest: com.google.firestore.v1.DocumentMask mask_
com.google.firebase.firestore.proto.Target: com.google.protobuf.Timestamp lastLimboFreeSnapshotVersion_
com.google.firestore.admin.v1.Index: int QUERY_SCOPE_FIELD_NUMBER
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] $VALUES
com.google.firestore.v1.Target$QueryTarget: int queryTypeCase_
kotlinx.coroutines.flow.StateFlowSlot: java.lang.Object _state
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_INITIALIZE
me.carda.awesome_notifications.core.managers.LostEventsManager: me.carda.awesome_notifications.core.managers.LostEventsManager instance
me.carda.awesome_notifications.core.enumerators.NotificationImportance: java.lang.String safeName
com.google.firestore.v1.Value: int TIMESTAMP_VALUE_FIELD_NUMBER
com.google.firebase.firestore.FirestoreRegistrar: java.lang.String LIBRARY_NAME
com.google.gson.stream.JsonScope: int EMPTY_OBJECT
com.google.gson.stream.JsonReader: int peekedNumberLength
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.String groupKey
me.carda.awesome_notifications.core.managers.RepositoryManager: java.lang.String TAG
com.google.firestore.v1.StructuredQuery$Projection: com.google.firestore.v1.StructuredQuery$Projection DEFAULT_INSTANCE
me.carda.awesome_notifications.core.enumerators.LogLevel: me.carda.awesome_notifications.core.enumerators.LogLevel error
me.carda.awesome_notifications.core.exceptions.ExceptionCode: java.lang.String CODE_EVENT_EXCEPTION
com.google.firestore.admin.v1.Index$IndexField: int ORDER_FIELD_NUMBER
com.google.gson.stream.JsonReader: int[] stack
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_CHECK_PERMISSIONS
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate
com.google.firestore.v1.CommitResponse: int bitField0_
com.google.firestore.v1.BatchGetDocumentsRequest: java.lang.Object consistencySelector_
me.carda.awesome_notifications.core.models.NotificationContentModel: me.carda.awesome_notifications.core.enumerators.NotificationSource createdSource
com.google.firestore.v1.StructuredQuery: com.google.protobuf.Internal$ProtobufList from_
kotlinx.coroutines.JobSupport$Finishing: java.lang.Object _exceptionsHolder
com.google.firestore.v1.StructuredQuery$Order: com.google.firestore.v1.StructuredQuery$Order DEFAULT_INSTANCE
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback this$0
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.lang.String TAG
me.carda.awesome_notifications.core.enumerators.MediaSource: java.lang.String safeName
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_PROGRESS
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory Social
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB instance
me.carda.awesome_notifications.core.managers.RepositoryManager: me.carda.awesome_notifications.core.utils.StringUtils stringUtils
androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object value
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory Event
me.carda.awesome_notifications.core.models.DefaultsModel: java.lang.String backgroundHandleClass
com.google.firebase.firestore.proto.WriteBatch: int BASE_WRITES_FIELD_NUMBER
com.google.rpc.Status: com.google.rpc.Status DEFAULT_INSTANCE
kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _reusableCancellableContinuation
com.google.firestore.admin.v1.Index$IndexField: java.lang.String fieldPath_
me.carda.awesome_notifications.core.models.NotificationContentModel: me.carda.awesome_notifications.core.enumerators.NotificationLayout notificationLayout
me.carda.awesome_notifications.core.models.NotificationButtonModel: java.lang.Boolean autoDismissible
me.carda.awesome_notifications.core.externalLibs.CronExpression: int NO_SPEC_INT
com.google.firestore.v1.Document: com.google.protobuf.Timestamp updateTime_
me.carda.awesome_notifications.core.services.ForegroundService: java.lang.String TAG
me.carda.awesome_notifications.core.enumerators.NotificationLayout: me.carda.awesome_notifications.core.enumerators.NotificationLayout Inbox
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_PRECISE_SCHEDULES
com.google.gson.stream.JsonReader: int PEEKED_NULL
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_ENABLED
com.google.firestore.v1.StructuredAggregationQuery$Aggregation$Count: int UP_TO_FIELD_NUMBER
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_DESTROY
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_CRONTAB_EXPRESSION
me.carda.awesome_notifications.core.AwesomeNotifications: java.util.List notificationEventListeners
io.flutter.plugin.platform.SingleViewPresentation: boolean startFocused
com.google.gson.stream.JsonReader: int PEEKED_UNQUOTED
kotlinx.coroutines.flow.StateFlowImpl: java.lang.Object _state
me.carda.awesome_notifications.core.models.NotificationChannelModel: java.lang.String channelKey
com.google.firestore.v1.ListenRequest: com.google.firestore.v1.ListenRequest DEFAULT_INSTANCE
me.carda.awesome_notifications.core.utils.BitmapUtils: me.carda.awesome_notifications.core.utils.BitmapUtils instance
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_MODEL_BUTTONS
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.lang.String TABLE_INT
me.carda.awesome_notifications.core.enumerators.LogLevel: me.carda.awesome_notifications.core.enumerators.LogLevel[] valueList
com.google.firestore.v1.DocumentTransform$FieldTransform: int INCREMENT_FIELD_NUMBER
com.google.firestore.v1.StructuredQuery$Filter: int COMPOSITE_FILTER_FIELD_NUMBER
com.google.firestore.v1.StructuredQuery$CollectionSelector: boolean allDescendants_
com.google.firestore.v1.BatchGetDocumentsResponse: java.lang.Object result_
com.google.protobuf.Int32Value: int VALUE_FIELD_NUMBER
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory Recommendation
com.google.firebase.firestore.proto.Target: int LAST_LIMBO_FREE_SNAPSHOT_VERSION_FIELD_NUMBER
me.carda.awesome_notifications.core.AwesomeNotifications: me.carda.awesome_notifications.core.AwesomeNotificationsExtension awesomeExtensions
com.google.android.gms.signin.internal.zak: android.os.Parcelable$Creator CREATOR
com.google.firestore.v1.Precondition: int UPDATE_TIME_FIELD_NUMBER
com.google.firestore.v1.BatchGetDocumentsRequest: com.google.protobuf.Parser PARSER
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken NULL
me.carda.awesome_notifications.core.managers.CancellationManager: java.lang.String TAG
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: java.util.ArrayDeque imageReaderQueue
me.carda.awesome_notifications.core.enumerators.NotificationPlayState: me.carda.awesome_notifications.core.enumerators.NotificationPlayState unknown
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean trimOnMemoryPressure
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_MODEL
me.carda.awesome_notifications.core.utils.SerializableUtils: me.carda.awesome_notifications.core.utils.CalendarUtils calendarUtils
com.google.firebase.firestore.proto.WriteBatch: com.google.protobuf.Internal$ProtobufList writes_
me.carda.awesome_notifications.core.Definitions: java.lang.String EVENT_DEFAULT_ACTION
me.carda.awesome_notifications.AwesomeNotificationsFlutterExtension: java.lang.String TAG
me.carda.awesome_notifications.core.Definitions: java.lang.String BADGE_COUNT
com.google.firestore.v1.WriteRequest: com.google.protobuf.Parser PARSER
com.google.firestore.v1.Target$QueryTarget: com.google.firestore.v1.Target$QueryTarget DEFAULT_INSTANCE
com.google.firestore.v1.Target: int ONCE_FIELD_NUMBER
com.google.protobuf.GeneratedMessageLite: int UNINITIALIZED_SERIALIZED_SIZE
me.carda.awesome_notifications.core.decoders.BitmapResourceDecoder: java.lang.String bitmapReference
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_CREATED_DATE
me.carda.awesome_notifications.core.managers.LifeCycleManager: boolean hasStarted
me.carda.awesome_notifications.core.models.NotificationChannelModel: java.lang.String channelName
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_DISPLAYED_LIFECYCLE
com.google.firestore.v1.DocumentChange: int DOCUMENT_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_MESSAGES
io.flutter.view.AccessibilityViewEmbedder: android.view.View rootAccessibilityView
com.google.firestore.v1.DocumentDelete: int bitField0_
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader: java.lang.ClassLoader sClassLoader
me.carda.awesome_notifications.core.enumerators.NotificationPlayState: me.carda.awesome_notifications.core.enumerators.NotificationPlayState stopped
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_CLEAR_STORED_ACTION
me.carda.awesome_notifications.core.enumerators.GroupSort: java.lang.String safeName
me.carda.awesome_notifications.core.models.NotificationModel: java.util.Map localizations
android.support.v4.media.session.ParcelableVolumeInfo: android.os.Parcelable$Creator CREATOR
com.google.android.gms.common.internal.ConnectionTelemetryConfiguration: android.os.Parcelable$Creator CREATOR
me.carda.awesome_notifications.core.utils.SerializableUtils: java.lang.String TAG
com.google.firestore.v1.ExistenceFilter: int targetId_
androidx.versionedparcelable.ParcelImpl: android.os.Parcelable$Creator CREATOR
me.carda.awesome_notifications.core.externalLibs.CronExpression: int MONTH
com.google.firestore.v1.DocumentTransform: java.lang.String document_
io.flutter.embedding.engine.FlutterJNI: java.util.concurrent.locks.ReentrantReadWriteLock shellHolderLock
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_CHANNEL_CRITICAL_ALERTS
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_SERVICE_START_MODE
com.google.android.gms.common.Feature: android.os.Parcelable$Creator CREATOR
com.google.firestore.v1.BatchGetDocumentsRequest: java.lang.String database_
me.carda.awesome_notifications.core.managers.PermissionManager: int ON
me.carda.awesome_notifications.core.Definitions: java.lang.String EXTRA_BROADCAST_FCM_TOKEN
com.google.firestore.v1.Target: boolean once_
android.support.v4.media.session.PlaybackStateCompat: android.os.Parcelable$Creator CREATOR
kotlinx.coroutines.internal.LockFreeTaskQueueCore: long _state
com.google.firestore.v1.WriteResponse: com.google.protobuf.Timestamp commitTime_
androidx.core.app.JobIntentService: java.lang.String TAG
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_BUTTON_KEY_PRESSED
me.carda.awesome_notifications.core.enumerators.NotificationImportance: me.carda.awesome_notifications.core.enumerators.NotificationImportance None
com.google.firestore.v1.Target$QueryTarget: java.lang.Object queryType_
me.carda.awesome_notifications.core.models.NotificationLocalizationModel: java.lang.String summary
com.google.firestore.v1.Document: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.models.NotificationMessageModel: java.lang.String message
com.google.firestore.v1.DocumentTransform: int DOCUMENT_FIELD_NUMBER
androidx.fragment.app.FragmentState: android.os.Parcelable$Creator CREATOR
com.google.firestore.v1.TargetChange: int RESUME_TOKEN_FIELD_NUMBER
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver: java.util.List notificationActionListeners
com.google.firestore.v1.MapValue: int FIELDS_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_REQUEST_NOTIFICATIONS
me.carda.awesome_notifications.core.threads.NotificationScheduler: java.lang.ref.WeakReference wContextReference
me.carda.awesome_notifications.core.enumerators.NotificationLayout: me.carda.awesome_notifications.core.enumerators.NotificationLayout MessagingGroup
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object _state
me.carda.awesome_notifications.core.enumerators.ActionType: me.carda.awesome_notifications.core.enumerators.ActionType[] valueList
com.google.firestore.v1.Write: int UPDATE_TRANSFORMS_FIELD_NUMBER
com.google.protobuf.Int64Value: int VALUE_FIELD_NUMBER
me.carda.awesome_notifications.core.utils.CronUtils: java.lang.String validDateFormat
me.carda.awesome_notifications.core.managers.SharedManager: java.lang.String reference
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver: boolean isAwesomeCoreAttached
com.google.protobuf.GeneratedMessageLite: int MEMOIZED_SERIALIZED_SIZE_MASK
me.carda.awesome_notifications.core.enumerators.NotificationPlayState: me.carda.awesome_notifications.core.enumerators.NotificationPlayState rewinding
com.google.firestore.v1.Cursor: int VALUES_FIELD_NUMBER
me.carda.awesome_notifications.core.services.ForegroundService$ForegroundServiceIntent: me.carda.awesome_notifications.core.enumerators.ForegroundStartMode startMode
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_JSON
me.carda.awesome_notifications.core.Definitions: java.lang.String INITIALIZE_DEFAULT_ICON
com.google.firestore.v1.StructuredQuery$FieldFilter: int bitField0_
com.google.firestore.v1.StructuredQuery$Filter: int UNARY_FILTER_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_TITLE_LOC_KEY
com.google.firestore.v1.BatchGetDocumentsRequest: int NEW_TRANSACTION_FIELD_NUMBER
com.google.firebase.firestore.proto.UnknownDocument: int bitField0_
me.carda.awesome_notifications.core.enumerators.LogLevel: me.carda.awesome_notifications.core.enumerators.LogLevel warnings
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets lastWindowInsets
com.google.firebase.firestore.proto.WriteBatch: int LOCAL_WRITE_TIME_FIELD_NUMBER
com.google.gson.stream.JsonReader: int PEEKED_FALSE
com.google.firestore.v1.ListenRequest: int ADD_TARGET_FIELD_NUMBER
com.google.firestore.v1.Cursor: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_TITLE
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeBroadcastReceiver: java.lang.String TAG
com.google.gson.stream.JsonReader: int PEEKED_DOUBLE_QUOTED
me.carda.awesome_notifications.core.threads.NotificationScheduler: me.carda.awesome_notifications.core.completion_handlers.NotificationThreadCompletionHandler threadCompletionHandler
me.carda.awesome_notifications.core.models.NotificationCalendarModel: java.lang.Integer millisecond
me.carda.awesome_notifications.core.enumerators.MediaSource: me.carda.awesome_notifications.core.enumerators.MediaSource Unknown
me.carda.awesome_notifications.core.Definitions: java.lang.String DISMISSED_NOTIFICATION
me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException: java.lang.String detailedCode
me.carda.awesome_notifications.core.models.NotificationChannelModel: java.lang.Integer ledOnMs
com.google.firestore.v1.Value: int MAP_VALUE_FIELD_NUMBER
com.google.firestore.v1.DocumentChange: int bitField0_
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_VIBRATION_PATTERN
com.google.firebase.firestore.proto.UnknownDocument: com.google.protobuf.Parser PARSER
androidx.customview.view.AbsSavedState: android.os.Parcelable$Creator CREATOR
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_GROUP_KEY
com.google.firebase.firestore.proto.Target: int targetTypeCase_
kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState
me.carda.awesome_notifications.core.utils.SerializableUtils: me.carda.awesome_notifications.core.utils.StringUtils stringUtils
com.google.firestore.v1.StructuredQuery: com.google.firestore.v1.StructuredQuery$Projection select_
com.google.gson.stream.JsonScope: int DANGLING_NAME
com.google.firestore.v1.WriteRequest: int STREAM_TOKEN_FIELD_NUMBER
me.carda.awesome_notifications.core.managers.ChannelManager: me.carda.awesome_notifications.core.managers.ChannelManager instance
com.google.gson.stream.JsonReader: int pos
com.google.firestore.v1.Precondition: com.google.protobuf.Parser PARSER
android.support.v4.media.session.MediaSessionCompat$Token: android.os.Parcelable$Creator CREATOR
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken STRING
me.carda.awesome_notifications.core.models.NotificationCrontabModel: java.util.Calendar initialDateTime
me.carda.awesome_notifications.core.Definitions: java.util.Map initialValues
com.google.firestore.v1.BatchGetDocumentsResponse: int MISSING_FIELD_NUMBER
com.google.android.gms.common.internal.zzk: android.os.Parcelable$Creator CREATOR
me.carda.awesome_notifications.core.Definitions: java.lang.String BROADCAST_DEFAULT_ACTION
com.google.firestore.v1.RunAggregationQueryResponse: com.google.firestore.v1.RunAggregationQueryResponse DEFAULT_INSTANCE
com.google.gson.stream.JsonReader: int PEEKED_END_OBJECT
me.carda.awesome_notifications.core.utils.ThreadUtils: me.carda.awesome_notifications.core.utils.ThreadUtils instance
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.lang.String KEY
me.carda.awesome_notifications.core.enumerators.NotificationPrivacy: me.carda.awesome_notifications.core.enumerators.NotificationPrivacy[] valueList
io.flutter.embedding.engine.FlutterJNI: io.flutter.plugin.localization.LocalizationPlugin localizationPlugin
com.google.android.gms.common.internal.TelemetryData: android.os.Parcelable$Creator CREATOR
com.google.protobuf.Int32Value: int value_
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_RESUME
com.google.firestore.v1.StructuredQuery$FieldFilter: int FIELD_FIELD_NUMBER
com.google.firebase.firestore.proto.Target: com.google.protobuf.ByteString resumeToken_
com.google.gson.stream.JsonReader: int NUMBER_CHAR_SIGN
com.google.firestore.v1.TransactionOptions$ReadOnly: int READ_TIME_FIELD_NUMBER
me.carda.awesome_notifications.core.exceptions.ExceptionFactory: me.carda.awesome_notifications.core.exceptions.ExceptionFactory instance
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken BEGIN_ARRAY
com.google.firestore.v1.WriteResult: com.google.protobuf.Timestamp updateTime_
com.google.firestore.v1.ListenRequest: java.lang.String database_
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int indexInArray
me.carda.awesome_notifications.core.utils.SerializableUtils: me.carda.awesome_notifications.core.utils.SerializableUtils instance
com.google.firestore.v1.StructuredAggregationQuery: int STRUCTURED_QUERY_FIELD_NUMBER
me.carda.awesome_notifications.core.enumerators.NotificationSource: me.carda.awesome_notifications.core.enumerators.NotificationSource Firebase
com.google.firestore.v1.DocumentChange: int REMOVED_TARGET_IDS_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_SUMMARY
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_PRIVATE_MESSAGE
me.carda.awesome_notifications.core.externalLibs.CronExpression: int SECOND
com.google.gson.stream.JsonReader: java.lang.String[] pathNames
com.google.firestore.v1.Write: com.google.firestore.v1.Write DEFAULT_INSTANCE
me.carda.awesome_notifications.core.enumerators.LogLevel: java.lang.String safeName
me.carda.awesome_notifications.core.managers.RepositoryManager: me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB sqLitePrimitives
com.google.android.gms.signin.internal.zag: android.os.Parcelable$Creator CREATOR
com.google.firebase.firestore.proto.NoDocument: java.lang.String name_
me.carda.awesome_notifications.core.decoders.BitmapResourceDecoder: java.lang.Exception exception
me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType: java.lang.String safeName
me.carda.awesome_notifications.core.services.ForegroundService$ForegroundServiceIntent: me.carda.awesome_notifications.core.enumerators.ForegroundServiceType foregroundServiceType
com.google.firestore.v1.Precondition: int conditionTypeCase_
me.carda.awesome_notifications.core.managers.PermissionManager: java.util.List newAndroidShouldntShowRationale
me.carda.awesome_notifications.core.managers.ActionManager: me.carda.awesome_notifications.core.models.returnedData.ActionReceived initialActionReceived
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory LocalSharing
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeExceptionReceiver: me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeExceptionReceiver instance
com.google.firestore.admin.v1.Index: com.google.protobuf.Internal$ProtobufList fields_
com.google.firestore.v1.StructuredAggregationQuery$Aggregation$Count: int bitField0_
com.google.firestore.v1.Cursor: int BEFORE_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_BIG_PICTURE
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.String ticker
com.google.firestore.v1.StructuredQuery$CollectionSelector: com.google.firestore.v1.StructuredQuery$CollectionSelector DEFAULT_INSTANCE
me.carda.awesome_notifications.core.models.NotificationContentModel: me.carda.awesome_notifications.core.enumerators.ActionType actionType
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_APP_ICON
me.carda.awesome_notifications.core.enumerators.NotificationLayout: me.carda.awesome_notifications.core.enumerators.NotificationLayout Messaging
me.carda.awesome_notifications.core.exceptions.ExceptionCode: java.lang.String CODE_MISSING_ARGUMENTS
me.carda.awesome_notifications.core.models.NotificationCalendarModel: java.lang.String TAG
com.google.firestore.bundle.BundledQuery: int LIMIT_TYPE_FIELD_NUMBER
io.flutter.embedding.engine.FlutterJNI: java.lang.String TAG
com.google.protobuf.Timestamp: int NANOS_FIELD_NUMBER
com.google.firestore.v1.Value: com.google.firestore.v1.Value DEFAULT_INSTANCE
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_BUTTON_ICON
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.String bigPicture
me.carda.awesome_notifications.core.utils.CalendarUtils: java.util.TimeZone utcTimeZone
me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour: me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour[] $VALUES
com.google.gson.stream.JsonScope: int NONEMPTY_OBJECT
com.google.firestore.v1.ExistenceFilter: int COUNT_FIELD_NUMBER
com.google.firestore.v1.TransactionOptions$ReadOnly: com.google.protobuf.Parser PARSER
com.google.firestore.v1.CommitResponse: com.google.protobuf.Timestamp commitTime_
me.carda.awesome_notifications.core.enumerators.NotificationPlayState: me.carda.awesome_notifications.core.enumerators.NotificationPlayState playing
me.carda.awesome_notifications.AwesomeNotificationsPlugin: io.flutter.plugin.common.PluginRegistry$ActivityResultListener activityResultListener
me.carda.awesome_notifications.core.enumerators.NotificationPlayState: me.carda.awesome_notifications.core.enumerators.NotificationPlayState none
me.carda.awesome_notifications.core.enumerators.ForegroundStartMode: me.carda.awesome_notifications.core.enumerators.ForegroundStartMode[] valueList
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_SCHEDULE_MONTH
me.carda.awesome_notifications.core.Definitions: java.lang.String BROADCAST_BACKGROUND_ACTION
kotlinx.coroutines.internal.ThreadSafeHeap: int _size
androidx.lifecycle.ProcessLifecycleOwner$attach$1: androidx.lifecycle.ProcessLifecycleOwner this$0
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List mutators
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object closeHandler
me.carda.awesome_notifications.core.background.BackgroundExecutor: me.carda.awesome_notifications.core.background.BackgroundExecutor runningInstance
me.carda.awesome_notifications.core.enumerators.NotificationLayout: me.carda.awesome_notifications.core.enumerators.NotificationLayout[] valueList
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_SCHEDULE_CREATED_DATE
com.google.protobuf.GeneratedMessageLite: int UNINITIALIZED_HASH_CODE
io.flutter.view.AccessibilityViewEmbedder: io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors reflectionAccessors
com.google.protobuf.GeneratedMessageLite: com.google.protobuf.UnknownFieldSetLite unknownFields
com.google.firestore.v1.Write: com.google.firestore.v1.DocumentMask updateMask_
io.flutter.plugin.platform.SingleViewPresentation: java.lang.String TAG
androidx.recyclerview.widget.LinearLayoutManager$SavedState: android.os.Parcelable$Creator CREATOR
me.carda.awesome_notifications.core.managers.LifeCycleManager: me.carda.awesome_notifications.core.managers.LifeCycleManager instance
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.String customSound
me.carda.awesome_notifications.core.enumerators.NotificationImportance: me.carda.awesome_notifications.core.enumerators.NotificationImportance[] $VALUES
me.carda.awesome_notifications.core.models.NotificationCalendarModel: java.lang.Integer weekOfYear
me.carda.awesome_notifications.core.managers.SharedManager: java.lang.String hashedReference
me.carda.awesome_notifications.core.Definitions: java.lang.String SHARED_MANAGER
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.util.TreeSet minutes
com.google.firebase.firestore.proto.Target: long lastListenSequenceNumber_
me.carda.awesome_notifications.core.exceptions.ExceptionCode: java.lang.String DETAILED_INVALID_ARGUMENTS
me.carda.awesome_notifications.core.enumerators.NotificationPermission: me.carda.awesome_notifications.core.enumerators.NotificationPermission[] $VALUES
me.carda.awesome_notifications.core.managers.ChannelManager: me.carda.awesome_notifications.core.utils.AudioUtils audioUtils
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver: me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver instance
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_ANY
com.google.firestore.v1.Write: int UPDATE_FIELD_NUMBER
com.google.firebase.firestore.proto.NoDocument: com.google.protobuf.Timestamp readTime_
me.carda.awesome_notifications.core.Definitions: java.lang.String MEDIA_VALID_NETWORK
com.google.firestore.v1.StructuredQuery: int LIMIT_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_RECEIVED_ACTION
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.Integer badge
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: long lastQueueTime
com.google.firestore.v1.WriteResponse: com.google.protobuf.Internal$ProtobufList writeResults_
me.carda.awesome_notifications.core.Definitions: java.lang.String EXTRA_BROADCAST_MESSAGE
me.carda.awesome_notifications.core.threads.NotificationScheduler: java.util.Calendar initialDate
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.String TAG
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_DISMISSED_DATE
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_REQUIRE_INPUT_TEXT
me.carda.awesome_notifications.core.builders.NotificationBuilder: android.support.v4.media.session.MediaSessionCompat mediaSession
com.google.firestore.v1.Target: int resumeTypeCase_
io.flutter.embedding.engine.FlutterJNI: boolean initCalled
androidx.fragment.app.FragmentManager$LaunchedFragmentInfo: android.os.Parcelable$Creator CREATOR
com.google.firestore.v1.DocumentMask: com.google.firestore.v1.DocumentMask DEFAULT_INSTANCE
com.google.firestore.v1.DocumentTransform$FieldTransform: java.lang.String fieldPath_
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.String body
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object sendSegment
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_LIST_ALL_SCHEDULES
kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread
me.carda.awesome_notifications.core.broadcasters.receivers.NotificationActionReceiver: java.lang.String TAG
kotlinx.coroutines.JobSupport$Finishing: java.lang.Object _rootCause
com.google.firestore.v1.TargetChange: int targetIdsMemoizedSerializedSize
com.google.firestore.v1.CommitRequest: com.google.protobuf.ByteString transaction_
me.carda.awesome_notifications.core.BuildConfig: java.lang.String LIBRARY_PACKAGE_NAME
me.carda.awesome_notifications.core.enumerators.NotificationPlayState: me.carda.awesome_notifications.core.enumerators.NotificationPlayState connecting
io.flutter.embedding.engine.FlutterJNI: float displayHeight
me.carda.awesome_notifications.core.threads.NotificationForegroundSender: java.lang.String TAG
com.google.firestore.v1.ExistenceFilter: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.models.NotificationChannelModel: java.lang.String icon
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.util.TreeSet years
androidx.core.app.JobIntentService: boolean mInterruptIfStopped
me.carda.awesome_notifications.core.externalLibs.CronExpression: int MINUTE
me.carda.awesome_notifications.DartBackgroundExecutor: java.util.concurrent.BlockingQueue silentDataQueue
android.support.v4.media.RatingCompat: android.os.Parcelable$Creator CREATOR
com.google.firestore.v1.Target$DocumentsTarget: int DOCUMENTS_FIELD_NUMBER
me.carda.awesome_notifications.core.enumerators.NotificationLayout: me.carda.awesome_notifications.core.enumerators.NotificationLayout[] $VALUES
com.google.gson.stream.JsonReader: int PEEKED_BUFFERED
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_CREATE
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_PAYLOAD
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object _closeCause
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_BUTTON_LABELS
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory Call
me.carda.awesome_notifications.core.enumerators.ForegroundStartMode: java.lang.String safeName
me.carda.awesome_notifications.core.Definitions: java.lang.String SELECT_NOTIFICATION
com.google.firebase.firestore.proto.Target: int RESUME_TOKEN_FIELD_NUMBER
com.google.gson.stream.JsonReader: long MIN_INCOMPLETE_INTEGER
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_DEFAULT_COLOR
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory StopWatch
me.carda.awesome_notifications.core.enumerators.NotificationPlayState: me.carda.awesome_notifications.core.enumerators.NotificationPlayState previous
com.google.firestore.v1.WriteResult: com.google.protobuf.Parser PARSER
com.google.firestore.v1.RunAggregationQueryResponse: int bitField0_
me.carda.awesome_notifications.core.Definitions: java.lang.String SHARED_CHANNELS
com.google.firestore.v1.Precondition: java.lang.Object conditionType_
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_GET_LOCALIZATION
com.google.firestore.v1.ListenResponse: int FILTER_FIELD_NUMBER
me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour: java.lang.String safeName
com.google.firestore.bundle.BundledQuery: int PARENT_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String ACTIVE_NOTIFICATION_IDS
me.carda.awesome_notifications.core.background.BackgroundExecutor: java.lang.Class awesomeBackgroundExecutorClass
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_CANCEL_SCHEDULE
com.google.firestore.bundle.BundledQuery: int STRUCTURED_QUERY_FIELD_NUMBER
android.support.v4.media.session.MediaSessionCompat$ResultReceiverWrapper: android.os.Parcelable$Creator CREATOR
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.Boolean locked
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.view.TextureRegistry$SurfaceProducer$Callback callback
com.google.firestore.v1.TargetChange: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_CHRONOMETER
com.google.firestore.v1.DocumentRemove: int removedTargetIdsMemoizedSerializedSize
com.google.firestore.v1.DocumentDelete: com.google.firestore.v1.DocumentDelete DEFAULT_INSTANCE
com.google.firestore.v1.WriteResponse: int WRITE_RESULTS_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_FORCE_UPDATE
me.carda.awesome_notifications.core.enumerators.NotificationSource: me.carda.awesome_notifications.core.enumerators.NotificationSource[] $VALUES
com.google.firestore.v1.Target: com.google.protobuf.Parser PARSER
com.google.type.LatLng: int LONGITUDE_FIELD_NUMBER
me.carda.awesome_notifications.core.threads.NotificationSender: java.lang.ref.WeakReference wContextReference
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken END_OBJECT
com.google.android.material.datepicker.DateValidatorPointForward: android.os.Parcelable$Creator CREATOR
me.carda.awesome_notifications.core.enumerators.LogLevel: me.carda.awesome_notifications.core.enumerators.LogLevel none
me.carda.awesome_notifications.core.models.returnedData.ActionReceived: boolean shouldAutoDismiss
me.carda.awesome_notifications.core.models.NotificationChannelGroupModel: java.lang.String channelGroupName
com.google.firestore.v1.Value: int BOOLEAN_VALUE_FIELD_NUMBER
com.google.firestore.v1.StructuredQuery: com.google.protobuf.Int32Value limit_
kotlinx.coroutines.EventLoopImplBase: java.lang.Object _delayed
com.google.firestore.v1.Target: java.lang.Object targetType_
com.google.firestore.v1.StructuredQuery$UnaryFilter: int OP_FIELD_NUMBER
com.google.firestore.v1.Target: com.google.firestore.v1.Target DEFAULT_INSTANCE
com.google.firestore.v1.BatchGetDocumentsRequest: com.google.protobuf.Internal$ProtobufList documents_
me.carda.awesome_notifications.core.managers.DismissedManager: me.carda.awesome_notifications.core.managers.DismissedManager instance
com.google.rpc.Status: int CODE_FIELD_NUMBER
com.google.firestore.v1.RunAggregationQueryResponse: int RESULT_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String FIREBASE_ENABLED
me.carda.awesome_notifications.core.Definitions: java.lang.String AWESOME_FOREGROUND_ID
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.Integer id
com.google.firestore.v1.WriteResponse: int STREAM_ID_FIELD_NUMBER
com.google.firebase.firestore.proto.NoDocument: int NAME_FIELD_NUMBER
com.google.firestore.v1.TransactionOptions$ReadOnly: int consistencySelectorCase_
me.carda.awesome_notifications.core.models.NotificationContentModel: me.carda.awesome_notifications.core.enumerators.NotificationPrivacy privacy
com.google.firestore.v1.Write: int bitField0_
androidx.recyclerview.widget.RecyclerView$SavedState: android.os.Parcelable$Creator CREATOR
com.google.android.material.appbar.AppBarLayout$BaseBehavior$SavedState: android.os.Parcelable$Creator CREATOR
com.google.firestore.v1.StructuredAggregationQuery$Aggregation: int SUM_FIELD_NUMBER
com.google.firestore.v1.ListenRequest: java.lang.Object targetChange_
me.carda.awesome_notifications.core.Definitions: java.lang.String INITIALIZE_DEBUG_MODE
com.google.gson.stream.JsonReader: int lineStart
me.carda.awesome_notifications.core.threads.NotificationScheduler: me.carda.awesome_notifications.core.enumerators.NotificationSource createdSource
me.carda.awesome_notifications.core.managers.ScheduleManager: me.carda.awesome_notifications.core.managers.RepositoryManager shared
com.google.firestore.v1.DocumentDelete: int REMOVED_TARGET_IDS_FIELD_NUMBER
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver: java.util.List notificationEventListeners
com.google.firestore.v1.StructuredAggregationQuery: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.threads.NotificationForegroundSender: me.carda.awesome_notifications.core.services.ForegroundService$ForegroundServiceIntent foregroundServiceIntent
com.google.firestore.v1.StructuredQuery$UnaryFilter: com.google.firestore.v1.StructuredQuery$UnaryFilter DEFAULT_INSTANCE
com.google.gson.stream.JsonReader: java.io.Reader in
com.google.android.material.internal.CheckableImageButton$SavedState: android.os.Parcelable$Creator CREATOR
kotlinx.coroutines.EventLoopImplBase: java.lang.Object _queue
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer this$0
kotlinx.coroutines.scheduling.WorkQueue: int blockingTasksInBuffer
androidx.recyclerview.widget.StaggeredGridLayoutManager$SavedState: android.os.Parcelable$Creator CREATOR
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_CHANNEL_KEY
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_SCHEDULE_MILLISECOND
me.carda.awesome_notifications.core.threads.NotificationScheduler: me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle appLifeCycle
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_PRIVACY
com.google.firestore.v1.StructuredAggregationQuery$Aggregation: java.lang.String alias_
com.google.firestore.admin.v1.Index$IndexField: int FIELD_PATH_FIELD_NUMBER
me.carda.awesome_notifications.core.models.NotificationButtonModel: java.lang.String key
me.carda.awesome_notifications.core.externalLibs.CronExpression: boolean nearestWeekday
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.util.TreeSet hours
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_TICKER
com.google.firestore.v1.StructuredQuery$UnaryFilter: java.lang.Object operandType_
me.carda.awesome_notifications.core.models.DefaultsModel: java.lang.String reverseDartCallback
com.google.firebase.firestore.proto.MaybeDocument: boolean hasCommittedMutations_
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.dart.PlatformMessageHandler platformMessageHandler
me.carda.awesome_notifications.core.enumerators.NotificationPrivacy: me.carda.awesome_notifications.core.enumerators.NotificationPrivacy Public
me.carda.awesome_notifications.core.logs.Logger: java.text.DateFormat dateFormat
com.google.gson.stream.JsonReader: int PEEKED_LONG
kotlinx.coroutines.CancellableContinuationImpl: int _decisionAndIndex
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate accessibilityDelegate
me.carda.awesome_notifications.core.threads.NotificationSender: me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle appLifeCycle
com.google.gson.stream.JsonReader: int stackSize
com.google.firestore.v1.StructuredQuery: int WHERE_FIELD_NUMBER
com.google.firestore.v1.Document: com.google.firestore.v1.Document DEFAULT_INSTANCE
com.google.firestore.v1.ExistenceFilter: com.google.firestore.v1.BloomFilter unchangedNames_
me.carda.awesome_notifications.core.threads.NotificationSender: me.carda.awesome_notifications.core.models.NotificationModel notificationModel
me.carda.awesome_notifications.core.models.AbstractModel: me.carda.awesome_notifications.core.utils.StringUtils stringUtils
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean animating
com.google.protobuf.Any: int TYPE_URL_FIELD_NUMBER
com.google.firestore.v1.StructuredQuery$Order: int bitField0_
me.carda.awesome_notifications.core.Definitions: java.lang.String DART_REVERSE_CHANNEL
me.carda.awesome_notifications.core.enumerators.NotificationPermission: me.carda.awesome_notifications.core.enumerators.NotificationPermission Car
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_PLAY_STATE
me.carda.awesome_notifications.core.enumerators.NotificationPermission: me.carda.awesome_notifications.core.enumerators.NotificationPermission[] valueList
com.google.firestore.v1.Target: int RESUME_TOKEN_FIELD_NUMBER
me.carda.awesome_notifications.core.enumerators.ForegroundServiceType: me.carda.awesome_notifications.core.enumerators.ForegroundServiceType mediaPlayback
com.google.protobuf.Int32Value: com.google.protobuf.Parser PARSER
androidx.core.app.JobIntentService: androidx.core.app.JobIntentService$WorkEnqueuer mCompatWorkEnqueuer
com.google.firestore.v1.Value: int ARRAY_VALUE_FIELD_NUMBER
androidx.recyclerview.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem: android.os.Parcelable$Creator CREATOR
com.google.firestore.v1.StructuredQuery: int START_AT_FIELD_NUMBER
com.google.firebase.firestore.proto.WriteBatch: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.models.NotificationLocalizationModel: java.lang.String largeIcon
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_SHOW_IN_COMPACT_VIEW
com.google.android.gms.signin.internal.zai: android.os.Parcelable$Creator CREATOR
com.google.type.LatLng: double longitude_
me.carda.awesome_notifications.core.enumerators.NotificationPrivacy: me.carda.awesome_notifications.core.enumerators.NotificationPrivacy[] $VALUES
me.carda.awesome_notifications.core.enumerators.ActionType: me.carda.awesome_notifications.core.enumerators.ActionType DisabledAction
com.google.firestore.v1.BatchGetDocumentsRequest: int DOCUMENTS_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String SILENT_HANDLE
me.carda.awesome_notifications.core.models.NotificationContentModel: java.util.Map payload
me.carda.awesome_notifications.core.AwesomeNotifications: java.lang.Boolean debug
me.carda.awesome_notifications.core.threads.NotificationScheduler: me.carda.awesome_notifications.core.models.NotificationModel notificationModel
me.carda.awesome_notifications.core.models.NotificationMessageModel: java.lang.String summary
com.google.firestore.v1.Document: int bitField0_
me.carda.awesome_notifications.core.threads.NotificationSender: long startTime
com.google.firestore.v1.StructuredQuery: com.google.firestore.v1.StructuredQuery DEFAULT_INSTANCE
androidx.transition.ChangeBounds$6: androidx.transition.ChangeBounds$ViewBounds mViewBounds
com.google.firestore.v1.Write: int TRANSFORM_FIELD_NUMBER
me.carda.awesome_notifications.core.models.NotificationMessageModel: java.lang.Long timestamp
com.google.firestore.v1.CommitRequest: int WRITES_FIELD_NUMBER
com.google.firestore.v1.StructuredAggregationQuery$Aggregation$Sum: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.Definitions: java.lang.String DISMISSED_HANDLE
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_BG_HANDLE_CLASS
com.google.firebase.firestore.proto.NoDocument: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_CANCEL_NOTIFICATION
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_DISMISS_ALL_NOTIFICATIONS
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_CANCEL_ALL_SCHEDULES
com.google.firestore.v1.DocumentTransform: com.google.protobuf.Parser PARSER
com.google.firestore.v1.DocumentTransform$FieldTransform: int FIELD_PATH_FIELD_NUMBER
me.carda.awesome_notifications.core.managers.LifeCycleManager: java.util.List listeners
me.carda.awesome_notifications.core.Definitions: java.lang.String SHARED_SCHEDULED_NOT_IDS
com.google.firestore.v1.Document: int NAME_FIELD_NUMBER
com.google.android.material.bottomsheet.BottomSheetBehavior$SavedState: android.os.Parcelable$Creator CREATOR
com.google.gson.stream.JsonReader: boolean lenient
me.carda.awesome_notifications.core.enumerators.NotificationPermission: java.lang.String safeName
me.carda.awesome_notifications.core.threads.NotificationScheduler: long startTime
me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle: java.lang.String safeName
me.carda.awesome_notifications.core.enumerators.NotificationLayout: me.carda.awesome_notifications.core.enumerators.NotificationLayout ProgressBar
me.carda.awesome_notifications.core.managers.StatusBarManager: java.util.Map activeNotificationsGroup
androidx.core.app.JobIntentService: boolean DEBUG
com.google.firestore.v1.WriteResult: int bitField0_
me.carda.awesome_notifications.core.enumerators.ActionType: me.carda.awesome_notifications.core.enumerators.ActionType SilentAction
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.lang.String TABLE_STRING
me.carda.awesome_notifications.core.utils.EnumUtils: java.lang.String TAG
me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour: me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour All
android.support.v4.media.MediaBrowserCompat$MediaItem: android.os.Parcelable$Creator CREATOR
com.google.firestore.v1.Document: com.google.protobuf.MapFieldLite fields_
com.google.firestore.bundle.BundledQuery: java.lang.String parent_
me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle: me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle Background
com.google.firestore.v1.TargetChange: int TARGET_IDS_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_DISMISS_NOTIFICATIONS_BY_CHANNEL_KEY
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_CHANNEL_NAME
com.google.gson.stream.JsonWriter: boolean lenient
com.google.firestore.v1.ListenResponse: int DOCUMENT_DELETE_FIELD_NUMBER
me.carda.awesome_notifications.core.enumerators.ForegroundStartMode: me.carda.awesome_notifications.core.enumerators.ForegroundStartMode deliverIntent
com.google.gson.stream.JsonReader: int PEEKED_END_ARRAY
com.google.gson.stream.JsonWriter: java.lang.String indent
com.google.gson.stream.JsonReader: int PEEKED_UNQUOTED_NAME
me.carda.awesome_notifications.core.threads.NotificationForegroundSender: me.carda.awesome_notifications.core.builders.NotificationBuilder notificationBuilder
me.carda.awesome_notifications.core.models.NotificationChannelModel: java.lang.String groupKey
me.carda.awesome_notifications.core.models.returnedData.ActionReceived: java.lang.Boolean isAuthenticationRequired
me.carda.awesome_notifications.core.utils.CalendarUtils: java.util.TimeZone localTimeZone
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_EXPIRATION_DATE_TIME
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.Float progress
me.carda.awesome_notifications.core.enumerators.LogLevel: me.carda.awesome_notifications.core.enumerators.LogLevel[] $VALUES
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_MODEL_SCHEDULE
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean VERBOSE_LOGS
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: android.graphics.SurfaceTexture surfaceTexture
com.google.firestore.v1.WriteResponse: com.google.protobuf.ByteString streamToken_
com.google.android.gms.common.internal.zav: android.os.Parcelable$Creator CREATOR
com.google.firestore.v1.RunAggregationQueryResponse: int TRANSACTION_FIELD_NUMBER
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory Promo
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory Transport
me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour: me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour Children
com.google.firestore.v1.Value: int REFERENCE_VALUE_FIELD_NUMBER
kotlinx.coroutines.scheduling.WorkQueue: int producerIndex
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_SHOULD_SHOW_RATIONALE
me.carda.awesome_notifications.core.utils.CalendarUtils: boolean $assertionsDisabled
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_GET_FCM_TOKEN
com.google.firestore.v1.DocumentDelete: com.google.protobuf.Internal$IntList removedTargetIds_
me.carda.awesome_notifications.DartBackgroundExecutor: io.flutter.embedding.engine.FlutterEngine backgroundFlutterEngine
com.google.firestore.v1.CommitResponse: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.externalLibs.CronExpression: int DAY_OF_WEEK
kotlinx.coroutines.JobSupport: java.lang.Object _parentHandle
com.google.firestore.v1.StructuredQuery$Order: com.google.protobuf.Parser PARSER
com.google.firestore.v1.StructuredQuery$CompositeFilter: int OP_FIELD_NUMBER
me.carda.awesome_notifications.core.managers.LifeCycleManager: boolean wasNotCreated
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_FOREGROUND_SERVICE_TYPE
me.carda.awesome_notifications.DartBackgroundExecutor: io.flutter.plugin.common.MethodChannel$Result dartChannelResultHandle
com.google.gson.stream.JsonReader: int NUMBER_CHAR_EXP_SIGN
com.google.protobuf.GeneratedMessageLite: int memoizedSerializedSize
me.carda.awesome_notifications.core.models.NotificationButtonModel: java.lang.String TAG
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImage lastDequeuedImage
com.google.firestore.v1.Document: int CREATE_TIME_FIELD_NUMBER
com.google.firestore.v1.ListenRequest: int LABELS_FIELD_NUMBER
com.google.firestore.v1.MapValue: com.google.protobuf.Parser PARSER
com.google.firestore.v1.ArrayValue: com.google.protobuf.Internal$ProtobufList values_
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_CHANNEL_DESCRIPTION
com.google.firestore.v1.Target$DocumentsTarget: com.google.protobuf.Internal$ProtobufList documents_
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_PUSH_NEXT_DATA
me.carda.awesome_notifications.core.models.NotificationButtonModel: java.lang.Boolean isDangerousOption
me.carda.awesome_notifications.core.enumerators.NotificationPermission: me.carda.awesome_notifications.core.enumerators.NotificationPermission Badge
com.google.firebase.firestore.proto.Target: int targetId_
com.google.firestore.v1.Target$QueryTarget: int PARENT_FIELD_NUMBER
com.google.gson.stream.JsonWriter: int stackSize
com.google.firestore.v1.ArrayValue: int VALUES_FIELD_NUMBER
me.carda.awesome_notifications.DartBackgroundExecutor: java.lang.String TAG
androidx.concurrent.futures.AbstractResolvableFuture: androidx.concurrent.futures.AbstractResolvableFuture$Listener listeners
me.carda.awesome_notifications.core.AwesomeNotifications: java.util.List notificationActionListeners
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_WAKE_UP_SCREEN
me.carda.awesome_notifications.core.enumerators.NotificationImportance: me.carda.awesome_notifications.core.enumerators.NotificationImportance Max
androidx.core.app.JobIntentService: java.lang.Object sLock
me.carda.awesome_notifications.core.enumerators.ForegroundStartMode: me.carda.awesome_notifications.core.enumerators.ForegroundStartMode notStick
me.carda.awesome_notifications.core.externalLibs.CronExpression: int lastdayOffset
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken BEGIN_OBJECT
me.carda.awesome_notifications.core.models.NotificationCrontabModel: java.lang.String crontabExpression
me.carda.awesome_notifications.AwesomeNotificationsPlugin: me.carda.awesome_notifications.core.listeners.AwesomeEventListener awesomeEventListener
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_GET_LOCAL_TIMEZONE_IDENTIFIER
me.carda.awesome_notifications.core.managers.ChannelGroupManager: me.carda.awesome_notifications.core.managers.RepositoryManager shared
com.google.firestore.v1.DocumentRemove: com.google.firestore.v1.DocumentRemove DEFAULT_INSTANCE
com.google.firebase.firestore.proto.MaybeDocument: int HAS_COMMITTED_MUTATIONS_FIELD_NUMBER
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object nextParkedWorker
com.google.gson.stream.JsonReader: int PEEKED_SINGLE_QUOTED
me.carda.awesome_notifications.core.managers.PermissionManager: me.carda.awesome_notifications.core.utils.StringUtils stringUtils
androidx.core.app.JobIntentService: boolean mStopped
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View view
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory[] valueList
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_SHOW_GLOBAL_DND_PAGE
com.google.firebase.firestore.proto.UnknownDocument: java.lang.String name_
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_LOCKED
kotlinx.coroutines.internal.AtomicOp: java.lang.Object _consensus
com.google.firestore.v1.Value: int GEO_POINT_VALUE_FIELD_NUMBER
com.google.firestore.v1.StructuredQuery$CollectionSelector: int ALL_DESCENDANTS_FIELD_NUMBER
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.Boolean displayOnBackground
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object bufferEndSegment
com.google.firestore.v1.Target: com.google.protobuf.Int32Value expectedCount_
com.google.firestore.v1.Target: int READ_TIME_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_ACTION_JSON
me.carda.awesome_notifications.core.managers.DisplayedManager: me.carda.awesome_notifications.core.managers.RepositoryManager shared
androidx.fragment.app.BackStackState: android.os.Parcelable$Creator CREATOR
me.carda.awesome_notifications.core.models.NotificationMessageModel: java.lang.String largeIcon
me.carda.awesome_notifications.core.managers.SharedManager: me.carda.awesome_notifications.core.utils.StringUtils stringUtils
com.google.firestore.v1.BitSequence: int padding_
com.google.firestore.bundle.BundledQuery: com.google.firestore.bundle.BundledQuery DEFAULT_INSTANCE
com.google.gson.stream.JsonReader: int[] pathIndices
com.google.firestore.v1.DocumentMask: com.google.protobuf.Parser PARSER
com.google.gson.stream.MalformedJsonException: long serialVersionUID
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_INCREMENT_BADGE_COUNT
com.google.gson.stream.JsonReader: int NUMBER_CHAR_EXP_E
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean attached
com.google.android.material.textfield.TextInputLayout$SavedState: android.os.Parcelable$Creator CREATOR
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.lang.String cronExpression
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_ACTION_TYPE
com.google.firestore.v1.DocumentDelete: java.lang.String document_
me.carda.awesome_notifications.core.models.NotificationContentModel: boolean isRandomId
com.google.firestore.v1.CommitResponse: int WRITE_RESULTS_FIELD_NUMBER
me.carda.awesome_notifications.core.threads.NotificationSender: me.carda.awesome_notifications.core.utils.StringUtils stringUtils
com.google.gson.stream.JsonReader: java.lang.String peekedString
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory Reminder
me.carda.awesome_notifications.core.managers.CancellationManager: me.carda.awesome_notifications.core.managers.CancellationManager instance
com.google.firestore.v1.WriteRequest: com.google.firestore.v1.WriteRequest DEFAULT_INSTANCE
me.carda.awesome_notifications.core.models.NotificationChannelModel: java.lang.Boolean locked
com.google.gson.stream.JsonReader: int PEEKED_NONE
me.carda.awesome_notifications.core.enumerators.ForegroundServiceType: me.carda.awesome_notifications.core.enumerators.ForegroundServiceType manifest
me.carda.awesome_notifications.core.Definitions: java.lang.String SHARED_DISPLAYED
me.carda.awesome_notifications.core.models.AbstractModel: me.carda.awesome_notifications.core.utils.JsonUtils jsonUtils
com.google.firestore.v1.Write: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.Definitions: java.lang.String SHARED_DEFAULTS
me.carda.awesome_notifications.core.models.NotificationButtonModel: java.lang.Boolean requireInputText
com.google.firestore.v1.StructuredQuery: int offset_
com.google.firestore.v1.StructuredAggregationQuery$Aggregation$Sum: int FIELD_FIELD_NUMBER
com.google.firestore.v1.StructuredAggregationQuery$Aggregation: int COUNT_FIELD_NUMBER
me.carda.awesome_notifications.core.threads.NotificationScheduler: java.lang.String TAG
me.carda.awesome_notifications.core.utils.MediaUtils: me.carda.awesome_notifications.core.utils.StringUtils stringUtils
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken NUMBER
me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle: me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle[] valueList
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_START
com.google.firebase.firestore.proto.Target: int bitField0_
com.google.firestore.admin.v1.Index: java.lang.String name_
kotlinx.coroutines.android.HandlerContext: kotlinx.coroutines.android.HandlerContext _immediate
kotlinx.coroutines.channels.BufferedChannel: java.lang.Object receiveSegment
com.google.firestore.v1.Precondition: int EXISTS_FIELD_NUMBER
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory MissedCall
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.Boolean wakeUpScreen
me.carda.awesome_notifications.core.models.NotificationScheduleModel: java.lang.Boolean preciseAlarm
com.google.firestore.v1.Value: java.lang.Object valueType_
com.google.android.gms.common.internal.zat: android.os.Parcelable$Creator CREATOR
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken[] $VALUES
me.carda.awesome_notifications.core.utils.CalendarUtils: java.lang.String TAG
com.google.firestore.v1.DocumentChange: com.google.firestore.v1.DocumentChange DEFAULT_INSTANCE
me.carda.awesome_notifications.core.utils.IntegerUtils: java.security.SecureRandom random
com.google.firestore.v1.RunAggregationQueryRequest: int consistencySelectorCase_
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_SCHEDULE_SECOND
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_TIMESTAMP
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_SCHEDULE_TIMEZONE
com.google.firestore.v1.WriteResult: int TRANSFORM_RESULTS_FIELD_NUMBER
me.carda.awesome_notifications.core.builders.NotificationBuilder: java.lang.String TAG
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: java.lang.String COLUMN_GROUP_KEY
io.grpc.internal.SerializingExecutor: int runState
me.carda.awesome_notifications.core.externalLibs.CronExpression: int nthdayOfWeek
me.carda.awesome_notifications.core.enumerators.LogLevel: me.carda.awesome_notifications.core.enumerators.LogLevel all
androidx.appcompat.widget.Toolbar$SavedState: android.os.Parcelable$Creator CREATOR
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event$Companion Companion
com.google.firestore.bundle.BundledQuery: int limitType_
com.google.firestore.v1.RunAggregationQueryRequest: java.lang.String parent_
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: boolean released
androidx.core.app.JobIntentService: androidx.core.app.JobIntentService$CompatJobEngine mJobImpl
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_DISMISS_NOTIFICATIONS_BY_GROUP_KEY
com.google.firestore.v1.DocumentTransform: com.google.protobuf.Internal$ProtobufList fieldTransforms_
com.google.protobuf.Any: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.enumerators.GroupSort: me.carda.awesome_notifications.core.enumerators.GroupSort Desc
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean notifiedDestroy
com.google.firestore.v1.TargetChange: com.google.protobuf.Internal$IntList targetIds_
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_ROUNDED_LARGE_ICON
me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle: me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle Terminated
me.carda.awesome_notifications.core.enumerators.NotificationLayout: me.carda.awesome_notifications.core.enumerators.NotificationLayout Default
com.google.firestore.v1.StructuredQuery$Order: int DIRECTION_FIELD_NUMBER
me.carda.awesome_notifications.core.enumerators.NotificationImportance: me.carda.awesome_notifications.core.enumerators.NotificationImportance Min
com.google.firestore.v1.StructuredQuery$Projection: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.models.NotificationScheduleModel: java.lang.Boolean allowWhileIdle
com.google.firestore.v1.TransactionOptions$ReadWrite: com.google.protobuf.ByteString retryTransaction_
com.google.gson.stream.JsonScope: int NONEMPTY_DOCUMENT
com.google.firestore.v1.Target: int bitField0_
com.google.firestore.v1.StructuredQuery$CompositeFilter: com.google.protobuf.Internal$ProtobufList filters_
com.google.firestore.v1.StructuredQuery$CompositeFilter: int op_
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_SCHEDULE_PRECISE_ALARM
kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.lang.Object _next
me.carda.awesome_notifications.core.exceptions.ExceptionCode: java.lang.String CODE_SQLITE_NOT_AVAILABLE
me.carda.awesome_notifications.core.background.BackgroundExecutor: java.lang.String TAG
me.carda.awesome_notifications.core.AwesomeNotifications: java.lang.Class scheduleReceiverClass
me.carda.awesome_notifications.core.models.NotificationContentModel: me.carda.awesome_notifications.core.enumerators.NotificationPlayState playState
com.google.firestore.v1.StructuredAggregationQuery$Aggregation: com.google.protobuf.Parser PARSER
io.flutter.view.AccessibilityViewEmbedder: android.util.SparseArray flutterIdToOrigin
com.google.firestore.v1.DocumentTransform$FieldTransform: int transformTypeCase_
me.carda.awesome_notifications.core.enumerators.NotificationPlayState: me.carda.awesome_notifications.core.enumerators.NotificationPlayState forwarding
me.carda.awesome_notifications.core.models.NotificationIntervalModel: java.lang.Integer interval
com.google.firestore.v1.Value: int valueTypeCase_
com.google.firebase.firestore.proto.WriteBatch: com.google.protobuf.Timestamp localWriteTime_
com.google.firestore.v1.ExistenceFilter: int count_
me.carda.awesome_notifications.core.models.NotificationChannelGroupModel: java.lang.String channelGroupKey
android.support.v4.media.session.MediaSessionCompat$QueueItem: android.os.Parcelable$Creator CREATOR
com.google.firestore.v1.Write: int UPDATE_MASK_FIELD_NUMBER
com.google.firestore.v1.DocumentChange: com.google.protobuf.Internal$IntList removedTargetIds_
me.carda.awesome_notifications.core.managers.StatusBarManager: java.util.Map activeNotificationsChannel
com.google.firestore.v1.StructuredQuery: com.google.firestore.v1.Cursor endAt_
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_SCHEDULE_WEEKDAY
me.carda.awesome_notifications.core.enumerators.NotificationSource: me.carda.awesome_notifications.core.enumerators.NotificationSource OneSignal
com.google.firestore.v1.DocumentDelete: int READ_TIME_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_SILENT_CALLBACK
me.carda.awesome_notifications.core.logs.Logger: java.lang.String resetColor
me.carda.awesome_notifications.core.exceptions.ExceptionCode: java.lang.String DETAILED_INSUFFICIENT_REQUIREMENTS
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.Integer duration
me.carda.awesome_notifications.core.enumerators.NotificationPlayState: me.carda.awesome_notifications.core.enumerators.NotificationPlayState next
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_STOP
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.util.TreeSet daysOfMonth
com.google.firestore.v1.BatchGetDocumentsResponse: int TRANSACTION_FIELD_NUMBER
com.google.firestore.v1.StructuredAggregationQuery: int AGGREGATIONS_FIELD_NUMBER
me.carda.awesome_notifications.core.services.AutoCancelService: java.lang.String TAG
me.carda.awesome_notifications.core.Definitions: java.lang.String INITIALIZE_CHANNEL_GROUPS
com.google.firestore.v1.Write: int operationCase_
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_CHANNEL_GROUP_KEY
com.google.firestore.v1.TargetChange: com.google.firestore.v1.TargetChange DEFAULT_INSTANCE
me.carda.awesome_notifications.core.models.NotificationChannelModel: java.lang.String TAG
me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour: me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour[] valueList
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackName
me.carda.awesome_notifications.core.enumerators.ForegroundServiceType: me.carda.awesome_notifications.core.enumerators.ForegroundServiceType mediaProjection
me.carda.awesome_notifications.core.enumerators.NotificationPermission: me.carda.awesome_notifications.core.enumerators.NotificationPermission OverrideDnD
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: io.flutter.embedding.engine.renderer.FlutterRenderer this$0
me.carda.awesome_notifications.core.builders.NotificationBuilder: me.carda.awesome_notifications.core.utils.BitmapUtils bitmapUtils
com.google.android.gms.common.ConnectionResult: android.os.Parcelable$Creator CREATOR
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_GET_BADGE_COUNT
me.carda.awesome_notifications.core.managers.PermissionManager: me.carda.awesome_notifications.core.managers.PermissionManager instance
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.String title
me.carda.awesome_notifications.core.utils.StringUtils: me.carda.awesome_notifications.core.utils.StringUtils instance
me.carda.awesome_notifications.core.models.NotificationCalendarModel: java.lang.Integer era
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.util.TreeSet daysOfWeek
com.google.firestore.v1.RunAggregationQueryRequest: java.lang.Object queryType_
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: long lastDequeueTime
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory Progress
com.google.firestore.admin.v1.Index: int STATE_FIELD_NUMBER
me.carda.awesome_notifications.core.enumerators.NotificationImportance: me.carda.awesome_notifications.core.enumerators.NotificationImportance High
com.google.firestore.v1.RunAggregationQueryRequest: int PARENT_FIELD_NUMBER
com.google.firestore.v1.Write: int CURRENT_DOCUMENT_FIELD_NUMBER
com.google.firestore.v1.RunAggregationQueryResponse: com.google.protobuf.Timestamp readTime_
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_SCHEDULE_WEEKOFYEAR
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_GET_NEXT_DATE
androidx.core.app.JobIntentService: androidx.core.app.JobIntentService$CommandProcessor mCurProcessor
com.google.firestore.v1.Document: int FIELDS_FIELD_NUMBER
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.util.TimeZone timeZone
me.carda.awesome_notifications.core.models.NotificationButtonModel: java.lang.String icon
com.google.protobuf.Timestamp: long seconds_
com.google.firestore.v1.DocumentDelete: com.google.protobuf.Timestamp readTime_
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_SCHEDULE_WEEKOFMONTH
com.google.firestore.v1.DocumentRemove: com.google.protobuf.Internal$IntList removedTargetIds_
me.carda.awesome_notifications.core.AwesomeNotifications: java.lang.Class dismissReceiverClass
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_BACKGROUND_COLOR
kotlinx.coroutines.android.HandlerDispatcherKt: android.view.Choreographer choreographer
me.carda.awesome_notifications.core.enumerators.NotificationPrivacy: java.lang.String safeName
com.google.gson.stream.JsonScope: int EMPTY_ARRAY
me.carda.awesome_notifications.core.models.NotificationContentModel: java.util.List bodyLocArgs
me.carda.awesome_notifications.core.threads.NotificationForegroundSender: me.carda.awesome_notifications.core.utils.StringUtils stringUtils
me.carda.awesome_notifications.core.managers.LifeCycleManager: boolean hasGoneForeground
me.carda.awesome_notifications.core.enumerators.MediaSource: me.carda.awesome_notifications.core.enumerators.MediaSource[] $VALUES
com.google.firestore.v1.StructuredQuery$FieldFilter: com.google.firestore.v1.StructuredQuery$FieldReference field_
me.carda.awesome_notifications.core.Definitions: java.lang.String SHARED_DISMISSED
com.google.firebase.firestore.proto.MaybeDocument: java.lang.Object documentType_
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory Email
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.Boolean hideLargeIconOnExpand
com.google.android.material.sidesheet.SideSheetBehavior$SavedState: android.os.Parcelable$Creator CREATOR
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader lastReaderDequeuedFrom
me.carda.awesome_notifications.core.managers.StatusBarManager: me.carda.awesome_notifications.core.managers.StatusBarManager instance
com.google.firestore.v1.StructuredQuery$UnaryFilter: int FIELD_FIELD_NUMBER
com.google.firestore.v1.DocumentTransform$FieldTransform: int MAXIMUM_FIELD_NUMBER
com.google.firestore.v1.DocumentChange: int TARGET_IDS_FIELD_NUMBER
me.carda.awesome_notifications.core.enumerators.NotificationSource: java.lang.String safeName
com.google.firestore.v1.BatchGetDocumentsResponse: com.google.protobuf.Timestamp readTime_
com.google.firestore.v1.WriteResult: com.google.protobuf.Internal$ProtobufList transformResults_
me.carda.awesome_notifications.core.enumerators.ActionType: me.carda.awesome_notifications.core.enumerators.ActionType KeepOnTop
kotlinx.coroutines.CancelledContinuation: int _resumed
com.google.gson.stream.JsonScope: int CLOSED
kotlinx.coroutines.internal.ResizableAtomicArray: java.util.concurrent.atomic.AtomicReferenceArray array
me.carda.awesome_notifications.core.managers.SharedManager: java.lang.String packageName
me.carda.awesome_notifications.core.managers.BadgeManager: me.carda.awesome_notifications.core.managers.BadgeManager instance
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: java.lang.String TAG
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_IS_FCM_AVAILABLE
me.carda.awesome_notifications.core.externalLibs.CronExpression: int MAX_YEAR
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory Service
com.google.gson.stream.JsonWriter: boolean htmlSafe
com.google.firebase.firestore.proto.Target: java.lang.Object targetType_
me.carda.awesome_notifications.core.models.NotificationChannelModel: java.lang.Boolean criticalAlerts
me.carda.awesome_notifications.core.BuildConfig: java.lang.String BUILD_TYPE
me.carda.awesome_notifications.core.models.NotificationButtonModel: java.lang.Boolean enabled
me.carda.awesome_notifications.core.enumerators.ForegroundServiceType: me.carda.awesome_notifications.core.enumerators.ForegroundServiceType[] $VALUES
me.carda.awesome_notifications.core.enumerators.NotificationSource: me.carda.awesome_notifications.core.enumerators.NotificationSource Local
me.carda.awesome_notifications.core.managers.StatusBarManager: java.lang.String TAG
com.google.firebase.firestore.proto.Target: int DOCUMENTS_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_IS_NOTIFICATION_ALLOWED
com.google.firestore.v1.DocumentRemove: int READ_TIME_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String EVENT_NOTIFICATION_CREATED
com.google.firestore.v1.DocumentTransform$FieldTransform: int SET_TO_SERVER_VALUE_FIELD_NUMBER
com.google.type.LatLng: int LATITUDE_FIELD_NUMBER
me.carda.awesome_notifications.core.models.returnedData.ActionReceived: java.util.Calendar actionDate
me.carda.awesome_notifications.core.managers.ActionManager: me.carda.awesome_notifications.core.managers.ActionManager instance
kotlinx.coroutines.internal.LockFreeTaskQueue: java.lang.Object _cur
com.google.firestore.v1.BitSequence: int PADDING_FIELD_NUMBER
com.google.firestore.v1.DocumentTransform: int FIELD_TRANSFORMS_FIELD_NUMBER
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.lang.String TABLE_BOOLEAN
com.google.protobuf.Timestamp: int nanos_
com.google.firebase.firestore.proto.NoDocument: int bitField0_
me.carda.awesome_notifications.core.services.ForegroundService$ForegroundServiceIntent: me.carda.awesome_notifications.core.models.NotificationModel notificationModel
com.google.firestore.v1.Write: int DELETE_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String DATE_FORMAT
me.carda.awesome_notifications.core.enumerators.ForegroundServiceType: me.carda.awesome_notifications.core.enumerators.ForegroundServiceType microphone
me.carda.awesome_notifications.core.Definitions: java.lang.String SCHEDULER_HELPER_SHARED
me.carda.awesome_notifications.core.enumerators.GroupSort: me.carda.awesome_notifications.core.enumerators.GroupSort[] $VALUES
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_CATEGORY
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: int DATABASE_VERSION
com.google.firestore.v1.DocumentMask: int FIELD_PATHS_FIELD_NUMBER
me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType: me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType[] $VALUES
me.carda.awesome_notifications.core.models.NotificationChannelModel: me.carda.awesome_notifications.core.enumerators.NotificationPrivacy defaultPrivacy
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_RESET_BADGE
com.google.android.gms.common.api.Scope: android.os.Parcelable$Creator CREATOR
com.google.firestore.v1.Cursor: boolean before_
me.carda.awesome_notifications.core.managers.RepositoryManager: java.lang.Class clazz
com.google.type.LatLng: com.google.type.LatLng DEFAULT_INSTANCE
me.carda.awesome_notifications.core.Definitions: java.lang.String CREATED_HANDLE
me.carda.awesome_notifications.core.Definitions: java.lang.String ACTION_HANDLE
me.carda.awesome_notifications.core.enumerators.ActionType: me.carda.awesome_notifications.core.enumerators.ActionType[] $VALUES
com.google.firestore.v1.Target$QueryTarget: com.google.protobuf.Parser PARSER
com.google.firestore.admin.v1.Index: int FIELDS_FIELD_NUMBER
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken NAME
com.google.firestore.v1.BloomFilter: int BITS_FIELD_NUMBER
me.carda.awesome_notifications.core.managers.ChannelManager: java.lang.String TAG
com.google.firestore.v1.TransactionOptions$ReadOnly: java.lang.Object consistencySelector_
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_SCHEDULE_INTERVAL
me.carda.awesome_notifications.DartBackgroundExecutor: java.util.concurrent.atomic.AtomicBoolean isRunning
me.carda.awesome_notifications.core.managers.LocalizationManager: me.carda.awesome_notifications.core.managers.LocalizationManager instance
me.carda.awesome_notifications.core.models.NotificationContentModel: java.util.List titleLocArgs
me.carda.awesome_notifications.core.models.NotificationButtonModel: java.lang.Integer color
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_TIMEOUT_AFTER
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_ACTION_LIFECYCLE
com.google.gson.stream.JsonWriter: java.lang.String separator
com.google.firebase.firestore.proto.WriteBatch: int WRITES_FIELD_NUMBER
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.String channelKey
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.lang.String DATABASE_NAME
com.google.firestore.v1.StructuredQuery$CollectionSelector: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.BuildConfig: boolean DEBUG
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_FULL_SCREEN_INTENT
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_BUTTON_LABEL
com.google.firestore.v1.DocumentTransform: com.google.firestore.v1.DocumentTransform DEFAULT_INSTANCE
com.google.firestore.v1.StructuredQuery: com.google.firestore.v1.StructuredQuery$Filter where_
com.google.firestore.v1.Target: int targetTypeCase_
me.carda.awesome_notifications.core.utils.SerializableUtils: me.carda.awesome_notifications.core.utils.TimeZoneUtils timeZoneUtils
com.google.firestore.v1.StructuredQuery: com.google.firestore.v1.Cursor startAt_
com.google.firestore.v1.StructuredAggregationQuery$Aggregation$Avg: com.google.firestore.v1.StructuredAggregationQuery$Aggregation$Avg DEFAULT_INSTANCE
com.google.firestore.v1.WriteRequest: java.lang.String database_
me.carda.awesome_notifications.core.Definitions: java.lang.String MEDIA_VALID_ASSET
me.carda.awesome_notifications.core.externalLibs.CronExpression: boolean expressionParsed
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackClassName
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean needsSave
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_BODY
com.google.firebase.firestore.proto.Target: int LAST_LISTEN_SEQUENCE_NUMBER_FIELD_NUMBER
com.google.firestore.v1.ArrayValue: com.google.firestore.v1.ArrayValue DEFAULT_INSTANCE
com.google.firestore.v1.BatchGetDocumentsResponse: com.google.protobuf.ByteString transaction_
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB instance
me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle: me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle Foreground
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_AUTHENTICATION_REQUIRED
com.google.firestore.v1.Target$DocumentsTarget: com.google.firestore.v1.Target$DocumentsTarget DEFAULT_INSTANCE
com.google.type.LatLng: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_AUTO_DISMISSIBLE
com.google.firestore.v1.RunAggregationQueryRequest: int queryTypeCase_
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_GET_ALL_ACTIVE_NOTIFICATION_IDS
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver: java.lang.String TAG
me.carda.awesome_notifications.core.models.NotificationScheduleModel: java.lang.Integer delayTolerance
me.carda.awesome_notifications.core.services.BackgroundService: java.lang.String TAG
me.carda.awesome_notifications.core.models.NotificationMessageModel: java.lang.String title
com.google.firestore.v1.StructuredAggregationQuery$Aggregation$Avg: int bitField0_
com.google.type.LatLng: double latitude_
com.google.firestore.v1.StructuredQuery: int ORDER_BY_FIELD_NUMBER
me.carda.awesome_notifications.core.enumerators.NotificationLayout: java.lang.String safeName
com.google.firestore.v1.ListenRequest: int targetChangeCase_
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory Alarm
me.carda.awesome_notifications.core.models.returnedData.ActionReceived: me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle actionLifeCycle
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_ALLOW_WHILE_IDLE
me.carda.awesome_notifications.core.models.NotificationButtonModel: java.lang.String label
me.carda.awesome_notifications.core.enumerators.NotificationPlayState: me.carda.awesome_notifications.core.enumerators.NotificationPlayState[] $VALUES
me.carda.awesome_notifications.core.managers.PermissionManager: java.lang.String TAG
com.google.firestore.admin.v1.Index$IndexField: com.google.protobuf.Parser PARSER
com.google.firestore.v1.RunAggregationQueryRequest: int STRUCTURED_AGGREGATION_QUERY_FIELD_NUMBER
me.carda.awesome_notifications.core.AwesomeNotifications: me.carda.awesome_notifications.core.utils.StringUtils stringUtils
me.carda.awesome_notifications.core.enumerators.ForegroundServiceType: me.carda.awesome_notifications.core.enumerators.ForegroundServiceType camera
io.flutter.embedding.engine.FlutterJNI: io.flutter.plugin.platform.PlatformViewsController platformViewsController
me.carda.awesome_notifications.core.managers.DisplayedManager: me.carda.awesome_notifications.core.managers.DisplayedManager instance
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: java.lang.Object lock
me.carda.awesome_notifications.core.enumerators.NotificationSource: me.carda.awesome_notifications.core.enumerators.NotificationSource CallKit
me.carda.awesome_notifications.core.Definitions: java.lang.String STORE_INITIAL_ACTION
com.google.firestore.v1.DocumentTransform$FieldTransform: com.google.firestore.v1.DocumentTransform$FieldTransform DEFAULT_INSTANCE
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeExceptionReceiver: java.util.List exceptionListeners
com.google.firestore.v1.StructuredAggregationQuery$Aggregation$Sum: int bitField0_
com.google.firestore.v1.BatchGetDocumentsResponse: int READ_TIME_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String SCHEDULER_HELPER_CHANNEL
com.google.firestore.v1.WriteResult: com.google.firestore.v1.WriteResult DEFAULT_INSTANCE
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_SET_EVENT_HANDLES
com.google.firestore.v1.BatchGetDocumentsRequest: int MASK_FIELD_NUMBER
androidx.concurrent.futures.AbstractResolvableFuture$Waiter: androidx.concurrent.futures.AbstractResolvableFuture$Waiter next
com.google.firestore.admin.v1.Index: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.exceptions.ExceptionCode: java.lang.String CODE_INSUFFICIENT_PERMISSIONS
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_SHOW_WHEN
me.carda.awesome_notifications.core.enumerators.NotificationLayout: me.carda.awesome_notifications.core.enumerators.NotificationLayout BigPicture
com.google.rpc.Status: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: java.lang.String COLUMN_ID
me.carda.awesome_notifications.core.managers.DefaultsManager: me.carda.awesome_notifications.core.managers.DefaultsManager instance
com.google.firestore.v1.WriteRequest: int WRITES_FIELD_NUMBER
me.carda.awesome_notifications.core.enumerators.NotificationCategory: java.lang.String safeName
com.google.firestore.v1.TargetChange: int CAUSE_FIELD_NUMBER
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: androidx.lifecycle.Lifecycle lifecycle
com.google.firestore.v1.BatchGetDocumentsRequest: int bitField0_
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_BADGE
androidx.core.app.JobIntentService: java.util.HashMap sClassWorkEnqueuer
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.lang.String VALUE
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_RANDOM_ID
me.carda.awesome_notifications.core.enumerators.MediaSource: me.carda.awesome_notifications.core.enumerators.MediaSource Resource
com.google.firebase.firestore.proto.WriteBatch: int BATCH_ID_FIELD_NUMBER
me.carda.awesome_notifications.core.services.ForegroundService: java.util.Map serviceStack
me.carda.awesome_notifications.core.models.NotificationChannelModel: me.carda.awesome_notifications.core.enumerators.GroupSort groupSort
io.flutter.embedding.engine.FlutterJNI: boolean prefetchDefaultFontManagerCalled
com.google.gson.stream.JsonReader: int NUMBER_CHAR_FRACTION_DIGIT
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_SCHEDULE_DELAY_TOLERANCE
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _prev
com.google.firestore.admin.v1.Index$IndexField: int ARRAY_CONFIG_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_SILENT_ACTION
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken END_DOCUMENT
com.google.firestore.v1.StructuredQuery$CompositeFilter: com.google.firestore.v1.StructuredQuery$CompositeFilter DEFAULT_INSTANCE
me.carda.awesome_notifications.core.Definitions: java.lang.String MEDIA_BUTTON
com.google.firebase.firestore.proto.UnknownDocument: int NAME_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_MODEL_LOCALIZATIONS
me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException: java.lang.String code
com.google.firestore.v1.StructuredQuery$Filter: int FIELD_FILTER_FIELD_NUMBER
com.google.firestore.v1.BloomFilter: int bitField0_
me.carda.awesome_notifications.core.threads.NotificationScheduler: java.lang.Boolean scheduled
me.carda.awesome_notifications.core.logs.Logger: java.lang.String greenColor
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.Boolean roundedBigPicture
com.google.firestore.v1.ListenResponse: int TARGET_CHANGE_FIELD_NUMBER
com.google.firestore.v1.DocumentRemove: int REMOVED_TARGET_IDS_FIELD_NUMBER
me.carda.awesome_notifications.core.enumerators.ForegroundStartMode: me.carda.awesome_notifications.core.enumerators.ForegroundStartMode stick
com.google.firestore.v1.StructuredQuery$CompositeFilter: com.google.protobuf.Parser PARSER
com.google.firebase.firestore.proto.NoDocument: com.google.firebase.firestore.proto.NoDocument DEFAULT_INSTANCE
me.carda.awesome_notifications.core.enumerators.NotificationPlayState: java.lang.String safeName
me.carda.awesome_notifications.core.models.NotificationButtonModel: java.lang.Boolean showInCompactView
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_IMPORTANCE
me.carda.awesome_notifications.core.utils.TimeZoneUtils: me.carda.awesome_notifications.core.utils.TimeZoneUtils instance
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_LED_COLOR
me.carda.awesome_notifications.core.managers.ActionManager: java.util.Map actionCache
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory Status
com.google.firestore.v1.StructuredAggregationQuery: java.lang.Object queryType_
com.google.protobuf.GeneratedMessageLite: java.util.Map defaultInstanceMap
me.carda.awesome_notifications.core.managers.StatusBarManager: android.content.SharedPreferences preferences
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.String titleLocKey
me.carda.awesome_notifications.core.models.NotificationLocalizationModel: java.lang.String title
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_GROUP_SORT
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: long id
com.google.firestore.v1.CommitRequest: java.lang.String database_
me.carda.awesome_notifications.core.Definitions: java.lang.String MEDIA_VALID_FILE
androidx.core.app.JobIntentService: java.util.ArrayList mCompatQueue
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_CREATE_NOTIFICATION
androidx.lifecycle.ReportFragment$LifecycleCallbacks: androidx.lifecycle.ReportFragment$LifecycleCallbacks$Companion Companion
com.google.firestore.v1.DocumentChange: com.google.firestore.v1.Document document_
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_INITIAL_DATE_TIME
me.carda.awesome_notifications.core.models.NotificationLocalizationModel: java.util.Map buttonLabels
com.google.firestore.admin.v1.Index$IndexField: int valueModeCase_
com.google.protobuf.AbstractMessageLite: int memoizedHashCode
com.google.protobuf.Any: int VALUE_FIELD_NUMBER
me.carda.awesome_notifications.core.models.NotificationContentModel: java.util.Calendar createdDate
com.google.firestore.v1.CommitResponse: com.google.firestore.v1.CommitResponse DEFAULT_INSTANCE
com.google.firestore.v1.Target: int EXPECTED_COUNT_FIELD_NUMBER
com.google.firestore.v1.RunAggregationQueryResponse: com.google.firestore.v1.AggregationResult result_
com.google.firestore.v1.BatchGetDocumentsResponse: int bitField0_
me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType: me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType Ringtone
androidx.concurrent.futures.AbstractResolvableFuture$Waiter: java.lang.Thread thread
kotlinx.coroutines.internal.Segment: int cleanedAndPointers
me.carda.awesome_notifications.core.Definitions: java.lang.String EVENT_SILENT_ACTION
me.carda.awesome_notifications.core.enumerators.NotificationLayout: me.carda.awesome_notifications.core.enumerators.NotificationLayout BigText
com.google.firebase.firestore.proto.UnknownDocument: com.google.firebase.firestore.proto.UnknownDocument DEFAULT_INSTANCE
me.carda.awesome_notifications.core.models.returnedData.NotificationReceived: android.content.Intent originalIntent
com.google.firestore.v1.BatchGetDocumentsRequest: int TRANSACTION_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_ICON_RESOURCE_ID
me.carda.awesome_notifications.core.background.BackgroundExecutor: java.lang.Long dartCallbackHandle
com.google.gson.stream.JsonReader: int PEEKED_NUMBER
me.carda.awesome_notifications.core.managers.RepositoryManager: java.lang.String packageName
com.google.firebase.firestore.proto.MaybeDocument: int documentTypeCase_
com.google.gson.stream.JsonWriter: java.lang.String[] REPLACEMENT_CHARS
me.carda.awesome_notifications.core.models.NotificationContentModel: me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle createdLifeCycle
me.carda.awesome_notifications.core.decoders.BitmapResourceDecoder: me.carda.awesome_notifications.core.completion_handlers.BitmapCompletionHandler completionHandler
com.google.firestore.v1.StructuredAggregationQuery$Aggregation: int operatorCase_
kotlinx.coroutines.JobSupport: java.lang.Object _state
me.carda.awesome_notifications.core.builders.NotificationBuilder: me.carda.awesome_notifications.core.utils.StringUtils stringUtils
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_TITLE_LOC_ARGS
com.google.firestore.v1.WriteResult: int UPDATE_TIME_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_ENABLE_WAKELOCK
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.Boolean autoDismissible
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object _parentHandle
me.carda.awesome_notifications.core.models.NotificationChannelModel: java.lang.Boolean enableLights
me.carda.awesome_notifications.core.models.NotificationCalendarModel: java.lang.Integer month
com.google.firestore.v1.RunAggregationQueryRequest: com.google.firestore.v1.RunAggregationQueryRequest DEFAULT_INSTANCE
me.carda.awesome_notifications.core.Definitions: java.lang.String INITIALIZE_CHANNELS
com.google.firebase.firestore.proto.WriteBatch: com.google.protobuf.Internal$ProtobufList baseWrites_
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory Workout
com.google.firestore.v1.ListenResponse: int DOCUMENT_CHANGE_FIELD_NUMBER
me.carda.awesome_notifications.core.enumerators.ActionType: me.carda.awesome_notifications.core.enumerators.ActionType SilentBackgroundAction
com.google.firebase.firestore.proto.WriteBatch: int batchId_
io.flutter.embedding.engine.FlutterOverlaySurface: android.view.Surface surface
com.google.firestore.v1.MapValue: com.google.protobuf.MapFieldLite fields_
me.carda.awesome_notifications.core.builders.NotificationBuilder: me.carda.awesome_notifications.core.managers.PermissionManager permissionManager
com.google.firestore.v1.StructuredAggregationQuery$Aggregation$Count: com.google.protobuf.Parser PARSER
com.google.firestore.v1.DocumentDelete: com.google.protobuf.Parser PARSER
kotlinx.coroutines.InvokeOnCancelling: int _invoked
com.google.firestore.v1.StructuredAggregationQuery$Aggregation$Count: com.google.protobuf.Int64Value upTo_
com.google.protobuf.GeneratedMessageLite: int MUTABLE_FLAG_MASK
me.carda.awesome_notifications.core.managers.CreatedManager: me.carda.awesome_notifications.core.managers.RepositoryManager shared
com.google.firebase.firestore.proto.WriteBatch: com.google.firebase.firestore.proto.WriteBatch DEFAULT_INSTANCE
me.carda.awesome_notifications.core.threads.NotificationSender: long endTime
me.carda.awesome_notifications.core.enumerators.NotificationPermission: me.carda.awesome_notifications.core.enumerators.NotificationPermission Light
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_DISPLAY_ON_FOREGROUND
com.google.firestore.v1.WriteRequest: int LABELS_FIELD_NUMBER
me.carda.awesome_notifications.core.models.DefaultsModel: java.lang.String appIcon
me.carda.awesome_notifications.core.managers.LocalizationManager: java.lang.String TAG
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken BOOLEAN
me.carda.awesome_notifications.core.enumerators.ForegroundStartMode: me.carda.awesome_notifications.core.enumerators.ForegroundStartMode[] $VALUES
me.carda.awesome_notifications.core.broadcasters.senders.BroadcastSender: me.carda.awesome_notifications.core.broadcasters.senders.BroadcastSender instance
me.carda.awesome_notifications.core.externalLibs.CronExpression: int YEAR
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_ONLY_ALERT_ONCE
com.google.firestore.v1.TransactionOptions$ReadWrite: com.google.protobuf.Parser PARSER
me.carda.awesome_notifications.core.models.NotificationChannelModel: me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour groupAlertBehavior
com.google.firestore.v1.BloomFilter: int hashCount_
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_CANCEL_NOTIFICATIONS_BY_GROUP_KEY
com.google.firestore.v1.StructuredQuery$Projection: com.google.protobuf.Internal$ProtobufList fields_
me.carda.awesome_notifications.AwesomeNotificationsPlugin: me.carda.awesome_notifications.core.utils.StringUtils stringUtils
com.google.firestore.v1.RunAggregationQueryResponse: int READ_TIME_FIELD_NUMBER
com.google.firestore.v1.StructuredQuery$Filter: com.google.protobuf.Parser PARSER
com.google.firestore.v1.TransactionOptions: com.google.firestore.v1.TransactionOptions DEFAULT_INSTANCE
com.google.protobuf.Timestamp: com.google.protobuf.Timestamp DEFAULT_INSTANCE
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: android.media.Image image
io.flutter.embedding.engine.FlutterJNI: float displayWidth
com.google.firestore.v1.StructuredQuery$FieldReference: com.google.firestore.v1.StructuredQuery$FieldReference DEFAULT_INSTANCE
io.flutter.embedding.engine.FlutterJNI: java.util.Set flutterUiDisplayListeners
com.google.firestore.v1.DocumentRemove: int DOCUMENT_FIELD_NUMBER
me.carda.awesome_notifications.core.threads.NotificationSender: java.lang.String TAG
me.carda.awesome_notifications.core.models.NotificationChannelModel: me.carda.awesome_notifications.core.enumerators.NotificationImportance importance
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.util.Map monthMap
me.carda.awesome_notifications.AwesomeNotificationsPlugin: me.carda.awesome_notifications.core.AwesomeNotifications awesomeNotifications
com.google.firestore.v1.StructuredQuery$UnaryFilter: int operandTypeCase_
me.carda.awesome_notifications.core.threads.NotificationForegroundSender: long startTime
com.google.firestore.v1.WriteRequest: int STREAM_ID_FIELD_NUMBER
com.google.firestore.v1.ArrayValue: com.google.protobuf.Parser PARSER
com.google.firestore.v1.CommitResponse: com.google.protobuf.Internal$ProtobufList writeResults_
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean released
android.support.v4.os.ResultReceiver: android.os.Parcelable$Creator CREATOR
com.google.firebase.firestore.proto.MaybeDocument: int DOCUMENT_FIELD_NUMBER
me.carda.awesome_notifications.core.managers.LostEventsManager: java.lang.String TAG
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_CREATED_LIFECYCLE
com.google.firestore.v1.Target: int TARGET_ID_FIELD_NUMBER
com.google.firestore.admin.v1.Index: int state_
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: boolean ignoringFence
me.carda.awesome_notifications.core.enumerators.ForegroundServiceType: me.carda.awesome_notifications.core.enumerators.ForegroundServiceType none
me.carda.awesome_notifications.core.Definitions: java.lang.String NOTIFICATION_CHANNEL_GROUP_NAME
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.String summary
com.google.firestore.v1.RunAggregationQueryRequest: int READ_TIME_FIELD_NUMBER
com.google.android.gms.auth.api.signin.GoogleSignInAccount: android.os.Parcelable$Creator CREATOR
me.carda.awesome_notifications.core.Definitions: java.lang.String EXTRA_ANDROID_MEDIA_BUTTON
com.google.firebase.firestore.proto.UnknownDocument: com.google.protobuf.Timestamp version_
me.carda.awesome_notifications.core.models.NotificationContentModel: me.carda.awesome_notifications.core.enumerators.NotificationCategory category
com.google.firestore.v1.WriteRequest: com.google.protobuf.ByteString streamToken_
me.carda.awesome_notifications.core.enumerators.NotificationPermission: me.carda.awesome_notifications.core.enumerators.NotificationPermission Vibration
com.google.firestore.v1.ExistenceFilter: int UNCHANGED_NAMES_FIELD_NUMBER
com.google.firestore.v1.BloomFilter: com.google.protobuf.Parser PARSER
com.google.firestore.v1.BatchGetDocumentsRequest: int consistencySelectorCase_
kotlinx.coroutines.internal.ConcurrentLinkedListNode: java.lang.Object _prev
me.carda.awesome_notifications.core.Definitions: java.lang.String MEDIA_VALID_RESOURCE
com.google.gson.stream.JsonReader: int BUFFER_SIZE
com.google.firestore.v1.BatchGetDocumentsRequest: int READ_TIME_FIELD_NUMBER
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: java.util.HashMap perImageReaders
kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.lang.Object _next
com.google.protobuf.Timestamp: com.google.protobuf.Parser PARSER
com.google.firestore.v1.TransactionOptions: int READ_ONLY_FIELD_NUMBER
me.carda.awesome_notifications.core.Definitions: java.lang.String CHANNEL_METHOD_GET_DRAWABLE_DATA
me.carda.awesome_notifications.core.Definitions: java.lang.String BROADCAST_FCM_TOKEN
me.carda.awesome_notifications.core.models.NotificationModel: java.util.List actionButtons
me.carda.awesome_notifications.core.managers.StatusBarManager: me.carda.awesome_notifications.core.utils.StringUtils stringUtils
me.carda.awesome_notifications.core.AwesomeNotifications: java.lang.ref.WeakReference wContext
com.google.rpc.Status: int DETAILS_FIELD_NUMBER
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.Boolean showWhen
com.google.firestore.v1.TargetChange: int TARGET_CHANGE_TYPE_FIELD_NUMBER
com.google.firestore.v1.TransactionOptions$ReadWrite: com.google.firestore.v1.TransactionOptions$ReadWrite DEFAULT_INSTANCE
me.carda.awesome_notifications.core.Definitions: java.lang.String BROADCAST_DISPLAYED_NOTIFICATION
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_PAUSE
com.google.firestore.v1.BatchGetDocumentsResponse: com.google.firestore.v1.BatchGetDocumentsResponse DEFAULT_INSTANCE
me.carda.awesome_notifications.core.broadcasters.receivers.ScheduledNotificationReceiver: java.lang.String TAG
com.google.gson.stream.JsonReader: int NUMBER_CHAR_DIGIT
io.flutter.plugin.platform.SingleViewPresentation: android.widget.FrameLayout container
com.google.firestore.v1.BatchGetDocumentsResponse: com.google.protobuf.Parser PARSER
com.google.android.material.textfield.TextInputLayout: java.lang.CharSequence getHelperText()
androidx.appcompat.widget.AppCompatButton: void setSupportBackgroundTintList(android.content.res.ColorStateList)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(long)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void pushImage(android.media.Image)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: void removeLong(android.content.Context,java.lang.String,java.lang.String)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: android.view.ActionMode$Callback getCustomSelectionActionModeCallback()
com.google.android.material.textfield.TextInputLayout: void setEndIconMinSize(int)
androidx.media.AudioAttributesCompatParcelizer: void write(androidx.media.AudioAttributesCompat,androidx.versionedparcelable.VersionedParcel)
io.flutter.embedding.android.FlutterView: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()
androidx.appcompat.widget.AppCompatEditText: android.view.ActionMode$Callback getCustomSelectionActionModeCallback()
com.google.firebase.firestore.core.CompositeFilter$Operator: com.google.firebase.firestore.core.CompositeFilter$Operator valueOf(java.lang.String)
me.carda.awesome_notifications.core.utils.HtmlUtils: java.lang.String adaptFlutterColorsToJava(java.lang.String)
me.carda.awesome_notifications.core.utils.CronUtils: java.util.Calendar getNextCalendar(java.util.Calendar,java.lang.String,java.util.TimeZone)
me.carda.awesome_notifications.core.models.NotificationModel: me.carda.awesome_notifications.core.models.NotificationScheduleModel extractNotificationSchedule(java.util.Map)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void maybeWaitOnFence(android.media.Image)
androidx.core.view.ViewCompat$Api29Impl: void setContentCaptureSession(android.view.View,androidx.core.view.contentcapture.ContentCaptureSessionCompat)
androidx.core.view.ViewCompat$Api23Impl: void setScrollIndicators(android.view.View,int,int)
com.google.android.material.button.MaterialButton: void setIconGravity(int)
me.carda.awesome_notifications.core.enumerators.GroupSort: me.carda.awesome_notifications.core.enumerators.GroupSort valueOf(java.lang.String)
androidx.appcompat.widget.AppCompatButton: void setAllCaps(boolean)
me.carda.awesome_notifications.core.models.NotificationModel: me.carda.awesome_notifications.core.models.NotificationContentModel extractNotificationContent(java.util.Map)
androidx.appcompat.widget.AppCompatCheckBox: void setBackgroundDrawable(android.graphics.drawable.Drawable)
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setSystemWindowInsets(androidx.core.graphics.Insets)
androidx.appcompat.widget.Toolbar: void setBackInvokedCallbackEnabled(boolean)
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode[] values()
androidx.core.view.ViewCompat$Api28Impl: void setAutofillId(android.view.View,androidx.core.view.autofill.AutofillIdCompat)
me.carda.awesome_notifications.core.utils.BooleanUtils: me.carda.awesome_notifications.core.utils.BooleanUtils getInstance()
com.google.android.material.chip.Chip: void setChipMinHeight(float)
me.carda.awesome_notifications.core.enumerators.ActionType: me.carda.awesome_notifications.core.enumerators.ActionType[] $values()
com.google.firebase.firestore.FirestoreRegistrar: FirestoreRegistrar()
androidx.versionedparcelable.CustomVersionedParcelable: CustomVersionedParcelable()
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setSupportBackgroundTintList(android.content.res.ColorStateList)
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.lang.String getExpressionSetSummary(java.util.Set)
androidx.appcompat.widget.AppCompatCheckBox: android.content.res.ColorStateList getSupportCompoundDrawablesTintList()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStarted(android.app.Activity)
com.google.firebase.firestore.util.AsyncQueue$TimerId: com.google.firebase.firestore.util.AsyncQueue$TimerId valueOf(java.lang.String)
me.carda.awesome_notifications.core.externalLibs.CronExpression: void buildExpression(java.lang.String)
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.PlatformView getView()
com.google.android.material.chip.Chip: float getChipStartPadding()
io.flutter.embedding.engine.FlutterJNI: void markTextureFrameAvailable(long)
com.google.android.material.textfield.TextInputLayout: void setErrorIconDrawable(android.graphics.drawable.Drawable)
androidx.core.app.NotificationCompatBuilder$Api21Impl: android.app.Notification$Builder setSound(android.app.Notification$Builder,android.net.Uri,java.lang.Object)
androidx.constraintlayout.widget.ConstraintLayout: void setMaxWidth(int)
com.google.android.material.textfield.TextInputLayout: void setBoxStrokeColor(int)
io.grpc.okhttp.NegotiationType: io.grpc.okhttp.NegotiationType valueOf(java.lang.String)
androidx.constraintlayout.solver.widgets.ConstraintWidget$DimensionBehaviour: androidx.constraintlayout.solver.widgets.ConstraintWidget$DimensionBehaviour valueOf(java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType valueOf(java.lang.String)
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)
androidx.core.view.WindowInsetsCompat$Impl: void setStableInsets(androidx.core.graphics.Insets)
com.google.firebase.firestore.model.MutableDocument$DocumentState: com.google.firebase.firestore.model.MutableDocument$DocumentState[] values()
androidx.core.widget.NestedScrollView: void setSmoothScrollingEnabled(boolean)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void release()
androidx.appcompat.widget.Toolbar: int getCurrentContentInsetEnd()
androidx.appcompat.widget.LinearLayoutCompat: void setOrientation(int)
androidx.appcompat.widget.Toolbar: java.lang.CharSequence getNavigationContentDescription()
com.google.android.material.textfield.TextInputLayout: void setPasswordVisibilityToggleEnabled(boolean)
com.google.android.material.textfield.TextInputLayout: android.graphics.Typeface getTypeface()
me.carda.awesome_notifications.core.builders.NotificationBuilder: me.carda.awesome_notifications.core.builders.NotificationBuilder getNewBuilder()
me.carda.awesome_notifications.core.models.AbstractModel: java.lang.Boolean getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,java.lang.Boolean)
com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton$ExtendedFloatingActionButtonBehavior: ExtendedFloatingActionButton$ExtendedFloatingActionButtonBehavior()
com.google.gson.stream.JsonReader: int peekKeyword()
com.google.android.material.button.MaterialButton: void setStrokeWidthResource(int)
com.google.gson.stream.JsonWriter: void setLenient(boolean)
com.google.gson.internal.bind.TypeAdapters$27: TypeAdapters$27()
com.google.firebase.firestore.FirebaseFirestoreException$Code: com.google.firebase.firestore.FirebaseFirestoreException$Code[] values()
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setSupportCompoundDrawablesTintList(android.content.res.ColorStateList)
androidx.core.view.WindowInsetsCompat$Impl: void setRootViewData(androidx.core.graphics.Insets)
com.google.android.material.chip.Chip: float getChipMinHeight()
com.google.android.material.chip.Chip: com.google.android.material.resources.TextAppearance getTextAppearance()
com.google.android.material.button.MaterialButton: void setIconResource(int)
me.carda.awesome_notifications.core.enumerators.NotificationPrivacy: me.carda.awesome_notifications.core.enumerators.NotificationPrivacy[] values()
com.google.gson.internal.bind.TypeAdapters$25: TypeAdapters$25()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets access$502(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.WindowInsets)
me.carda.awesome_notifications.core.builders.NotificationBuilder: int[] toIntArray(java.util.ArrayList)
io.flutter.embedding.engine.FlutterJNI: void handlePlatformMessage(java.lang.String,java.nio.ByteBuffer,int,long)
com.google.android.material.appbar.MaterialToolbar: void setTitleCentered(boolean)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelRequestUserPermissions(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.android.material.textfield.TextInputLayout: void setHintInternal(java.lang.CharSequence)
androidx.emoji2.text.ConcurrencyHelpers$Handler28Impl: android.os.Handler createAsync(android.os.Looper)
me.carda.awesome_notifications.core.managers.CancellationManager: boolean cancelNotificationsByGroupKey(android.content.Context,java.lang.String)
me.carda.awesome_notifications.core.models.NotificationCalendarModel: java.lang.Integer weekDayStandardToISO8601(java.lang.Integer)
me.carda.awesome_notifications.core.builders.NotificationBuilder: java.lang.Class tryResolveClassName(java.lang.String)
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode[] values()
com.google.android.material.chip.Chip: android.graphics.drawable.Drawable getBackgroundDrawable()
com.google.firebase.concurrent.ExecutorsRegistrar: ExecutorsRegistrar()
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setTint(android.graphics.drawable.Drawable,int)
androidx.core.view.MenuItemCompat$Api26Impl: android.view.MenuItem setIconTintList(android.view.MenuItem,android.content.res.ColorStateList)
me.carda.awesome_notifications.core.managers.PermissionManager: void showPreciseAlarmPage(android.content.Context,me.carda.awesome_notifications.core.completion_handlers.PermissionCompletionHandler)
com.google.firestore.v1.DocumentTransform$FieldTransform$TransformTypeCase: com.google.firestore.v1.DocumentTransform$FieldTransform$TransformTypeCase[] values()
androidx.appcompat.widget.AppCompatEditText: android.graphics.PorterDuff$Mode getSupportCompoundDrawablesTintMode()
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.util.Date getFinalFireTime()
com.google.gson.stream.JsonReader: void nextNull()
me.carda.awesome_notifications.core.managers.DefaultsManager: boolean setSilentCallbackDispatcher(android.content.Context,java.lang.Long)
androidx.core.view.WindowInsetsCompat$Impl20: void loadReflectionField()
android.support.v4.media.session.PlaybackStateCompat$Api21Impl: android.media.session.PlaybackState$CustomAction$Builder createCustomActionBuilder(java.lang.String,java.lang.CharSequence,int)
me.carda.awesome_notifications.core.managers.PermissionManager: boolean handleActivityResult(int,int,android.content.Intent)
androidx.media.app.NotificationCompat$Api15Impl: void setContentDescription(android.widget.RemoteViews,int,java.lang.CharSequence)
me.carda.awesome_notifications.core.managers.PermissionManager: boolean startVerifiedActivity(android.content.Context,android.content.Intent)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityCreated(android.app.Activity,android.os.Bundle)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setRotation(float)
androidx.appcompat.widget.ActionMenuView: android.view.Menu getMenu()
kotlin.internal.jdk7.JDK7PlatformImplementations: JDK7PlatformImplementations()
androidx.appcompat.widget.AppCompatTextHelper$Api26Impl: boolean setFontVariationSettings(android.widget.TextView,java.lang.String)
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Action$Builder addRemoteInput(android.app.Notification$Action$Builder,android.app.RemoteInput)
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setVibrationPattern(me.carda.awesome_notifications.core.models.NotificationChannelModel,androidx.core.app.NotificationCompat$Builder)
com.google.android.material.search.SearchBar$ScrollingViewBehavior: SearchBar$ScrollingViewBehavior()
io.grpc.internal.PickFirstLoadBalancerProvider: java.lang.String getPolicyName()
android.support.v4.media.session.PlaybackStateCompat$Api21Impl: android.media.session.PlaybackState build(android.media.session.PlaybackState$Builder)
android.support.v4.graphics.drawable.IconCompatParcelizer: IconCompatParcelizer()
androidx.core.view.WindowInsetsCompat$Impl: void copyRootViewBounds(android.view.View)
me.carda.awesome_notifications.core.managers.ScheduleManager: java.util.List listScheduledIdsFromChannel(android.content.Context,java.lang.String)
androidx.appcompat.widget.AppCompatTextView: void setEmojiCompatEnabled(boolean)
me.carda.awesome_notifications.DartRefreshSchedulesReceiver: DartRefreshSchedulesReceiver()
me.carda.awesome_notifications.core.enumerators.NotificationPermission: NotificationPermission(java.lang.String,int,java.lang.String)
io.flutter.view.TextureRegistry$SurfaceProducer: void scheduleFrame()
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void onDetachedFromActivityForConfigChanges()
androidx.constraintlayout.helper.widget.Flow: Flow(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void maybeWaitOnFence(android.media.Image)
me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle: me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle[] $values()
android.support.v4.media.RatingCompat$Api19Impl: float getStarRating(android.media.Rating)
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeExceptionReceiver: me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeExceptionReceiver subscribeOnNotificationEvents(me.carda.awesome_notifications.core.listeners.AwesomeExceptionListener)
androidx.core.view.ViewCompat$Api26Impl: boolean isImportantForAutofill(android.view.View)
androidx.core.app.NotificationCompat$MessagingStyle$Api24Impl: android.app.Notification$MessagingStyle createMessagingStyle(java.lang.CharSequence)
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: void setOnClickListener(android.view.View$OnClickListener)
androidx.core.graphics.Insets$Api29Impl: android.graphics.Insets of(int,int,int,int)
androidx.window.layout.adapter.sidecar.SidecarCompat$TranslatingCallback: void onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState)
com.google.android.material.transformation.FabTransformationBehavior: FabTransformationBehavior(android.content.Context,android.util.AttributeSet)
me.carda.awesome_notifications.core.models.AbstractModel: java.lang.Double getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,java.lang.Double)
androidx.constraintlayout.helper.widget.Flow: void setHorizontalStyle(int)
com.google.protobuf.Writer$FieldOrder: com.google.protobuf.Writer$FieldOrder[] values()
me.carda.awesome_notifications.core.managers.ChannelGroupManager: void setAndroidChannelGroup(android.content.Context,me.carda.awesome_notifications.core.models.NotificationChannelGroupModel)
me.carda.awesome_notifications.core.managers.LocalizationManager: java.lang.String getLocalization(android.content.Context)
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setAutoCancel(me.carda.awesome_notifications.core.models.NotificationModel,androidx.core.app.NotificationCompat$Builder)
io.flutter.view.TextureRegistry$ImageConsumer: android.media.Image acquireLatestImage()
com.google.android.material.textfield.TextInputLayout: android.content.res.ColorStateList getCounterOverflowTextColor()
me.carda.awesome_notifications.core.enumerators.NotificationLayout: me.carda.awesome_notifications.core.enumerators.NotificationLayout[] $values()
com.google.android.material.chip.Chip: void setBackgroundTintMode(android.graphics.PorterDuff$Mode)
me.carda.awesome_notifications.core.utils.CalendarUtils: java.util.Calendar shiftTimeZone(java.util.Calendar,java.util.TimeZone)
me.carda.awesome_notifications.core.utils.JsonUtils: java.util.Map jsonToMap(org.json.JSONObject)
com.google.firebase.firestore.core.EventManager$ListenerRemovalAction: com.google.firebase.firestore.core.EventManager$ListenerRemovalAction[] values()
androidx.constraintlayout.widget.ConstraintHelper: void setIds(java.lang.String)
com.google.android.material.internal.CheckableImageButton: void setPressable(boolean)
com.google.android.material.textfield.TextInputLayout: void setHintAnimationEnabled(boolean)
me.carda.awesome_notifications.core.services.ForegroundService: int onStartCommand(android.content.Intent,int,int)
me.carda.awesome_notifications.core.models.NotificationModel: java.util.Map toMap()
androidx.appcompat.widget.Toolbar: void setOverflowIcon(android.graphics.drawable.Drawable)
com.google.gson.stream.JsonWriter: void beforeName()
io.grpc.Context$DirectExecutor: io.grpc.Context$DirectExecutor valueOf(java.lang.String)
me.carda.awesome_notifications.core.managers.LifeCycleManager: me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle getApplicationLifeCycle()
me.carda.awesome_notifications.core.threads.NotificationScheduler: void schedule(android.content.Context,me.carda.awesome_notifications.core.models.NotificationModel,android.content.Intent,me.carda.awesome_notifications.core.completion_handlers.NotificationThreadCompletionHandler)
androidx.appcompat.widget.Toolbar: void setSubtitle(int)
me.carda.awesome_notifications.core.managers.ScheduleManager: void cancelAllSchedules(android.content.Context)
androidx.core.app.NotificationCompatBuilder$Api28Impl: android.app.Notification$Builder addPerson(android.app.Notification$Builder,android.app.Person)
androidx.appcompat.widget.AppCompatCheckBox: androidx.appcompat.widget.AppCompatEmojiTextHelper getEmojiTextViewHelper()
me.carda.awesome_notifications.core.managers.ChannelManager: void removeOldAndroidChannelStandards(android.content.Context,java.lang.String,java.lang.String)
com.google.protobuf.JavaType: com.google.protobuf.JavaType valueOf(java.lang.String)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodGetInitialAction(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.appcompat.view.menu.ActionMenuItemView: void setExpandedFormat(boolean)
com.google.firebase.firestore.Query$Direction: com.google.firebase.firestore.Query$Direction[] values()
androidx.appcompat.widget.MenuPopupWindow$Api29Impl: void setTouchModal(android.widget.PopupWindow,boolean)
com.google.android.material.button.MaterialButton: void setOnPressedChangeListenerInternal(com.google.android.material.button.MaterialButton$OnPressedChangeListener)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setStrokeColor(int)
androidx.emoji2.text.EmojiCompatInitializer: EmojiCompatInitializer()
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setLights(me.carda.awesome_notifications.core.models.NotificationChannelModel,androidx.core.app.NotificationCompat$Builder)
me.carda.awesome_notifications.core.enumerators.NotificationImportance: int toAndroidPriority(me.carda.awesome_notifications.core.enumerators.NotificationImportance)
me.carda.awesome_notifications.core.models.NotificationContentModel: me.carda.awesome_notifications.core.models.AbstractModel fromJson(java.lang.String)
me.carda.awesome_notifications.core.models.NotificationChannelModel: me.carda.awesome_notifications.core.models.NotificationChannelModel fromJson(java.lang.String)
com.google.android.material.transformation.ExpandableBehavior: ExpandableBehavior()
com.google.gson.stream.JsonWriter: void beforeValue()
com.google.android.material.button.MaterialButton: int getInsetBottom()
me.carda.awesome_notifications.DartRefreshSchedulesReceiver: void initializeExternalPlugins(android.content.Context)
android.support.v4.media.RatingCompat$Api19Impl: android.media.Rating newHeartRating(boolean)
androidx.appcompat.widget.ActionMenuView: android.graphics.drawable.Drawable getOverflowIcon()
io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$ListenSource: io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$ListenSource[] values()
me.carda.awesome_notifications.core.models.returnedData.NotificationReceived: me.carda.awesome_notifications.core.models.returnedData.NotificationReceived fromJson(java.lang.String)
androidx.appcompat.widget.ActionBarContextView: void setContentHeight(int)
io.flutter.embedding.engine.FlutterJNI: void unregisterTexture(long)
io.grpc.internal.DnsNameResolver$JdkAddressResolver: io.grpc.internal.DnsNameResolver$JdkAddressResolver valueOf(java.lang.String)
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setTitle(me.carda.awesome_notifications.core.models.NotificationModel,androidx.core.app.NotificationCompat$Builder)
me.carda.awesome_notifications.core.enumerators.GroupSort: GroupSort(java.lang.String,int,java.lang.String)
com.google.gson.stream.JsonWriter: void close()
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getMinWidthMajor()
me.carda.awesome_notifications.core.models.NotificationContentModel: me.carda.awesome_notifications.core.models.AbstractModel fromMap(java.util.Map)
me.carda.awesome_notifications.core.threads.NotificationScheduler: void _removeFromAlarm(android.content.Context,java.lang.Integer)
me.carda.awesome_notifications.core.models.NotificationChannelGroupModel: java.util.Map toMap()
com.google.android.material.chip.Chip: void setChipStrokeWidthResource(int)
me.carda.awesome_notifications.core.utils.SerializableUtils: java.util.Calendar deserializeCalendar(java.lang.String)
androidx.recyclerview.widget.RecyclerView: boolean getPreserveFocusAfterLayout()
me.carda.awesome_notifications.core.managers.PermissionManager: boolean gotoControlsDnDPage(android.content.Context)
androidx.coordinatorlayout.widget.CoordinatorLayout: java.util.List getDependencySortedChildren()
com.google.android.material.transformation.ExpandableTransformationBehavior: ExpandableTransformationBehavior()
com.google.protobuf.NullValue: com.google.protobuf.NullValue valueOf(java.lang.String)
me.carda.awesome_notifications.core.utils.CompareUtils: boolean assertEqualLists(java.lang.Object,java.lang.Object)
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsets(int)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getTranslateY()
com.google.gson.stream.JsonReader: java.lang.String toString()
me.carda.awesome_notifications.core.AwesomeNotifications: me.carda.awesome_notifications.core.AwesomeNotifications unsubscribeOnActionEvents(me.carda.awesome_notifications.core.listeners.AwesomeActionEventListener)
me.carda.awesome_notifications.core.managers.DefaultsManager: void saveDefault(android.content.Context,java.lang.String,java.lang.Long)
androidx.appcompat.widget.ViewUtils$Api29Impl: void computeFitSystemWindows(android.view.View,android.graphics.Rect,android.graphics.Rect)
androidx.appcompat.widget.Toolbar: void setCollapseContentDescription(int)
com.google.gson.stream.JsonWriter: void push(int)
me.carda.awesome_notifications.core.managers.CancellationManager: me.carda.awesome_notifications.core.managers.CancellationManager getInstance()
com.google.android.material.textfield.TextInputLayout: java.lang.CharSequence getError()
me.carda.awesome_notifications.core.utils.MediaUtils: me.carda.awesome_notifications.core.enumerators.MediaSource getMediaSourceType(java.lang.String)
com.google.android.material.textfield.TextInputLayout: void setBoxBackgroundMode(int)
androidx.recyclerview.widget.RecyclerView: void setRecyclerListener(androidx.recyclerview.widget.RecyclerView$RecyclerListener)
me.carda.awesome_notifications.core.managers.LifeCycleManager: me.carda.awesome_notifications.core.managers.LifeCycleManager getInstance()
io.grpc.okhttp.internal.Protocol: io.grpc.okhttp.internal.Protocol[] values()
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI spawn(java.lang.String,java.lang.String,java.lang.String,java.util.List)
me.carda.awesome_notifications.core.managers.LifeCycleManager: void startListeners()
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons[] values()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay[] values()
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Builder addAction(android.app.Notification$Builder,android.app.Notification$Action)
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver: void onBroadcastBackgroundActionNotification(android.content.Context,me.carda.awesome_notifications.core.models.returnedData.ActionReceived)
me.carda.awesome_notifications.DartBackgroundExecutor: void finishDartBackgroundExecution()
me.carda.awesome_notifications.core.exceptions.ExceptionFactory: void registerNewAwesomeException(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Exception)
me.carda.awesome_notifications.core.services.BackgroundService: void initializeExternalPlugins(android.content.Context)
io.grpc.stub.ClientCalls$StubType: io.grpc.stub.ClientCalls$StubType valueOf(java.lang.String)
me.carda.awesome_notifications.core.threads.NotificationThread: java.lang.Object doInBackground()
com.google.gson.internal.bind.DateTypeAdapter$1: DateTypeAdapter$1()
io.grpc.internal.ClientStreamListener$RpcProgress: io.grpc.internal.ClientStreamListener$RpcProgress valueOf(java.lang.String)
android.support.v4.media.RatingCompat$Api19Impl: boolean hasHeart(android.media.Rating)
io.flutter.plugins.firebase.firestore.FlutterFirebaseFirestoreRegistrar: java.util.List getComponents()
com.google.gson.internal.bind.TypeAdapters$29: TypeAdapters$29()
com.google.android.material.textfield.TextInputLayout: android.content.res.ColorStateList getDefaultHintTextColor()
androidx.appcompat.widget.ActionMenuView: void setPopupTheme(int)
androidx.media.app.NotificationCompat$Api34Impl: android.app.Notification$MediaStyle setRemotePlaybackInfo(android.app.Notification$MediaStyle,java.lang.CharSequence,int,android.app.PendingIntent,java.lang.Boolean)
com.google.android.material.textfield.TextInputLayout: void setErrorIconTintList(android.content.res.ColorStateList)
me.carda.awesome_notifications.core.managers.StatusBarManager: void updateActiveMapIntoPreferences(android.content.SharedPreferences$Editor,java.lang.String,java.util.Map)
me.carda.awesome_notifications.core.models.NotificationCrontabModel: java.lang.String toJson()
androidx.window.area.reflectionguard.ExtensionWindowAreaStatusRequirements: int getWindowAreaStatus()
com.google.android.material.timepicker.ClockHandView: ClockHandView(android.content.Context,android.util.AttributeSet)
androidx.appcompat.widget.AppCompatEditText: android.content.res.ColorStateList getSupportCompoundDrawablesTintList()
com.google.firestore.admin.v1.Index$IndexField$ArrayConfig: com.google.firestore.admin.v1.Index$IndexField$ArrayConfig valueOf(java.lang.String)
com.google.android.material.textfield.TextInputLayout: void setEndIconContentDescription(java.lang.CharSequence)
com.google.android.material.textfield.TextInputLayout: void setStartIconVisible(boolean)
me.carda.awesome_notifications.core.managers.BadgeManager: boolean isBadgeNumberingAllowed(android.content.Context)
me.carda.awesome_notifications.core.models.returnedData.ActionReceived: void registerUserActionEvent(me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle)
me.carda.awesome_notifications.core.managers.ScheduleManager: boolean isPreciseAlarmGloballyAllowed(android.app.AlarmManager)
me.carda.awesome_notifications.core.managers.CreatedManager: me.carda.awesome_notifications.core.models.returnedData.NotificationReceived getCreatedByIdAndDate(android.content.Context,java.lang.Integer,java.util.Calendar)
androidx.appcompat.widget.AppCompatCheckBox: android.graphics.PorterDuff$Mode getSupportButtonTintMode()
me.carda.awesome_notifications.core.broadcasters.receivers.NotificationActionReceiver: void receiveActionIntent(android.content.Context,android.content.Intent)
androidx.appcompat.widget.AlertDialogLayout: AlertDialogLayout(android.content.Context,android.util.AttributeSet)
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeExceptionReceiver: void notifyNewException(java.lang.String,java.lang.Exception)
com.google.android.material.chip.Chip: void setCheckedIconVisible(boolean)
com.google.android.material.button.MaterialButtonToggleGroup: void setupButtonChild(com.google.android.material.button.MaterialButton)
com.google.firebase.firestore.util.Logger$Level: com.google.firebase.firestore.util.Logger$Level[] values()
me.carda.awesome_notifications.core.managers.ChannelManager: void updateChannelModelThroughAndroidChannel(me.carda.awesome_notifications.core.models.NotificationChannelModel,android.app.NotificationChannel)
androidx.window.area.reflectionguard.WindowAreaComponentApi2Requirements: void startRearDisplaySession(android.app.Activity,androidx.window.extensions.core.util.function.Consumer)
io.flutter.embedding.engine.FlutterJNI: void setSemanticsEnabledInNative(boolean)
io.grpc.internal.PickFirstLoadBalancerProvider: io.grpc.NameResolver$ConfigOrError parseLoadBalancingPolicyConfig(java.util.Map)
me.carda.awesome_notifications.core.threads.NotificationForegroundSender: void start(android.content.Context,me.carda.awesome_notifications.core.builders.NotificationBuilder,me.carda.awesome_notifications.core.services.ForegroundService$ForegroundServiceIntent,me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle,me.carda.awesome_notifications.core.completion_handlers.NotificationThreadCompletionHandler)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void release()
androidx.core.view.ViewCompat$Api26Impl: void setFocusedByDefault(android.view.View,boolean)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: void setAllLongValues(android.content.Context,java.lang.String,java.util.Map)
androidx.fragment.app.FragmentContainerView: void setDrawDisappearingViewsLast(boolean)
androidx.appcompat.widget.AppCompatEditText: android.content.res.ColorStateList getSupportBackgroundTintList()
me.carda.awesome_notifications.core.AwesomeNotifications: void onNewNotificationReceived(java.lang.String,me.carda.awesome_notifications.core.models.returnedData.NotificationReceived)
io.flutter.view.AccessibilityViewEmbedder: boolean onAccessibilityHoverEvent(int,android.view.MotionEvent)
me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour: GroupAlertBehaviour(java.lang.String,int,java.lang.String)
androidx.appcompat.widget.AppCompatImageButton: void setSupportImageTintMode(android.graphics.PorterDuff$Mode)
android.support.v4.media.AudioAttributesCompatParcelizer: void write(androidx.media.AudioAttributesCompat,androidx.versionedparcelable.VersionedParcel)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState valueOf(java.lang.String)
android.support.v4.media.AudioAttributesImplApi21Parcelizer: AudioAttributesImplApi21Parcelizer()
androidx.appcompat.widget.AppCompatButton: int getAutoSizeTextType()
com.google.android.material.datepicker.MaterialCalendar$CalendarSelector: com.google.android.material.datepicker.MaterialCalendar$CalendarSelector valueOf(java.lang.String)
com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()
me.carda.awesome_notifications.core.AwesomeNotifications: void startForegroundService(me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.enumerators.ForegroundStartMode,me.carda.awesome_notifications.core.enumerators.ForegroundServiceType)
me.carda.awesome_notifications.core.enumerators.MediaSource: java.lang.String getSafeName()
android.support.v4.media.session.PlaybackStateCompat$Api21Impl: void setActions(android.media.session.PlaybackState$Builder,long)
me.carda.awesome_notifications.core.managers.DisplayedManager: java.util.List getDisplayedByKey(android.content.Context,java.lang.Integer)
me.carda.awesome_notifications.core.managers.DismissedManager: boolean removeAllDismissed(android.content.Context)
androidx.appcompat.widget.AppCompatEditText: android.text.Editable getText()
com.google.firebase.firestore.MetadataChanges: com.google.firebase.firestore.MetadataChanges[] values()
androidx.appcompat.widget.AppCompatAutoCompleteTextView: android.content.res.ColorStateList getSupportBackgroundTintList()
com.google.android.material.textfield.TextInputLayout: int getErrorAccessibilityLiveRegion()
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setCategoryFlags(android.content.Context,me.carda.awesome_notifications.core.models.NotificationModel,android.app.Notification)
androidx.core.view.WindowInsetsCompat$Impl29: WindowInsetsCompat$Impl29(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl29)
androidx.media.AudioAttributesCompatParcelizer: AudioAttributesCompatParcelizer()
me.carda.awesome_notifications.core.managers.ChannelManager: void removeAndroidChannel(android.content.Context,java.lang.String,java.lang.String)
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setGrouping(android.content.Context,me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.models.NotificationChannelModel,androidx.core.app.NotificationCompat$Builder)
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeExceptionReceiver: boolean isEmpty()
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceWindowChanged(long,android.view.Surface)
androidx.constraintlayout.helper.widget.Flow: void setOrientation(int)
me.carda.awesome_notifications.core.managers.ChannelManager: void commitChanges(android.content.Context)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getStableInsets()
me.carda.awesome_notifications.core.managers.CancellationManager: boolean dismissNotificationsByChannelKey(android.content.Context,java.lang.String)
com.google.android.gms.common.GooglePlayServicesMissingManifestValueException: GooglePlayServicesMissingManifestValueException()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreStopped(android.app.Activity)
com.google.android.material.internal.NavigationMenuItemView: void setTitle(java.lang.CharSequence)
com.google.firebase.ktx.FirebaseCommonKtxRegistrar: FirebaseCommonKtxRegistrar()
me.carda.awesome_notifications.DartBackgroundExecutor: io.flutter.embedding.engine.FlutterEngine access$002(me.carda.awesome_notifications.DartBackgroundExecutor,io.flutter.embedding.engine.FlutterEngine)
me.carda.awesome_notifications.core.models.NotificationChannelModel: me.carda.awesome_notifications.core.models.NotificationChannelModel fromMap(java.util.Map)
com.google.android.material.button.MaterialButton: int getIconPadding()
com.google.android.material.textfield.TextInputLayout: void setEndIconVisible(boolean)
androidx.fragment.app.DefaultSpecialEffectsController$Api26Impl: void setCurrentPlayTime(android.animation.AnimatorSet,long)
androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetBottom(android.view.DisplayCutout)
androidx.constraintlayout.widget.ConstraintLayout: int getMinWidth()
com.google.gson.stream.JsonReader: void endObject()
com.google.android.material.chip.Chip: void setCheckedIconTint(android.content.res.ColorStateList)
androidx.core.app.NotificationCompatBuilder$Api24Impl: android.app.Notification$Builder setCustomHeadsUpContentView(android.app.Notification$Builder,android.widget.RemoteViews)
com.google.android.material.internal.CheckableImageButton: CheckableImageButton(android.content.Context,android.util.AttributeSet)
androidx.media.AudioAttributesImplBase: AudioAttributesImplBase()
android.support.v4.media.session.PlaybackStateCompat$Api21Impl: float getPlaybackSpeed(android.media.session.PlaybackState)
me.carda.awesome_notifications.core.managers.CreatedManager: java.util.List getCreatedByKey(android.content.Context,java.lang.Integer)
androidx.core.app.NotificationCompatBuilder$Api20Impl: java.lang.String getGroup(android.app.Notification)
com.google.android.material.internal.ForegroundLinearLayout: android.graphics.drawable.Drawable getForeground()
androidx.appcompat.widget.Toolbar: void setSubtitle(java.lang.CharSequence)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader access$700(io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer)
com.google.firebase.firestore.remote.WatchChangeAggregator$BloomFilterApplicationStatus: com.google.firebase.firestore.remote.WatchChangeAggregator$BloomFilterApplicationStatus valueOf(java.lang.String)
me.carda.awesome_notifications.core.managers.StatusBarManager: java.util.Collection getAllActiveNotificationIdsOnStatusBar()
me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException: AwesomeNotificationsException(java.lang.String,java.lang.String,java.lang.String,java.lang.StackTraceElement[])
android.support.v4.media.session.PlaybackStateCompat$Api21Impl: void setErrorMessage(android.media.session.PlaybackState$Builder,java.lang.CharSequence)
androidx.lifecycle.SavedStateHandlesVM: SavedStateHandlesVM()
me.carda.awesome_notifications.core.enumerators.NotificationPermission: java.lang.String getSafeName()
com.google.android.material.textfield.TextInputLayout: void setStartIconContentDescription(int)
androidx.appcompat.widget.AppCompatEditText: void setBackgroundResource(int)
androidx.lifecycle.ProcessLifecycleOwner$attach$1: void onActivityCreated(android.app.Activity,android.os.Bundle)
com.google.gson.stream.JsonReader: long nextLong()
me.carda.awesome_notifications.core.AwesomeNotifications: void notifyAwesomeEvent(java.lang.String,java.util.Map)
androidx.appcompat.widget.AppCompatTextView: void setPrecomputedText(androidx.core.text.PrecomputedTextCompat)
androidx.appcompat.widget.AppCompatImageButton: void setBackgroundDrawable(android.graphics.drawable.Drawable)
com.google.android.material.internal.NavigationMenuItemView: void setTextColor(android.content.res.ColorStateList)
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityDestroyed(android.app.Activity)
androidx.appcompat.widget.Toolbar: void setTitle(int)
com.google.firebase.concurrent.UiExecutor: com.google.firebase.concurrent.UiExecutor valueOf(java.lang.String)
com.google.android.material.textfield.TextInputLayout: void setErrorEnabled(boolean)
me.carda.awesome_notifications.core.AwesomeNotifications: int decrementGlobalBadgeCounter()
me.carda.awesome_notifications.core.utils.BitmapUtils: java.lang.Boolean isValidDrawableResource(android.content.Context,java.lang.String)
com.google.android.material.textfield.TextInputLayout: void setBoxStrokeWidthResource(int)
androidx.appcompat.widget.ActionMenuView: void setExpandedActionViewsExclusive(boolean)
me.carda.awesome_notifications.core.threads.NotificationScheduler: boolean isScheduleActiveOnAlarmManager(android.content.Context,java.lang.Integer)
me.carda.awesome_notifications.core.models.AbstractModel: void putDataOnSerializedMap(java.lang.String,java.util.Map,java.util.Calendar)
androidx.appcompat.widget.SearchView$SearchAutoComplete: void setThreshold(int)
androidx.appcompat.widget.AppCompatTextView: void setSupportBackgroundTintList(android.content.res.ColorStateList)
me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle: NotificationLifeCycle(java.lang.String,int,java.lang.String)
me.carda.awesome_notifications.core.enumerators.LogLevel: me.carda.awesome_notifications.core.enumerators.LogLevel getSafeEnum(java.lang.String)
com.google.firebase.firestore.remote.ConnectivityMonitor$NetworkStatus: com.google.firebase.firestore.remote.ConnectivityMonitor$NetworkStatus[] values()
com.google.android.material.chip.Chip: android.content.res.ColorStateList getChipBackgroundColor()
me.carda.awesome_notifications.core.builders.NotificationBuilder: void updateRemoteHistoryOnActiveNotification(android.content.Context,me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.models.returnedData.ActionReceived,me.carda.awesome_notifications.core.completion_handlers.NotificationThreadCompletionHandler)
androidx.core.app.NotificationCompatBuilder$Api21Impl: android.app.Notification$Builder setPublicVersion(android.app.Notification$Builder,android.app.Notification)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter endObject()
androidx.core.app.NotificationCompatBuilder$Api24Impl: android.app.Notification$Builder setRemoteInputHistory(android.app.Notification$Builder,java.lang.CharSequence[])
io.grpc.internal.PickFirstLoadBalancerProvider: PickFirstLoadBalancerProvider()
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setCurrentTranslation(android.content.Context,me.carda.awesome_notifications.core.models.NotificationModel)
com.google.android.material.textfield.TextInputLayout: void setMaxWidth(int)
me.carda.awesome_notifications.core.enumerators.NotificationImportance: int toAndroidImportance(me.carda.awesome_notifications.core.enumerators.NotificationImportance)
me.carda.awesome_notifications.core.models.NotificationContentModel: me.carda.awesome_notifications.core.models.NotificationContentModel fromJson(java.lang.String)
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: android.database.sqlite.SQLiteDatabase getWritableDatabase(android.content.Context)
androidx.window.layout.util.ContextCompatHelperApi30: androidx.core.view.WindowInsetsCompat currentWindowInsets(android.content.Context)
me.carda.awesome_notifications.core.managers.CancellationManager: void cancelAllNotifications(android.content.Context)
androidx.core.widget.TextViewCompat$Api23Impl: void setCompoundDrawableTintList(android.widget.TextView,android.content.res.ColorStateList)
androidx.core.view.WindowInsetsCompat$Impl20: WindowInsetsCompat$Impl20(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl20)
com.google.android.material.datepicker.MaterialTextInputPicker: MaterialTextInputPicker()
me.carda.awesome_notifications.core.enumerators.ForegroundStartMode: me.carda.awesome_notifications.core.enumerators.ForegroundStartMode[] values()
androidx.appcompat.widget.AppCompatTextHelper$Api24Impl: void setTextLocales(android.widget.TextView,android.os.LocaleList)
me.carda.awesome_notifications.core.managers.LostEventsManager: void saveDisplayed(android.content.Context,me.carda.awesome_notifications.core.models.returnedData.NotificationReceived)
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver: AwesomeEventsReceiver(me.carda.awesome_notifications.core.utils.StringUtils)
com.google.android.material.chip.Chip: void setElevation(float)
io.flutter.embedding.engine.FlutterJNI: void nativeSetSemanticsEnabled(long,boolean)
me.carda.awesome_notifications.core.models.returnedData.ActionReceived: ActionReceived(me.carda.awesome_notifications.core.models.NotificationContentModel,android.content.Intent)
me.carda.awesome_notifications.core.utils.StringUtils: StringUtils()
androidx.appcompat.widget.AppCompatImageView: void setSupportBackgroundTintList(android.content.res.ColorStateList)
androidx.appcompat.widget.ActionBarOverlayLayout: void setOverlayMode(boolean)
androidx.appcompat.widget.AppCompatImageButton: void setSupportImageTintList(android.content.res.ColorStateList)
me.carda.awesome_notifications.core.builders.NotificationBuilder: android.app.PendingIntent getPendingActionIntent(android.content.Context,android.content.Intent,me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.models.NotificationChannelModel)
me.carda.awesome_notifications.core.AwesomeNotifications: void notifyActionEvent(java.lang.String,me.carda.awesome_notifications.core.models.returnedData.ActionReceived)
me.carda.awesome_notifications.core.models.NotificationScheduleModel: NotificationScheduleModel()
io.flutter.plugin.platform.PlatformViewWrapper: int getRenderTargetWidth()
androidx.appcompat.widget.ActionBarContainer: android.view.View getTabContainer()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader getOrCreatePerImageReader(android.media.ImageReader)
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setNotificationPendingIntents(me.carda.awesome_notifications.core.models.NotificationModel,android.app.PendingIntent,android.app.PendingIntent,androidx.core.app.NotificationCompat$Builder)
me.carda.awesome_notifications.core.broadcasters.receivers.RefreshSchedulesReceiver: void onReceiveBroadcastEvent(android.content.Context,android.content.Intent)
androidx.appcompat.widget.AppCompatButton: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
me.carda.awesome_notifications.core.managers.PermissionManager: void setChannelPropertyThroughPermission(me.carda.awesome_notifications.core.models.NotificationChannelModel,me.carda.awesome_notifications.core.enumerators.NotificationPermission,boolean)
androidx.core.app.RemoteInput$Api29Impl: android.app.RemoteInput$Builder setEditChoicesBeforeSending(android.app.RemoteInput$Builder,int)
io.flutter.view.TextureRegistry$SurfaceProducer: android.view.Surface getSurface()
com.google.android.material.button.MaterialButton: void setBackground(android.graphics.drawable.Drawable)
androidx.appcompat.widget.ActivityChooserView$InnerLayout: ActivityChooserView$InnerLayout(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void onTrimMemory(int)
com.google.android.material.textfield.TextInputLayout: void setEndIconActivated(boolean)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodCancelNotification(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.util.Date getTimeBefore(java.util.Date)
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setMandatorySystemGestureInsets(androidx.core.graphics.Insets)
me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle: java.lang.String getSafeName()
com.google.firebase.firestore.core.FieldFilter$Operator: com.google.firebase.firestore.core.FieldFilter$Operator valueOf(java.lang.String)
me.carda.awesome_notifications.core.broadcasters.senders.BroadcastSender: void sendBroadcastDefaultAction(android.content.Context,me.carda.awesome_notifications.core.models.returnedData.ActionReceived,boolean)
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.lang.String getExpressionSetSummary(java.util.ArrayList)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setFillAlpha(float)
me.carda.awesome_notifications.core.builders.NotificationBuilder: boolean notificationActionShouldAutoDismiss(me.carda.awesome_notifications.core.models.returnedData.ActionReceived)
io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$PigeonTransactionResult: io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$PigeonTransactionResult[] values()
androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper$Impl: void computeAndSetTextDirection(android.text.StaticLayout$Builder,android.widget.TextView)
com.google.android.material.textfield.TextInputLayout: java.lang.CharSequence getCounterOverflowDescription()
androidx.appcompat.widget.ActionBarOverlayLayout: ActionBarOverlayLayout(android.content.Context,android.util.AttributeSet)
androidx.core.app.NotificationCompatBuilder$Api26Impl: android.app.Notification$Builder setSettingsText(android.app.Notification$Builder,java.lang.CharSequence)
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setChannelKey(android.content.Context,me.carda.awesome_notifications.core.models.NotificationChannelModel,androidx.core.app.NotificationCompat$Builder)
androidx.appcompat.widget.AppCompatTextHelper$Api26Impl: void setAutoSizeTextTypeUniformWithConfiguration(android.widget.TextView,int,int,int,int)
androidx.appcompat.widget.AppCompatImageButton: void setImageResource(int)
me.carda.awesome_notifications.core.AwesomeNotifications: me.carda.awesome_notifications.core.models.returnedData.ActionReceived getInitialNotificationAction(boolean)
com.google.firebase.firestore.proto.MaybeDocument$DocumentTypeCase: com.google.firebase.firestore.proto.MaybeDocument$DocumentTypeCase valueOf(java.lang.String)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.util.Map getAllBooleanValues(android.content.Context,java.lang.String)
com.google.android.material.textfield.TextInputLayout: void setErrorIconOnLongClickListener(android.view.View$OnLongClickListener)
com.google.android.material.sidesheet.SideSheetBehavior: SideSheetBehavior(android.content.Context,android.util.AttributeSet)
me.carda.awesome_notifications.core.models.returnedData.NotificationReceived: me.carda.awesome_notifications.core.models.AbstractModel fromMap(java.util.Map)
androidx.appcompat.widget.Toolbar: void setTitleMarginTop(int)
com.google.protobuf.ProtoSyntax: com.google.protobuf.ProtoSyntax[] values()
me.carda.awesome_notifications.core.models.AbstractModel: java.util.List getValueOrDefaultCalendarList(java.util.Map,java.lang.String,java.util.List)
io.grpc.okhttp.internal.framed.HeadersMode: io.grpc.okhttp.internal.framed.HeadersMode[] values()
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getFixedHeightMajor()
com.google.android.material.textfield.TextInputLayout: void setPasswordVisibilityToggleContentDescription(java.lang.CharSequence)
me.carda.awesome_notifications.core.enumerators.ActionType: me.carda.awesome_notifications.core.enumerators.ActionType getSafeEnum(java.lang.String)
me.carda.awesome_notifications.core.broadcasters.receivers.NotificationActionReceiver: void onReceiveBroadcastEvent(android.content.Context,android.content.Intent)
androidx.core.app.JobIntentService: void onCreate()
com.google.android.material.textfield.TextInputLayout: int getCounterMaxLength()
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsVariationSelector(int)
androidx.core.graphics.drawable.IconCompat$Api23Impl: android.graphics.drawable.Icon toIcon(androidx.core.graphics.drawable.IconCompat,android.content.Context)
androidx.constraintlayout.helper.widget.Flow: void setHorizontalBias(float)
kotlinx.coroutines.android.AndroidDispatcherFactory: kotlinx.coroutines.MainCoroutineDispatcher createDispatcher(java.util.List)
com.google.android.material.button.MaterialButton: android.graphics.PorterDuff$Mode getIconTintMode()
com.google.android.material.button.MaterialButton: void setIconTintMode(android.graphics.PorterDuff$Mode)
androidx.appcompat.widget.ViewStubCompat: int getLayoutResource()
androidx.appcompat.widget.AppCompatTextView: void setTextMetricsParamsCompat(androidx.core.text.PrecomputedTextCompat$Params)
com.google.android.material.chip.Chip: void setRippleColorResource(int)
androidx.constraintlayout.helper.widget.Flow: void setFirstVerticalBias(float)
io.flutter.view.TextureRegistry$SurfaceProducer: void release()
androidx.core.graphics.drawable.IconCompat$Api30Impl: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)
androidx.core.widget.NestedScrollView: NestedScrollView(android.content.Context,android.util.AttributeSet)
androidx.core.widget.TextViewCompat$Api23Impl: int getBreakStrategy(android.widget.TextView)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.lang.Boolean lambda$getBooleansStartingWith$1(android.database.Cursor,int)
io.flutter.embedding.engine.FlutterJNI: java.lang.String[] computePlatformResolvedLocale(java.lang.String[])
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void onDetachedFromActivity()
io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$Source: io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$Source[] values()
io.grpc.TlsChannelCredentials$Feature: io.grpc.TlsChannelCredentials$Feature[] values()
androidx.appcompat.widget.AppCompatButton: android.view.ActionMode$Callback getCustomSelectionActionModeCallback()
me.carda.awesome_notifications.core.models.NotificationButtonModel: me.carda.awesome_notifications.core.models.AbstractModel fromMap(java.util.Map)
io.grpc.util.OutlierDetectionLoadBalancerProvider: java.lang.String getPolicyName()
me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType: me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType getSafeEnum(java.lang.String)
me.carda.awesome_notifications.core.AwesomeNotifications: void dispose()
com.google.android.material.bottomappbar.BottomAppBar$Behavior: BottomAppBar$Behavior()
com.google.android.material.textfield.TextInputLayout: void setSuffixText(java.lang.CharSequence)
androidx.lifecycle.ProcessLifecycleOwner$attach$1: void onActivityStopped(android.app.Activity)
com.google.firebase.ktx.FirebaseCommonKtxRegistrar: java.util.List getComponents()
com.google.firestore.admin.v1.Index$IndexField$ArrayConfig: com.google.firestore.admin.v1.Index$IndexField$ArrayConfig[] values()
com.google.firebase.firestore.DocumentSnapshot$ServerTimestampBehavior: com.google.firebase.firestore.DocumentSnapshot$ServerTimestampBehavior valueOf(java.lang.String)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: android.graphics.Matrix getFinalMatrix()
androidx.appcompat.app.AlertController$RecycleListView: AlertController$RecycleListView(android.content.Context,android.util.AttributeSet)
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)
androidx.core.app.NotificationCompat$Builder$Api21Impl: android.media.AudioAttributes$Builder createBuilder()
me.carda.awesome_notifications.core.AwesomeNotifications: void setChannelGroups(android.content.Context,java.util.List)
io.flutter.view.TextureRegistry$SurfaceTextureEntry: long id()
androidx.core.view.ViewCompat$Api26Impl: boolean restoreDefaultFocus(android.view.View)
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver: me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver subscribeOnActionEvents(me.carda.awesome_notifications.core.listeners.AwesomeActionEventListener)
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setGroupKey(me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.models.NotificationChannelModel)
androidx.appcompat.widget.MenuPopupWindow$Api23Impl: void setExitTransition(android.widget.PopupWindow,android.transition.Transition)
me.carda.awesome_notifications.core.managers.ScheduleManager: ScheduleManager()
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Builder setSortKey(android.app.Notification$Builder,java.lang.String)
com.google.gson.internal.bind.TypeAdapters$19: TypeAdapters$19()
com.google.gson.stream.JsonWriter: boolean isTrustedNumberType(java.lang.Class)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: boolean getBoolean(android.content.Context,java.lang.String,java.lang.String,boolean)
androidx.appcompat.widget.LinearLayoutCompat: int getDividerPadding()
me.carda.awesome_notifications.core.models.returnedData.ActionReceived: ActionReceived()
com.google.android.material.internal.NavigationMenuItemView: void setMaxLines(int)
io.grpc.internal.KeepAliveManager$State: io.grpc.internal.KeepAliveManager$State[] values()
me.carda.awesome_notifications.core.managers.RepositoryManager: java.lang.String generateSharedKey(java.lang.String,java.lang.String)
me.carda.awesome_notifications.core.builders.NotificationBuilder: void updateTrackingExtras(me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.models.NotificationChannelModel,android.os.Bundle)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchSemanticsAction(long,int,int,java.nio.ByteBuffer,int)
com.ottobiss.sota.MainActivity: MainActivity()
me.carda.awesome_notifications.core.managers.ChannelManager: boolean androidChannelNeedsForceUpdate(me.carda.awesome_notifications.core.models.NotificationChannelModel,android.app.NotificationChannel)
io.grpc.internal.MessageDeframer$State: io.grpc.internal.MessageDeframer$State valueOf(java.lang.String)
androidx.appcompat.widget.LinearLayoutCompat: void setWeightSum(float)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean access$800(io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer)
me.carda.awesome_notifications.core.models.NotificationCrontabModel: me.carda.awesome_notifications.core.models.NotificationCrontabModel fromMap(java.util.Map)
com.google.android.material.snackbar.Snackbar$SnackbarLayout: void setOnClickListener(android.view.View$OnClickListener)
com.google.gson.internal.bind.TypeAdapters$23: TypeAdapters$23()
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setCategory(me.carda.awesome_notifications.core.models.NotificationModel,androidx.core.app.NotificationCompat$Builder)
androidx.appcompat.widget.ActionBarOverlayLayout: void setShowingForActionMode(boolean)
me.carda.awesome_notifications.core.managers.ChannelManager: java.lang.Boolean removeChannel(android.content.Context,java.lang.String)
androidx.core.app.NotificationCompat$BigPictureStyle$Api23Impl: void setBigLargeIcon(android.app.Notification$BigPictureStyle,android.graphics.drawable.Icon)
me.carda.awesome_notifications.core.enumerators.NotificationImportance: me.carda.awesome_notifications.core.enumerators.NotificationImportance getSafeEnum(java.lang.String)
androidx.appcompat.widget.ActionBarOverlayLayout: int getNestedScrollAxes()
me.carda.awesome_notifications.core.managers.CancellationManager: CancellationManager(me.carda.awesome_notifications.core.utils.StringUtils)
androidx.core.content.ContextCompat$Api24Impl: boolean isDeviceProtectedStorage(android.content.Context)
com.google.firebase.firestore.FirestoreRegistrar: java.util.List getComponents()
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver: void onBroadcastNotificationDismissed(android.content.Context,me.carda.awesome_notifications.core.models.returnedData.ActionReceived)
me.carda.awesome_notifications.core.externalLibs.CronExpression: int skipWhiteSpace(int,java.lang.String)
me.carda.awesome_notifications.core.managers.PermissionManager: void shouldShowRationalePage(android.content.Context,java.lang.String,me.carda.awesome_notifications.core.enumerators.NotificationPermission,java.util.List,me.carda.awesome_notifications.core.completion_handlers.PermissionCompletionHandler)
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setSmallIcon(android.content.Context,me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.models.NotificationChannelModel,androidx.core.app.NotificationCompat$Builder)
androidx.appcompat.widget.Toolbar: void setContentInsetEndWithActions(int)
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode valueOf(java.lang.String)
com.google.android.material.chip.Chip: void setShowMotionSpec(com.google.android.material.animation.MotionSpec)
androidx.appcompat.widget.Toolbar: void setTitleMarginEnd(int)
androidx.appcompat.widget.AppCompatImageButton: android.content.res.ColorStateList getSupportBackgroundTintList()
android.support.v4.media.AudioAttributesImplApi21Parcelizer: void write(androidx.media.AudioAttributesImplApi21,androidx.versionedparcelable.VersionedParcel)
androidx.core.app.JobIntentService: int onStartCommand(android.content.Intent,int,int)
com.google.android.material.internal.CheckableImageButton: void setChecked(boolean)
com.google.firebase.firestore.util.Logger$Level: com.google.firebase.firestore.util.Logger$Level valueOf(java.lang.String)
androidx.appcompat.widget.AppCompatImageButton: android.content.res.ColorStateList getSupportImageTintList()
me.carda.awesome_notifications.core.utils.CalendarUtils: java.util.Calendar getNowCalendar()
me.carda.awesome_notifications.core.managers.ScheduleManager: void cancelSchedulesByGroupKey(android.content.Context,java.lang.String)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodGetNextDate(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.app.NotificationCompatBuilder$Api21Impl: android.app.Notification$Builder addPerson(android.app.Notification$Builder,java.lang.String)
androidx.appcompat.widget.LinearLayoutCompat: int getBaselineAlignedChildIndex()
androidx.appcompat.widget.AppCompatAutoCompleteTextView: android.graphics.PorterDuff$Mode getSupportCompoundDrawablesTintMode()
androidx.core.view.WindowInsetsCompat$Impl: int hashCode()
me.carda.awesome_notifications.core.enumerators.NotificationImportance: me.carda.awesome_notifications.core.enumerators.NotificationImportance fromAndroidPriority(int)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void updateTexImage()
me.carda.awesome_notifications.core.completion_handlers.NotificationThreadCompletionHandler: void handle(boolean,me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException)
me.carda.awesome_notifications.core.utils.BitmapUtils: me.carda.awesome_notifications.core.utils.BitmapUtils getInstance()
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelShowAlarmPage(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
android.support.v4.media.session.PlaybackStateCompat$Api21Impl: int getIcon(android.media.session.PlaybackState$CustomAction)
me.carda.awesome_notifications.core.managers.CreatedManager: me.carda.awesome_notifications.core.managers.CreatedManager getInstance()
com.google.android.material.chip.Chip: float getCloseIconSize()
com.google.android.material.internal.ClippableRoundedCornerLayout: float getCornerRadius()
androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag[] values()
com.google.android.material.chip.Chip: void setChipIconEnabled(boolean)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmojiModifierBase(int)
me.carda.awesome_notifications.core.managers.CreatedManager: boolean commitChanges(android.content.Context)
me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour: me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour getSafeEnum(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void nativeInvokePlatformMessageEmptyResponseCallback(long,int)
android.support.v4.media.MediaDescriptionCompat$Api21Impl: java.lang.CharSequence getDescription(android.media.MediaDescription)
androidx.appcompat.widget.DropDownListView: void setListSelectionHidden(boolean)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: int booleanCount(android.content.Context,java.lang.String)
me.carda.awesome_notifications.core.utils.SerializableUtils: java.lang.Object serializeTimeZone(java.util.TimeZone)
me.carda.awesome_notifications.core.managers.RepositoryManager: void commitAsync(java.lang.String,android.content.SharedPreferences$Editor)
me.carda.awesome_notifications.core.models.AbstractModel: java.util.Calendar getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,java.util.Calendar)
me.carda.awesome_notifications.core.enumerators.ActionType: ActionType(java.lang.String,int,java.lang.String)
com.google.android.material.chip.Chip: void setChipBackgroundColor(android.content.res.ColorStateList)
com.google.firebase.firestore.Query$Direction: com.google.firebase.firestore.Query$Direction valueOf(java.lang.String)
me.carda.awesome_notifications.core.models.NotificationModel: java.lang.String toJson()
com.google.firestore.v1.StructuredQuery$Filter$FilterTypeCase: com.google.firestore.v1.StructuredQuery$Filter$FilterTypeCase[] values()
me.carda.awesome_notifications.core.models.DefaultsModel: void validate(android.content.Context)
io.flutter.embedding.engine.FlutterJNI: void asyncWaitForVsync(long)
androidx.appcompat.view.menu.ListMenuItemView: void setChecked(boolean)
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeExceptionReceiver: me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeExceptionReceiver getInstance()
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.util.Map getAllStringValues(android.content.Context,java.lang.String)
me.carda.awesome_notifications.core.models.AbstractModel: me.carda.awesome_notifications.core.enumerators.MediaSource getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,me.carda.awesome_notifications.core.enumerators.MediaSource)
com.google.android.material.textfield.TextInputLayout: void setEndIconMode(int)
me.carda.awesome_notifications.core.enumerators.NotificationPermission: me.carda.awesome_notifications.core.enumerators.NotificationPermission[] $values()
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api33Impl: androidx.core.view.accessibility.AccessibilityNodeInfoCompat$CollectionItemInfoCompat buildCollectionItemInfoCompat(boolean,int,int,int,int,boolean,java.lang.String,java.lang.String)
androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact: androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact valueOf(java.lang.String)
androidx.appcompat.widget.Toolbar: void setNavigationIcon(android.graphics.drawable.Drawable)
me.carda.awesome_notifications.core.AwesomeNotifications: java.util.List shouldShowRationale(java.lang.String,java.util.List)
me.carda.awesome_notifications.core.builders.NotificationBuilder: android.app.PendingIntent getPendingDismissIntent(android.content.Context,android.content.Intent,me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.models.NotificationChannelModel)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: android.database.sqlite.SQLiteDatabase getReadableDatabase(android.content.Context)
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Action build(android.app.Notification$Action$Builder)
androidx.core.view.ViewCompat$Api20Impl: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)
me.carda.awesome_notifications.core.utils.CalendarUtils: java.lang.String getNowStringCalendar()
io.flutter.plugin.platform.PlatformViewWrapper: void setLayoutParams(android.widget.FrameLayout$LayoutParams)
androidx.window.area.reflectionguard.WindowAreaComponentApi2Requirements: void endRearDisplaySession()
androidx.appcompat.view.menu.ActionMenuItemView: void setChecked(boolean)
com.google.protobuf.JavaType: com.google.protobuf.JavaType[] values()
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setSummary(me.carda.awesome_notifications.core.models.NotificationModel,androidx.core.app.NotificationCompat$Builder)
androidx.core.view.WindowInsetsCompat$Impl30: WindowInsetsCompat$Impl30(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
com.google.firebase.firestore.remote.ConnectivityMonitor$NetworkStatus: com.google.firebase.firestore.remote.ConnectivityMonitor$NetworkStatus valueOf(java.lang.String)
me.carda.awesome_notifications.core.utils.CalendarUtils: me.carda.awesome_notifications.core.utils.CalendarUtils getInstance()
me.carda.awesome_notifications.core.AwesomeNotifications: java.util.Collection getAllActiveNotificationIdsOnStatusBar()
me.carda.awesome_notifications.core.models.NotificationCalendarModel: NotificationCalendarModel()
androidx.appcompat.widget.Toolbar: void setLogo(int)
androidx.core.view.WindowInsetsCompat$Impl: void copyWindowDataInto(androidx.core.view.WindowInsetsCompat)
me.carda.awesome_notifications.core.AwesomeNotifications: void notifyNotificationEvent(java.lang.String,me.carda.awesome_notifications.core.models.returnedData.NotificationReceived)
androidx.appcompat.widget.AppCompatTextView: int getFirstBaselineToTopHeight()
me.carda.awesome_notifications.core.threads.NotificationScheduler: void refreshScheduledNotifications(android.content.Context)
io.flutter.embedding.engine.FlutterJNI: boolean getIsSoftwareRenderingEnabled()
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver: void onBroadcastNotificationCreated(android.content.Context,me.carda.awesome_notifications.core.models.returnedData.NotificationReceived)
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setRemoteHistory(me.carda.awesome_notifications.core.models.NotificationModel,androidx.core.app.NotificationCompat$Builder)
me.carda.awesome_notifications.core.utils.BitmapUtils: android.graphics.Bitmap getBitmapFromAsset(android.content.Context,java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void onFirstFrame()
androidx.appcompat.view.menu.ListMenuItemView: android.view.LayoutInflater getInflater()
androidx.appcompat.widget.AppCompatButton: android.graphics.PorterDuff$Mode getSupportCompoundDrawablesTintMode()
com.google.android.material.button.MaterialButtonToggleGroup: void setSelectionRequired(boolean)
androidx.core.view.ViewCompat$Api21Impl: float getZ(android.view.View)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter jsonValue(java.lang.String)
me.carda.awesome_notifications.core.managers.BadgeManager: int getGlobalBadgeCounter(android.content.Context)
androidx.core.content.res.ResourcesCompat$Api23Impl: int getColor(android.content.res.Resources,int,android.content.res.Resources$Theme)
androidx.core.os.ConfigurationCompat$Api24Impl: void setLocales(android.content.res.Configuration,androidx.core.os.LocaleListCompat)
io.grpc.okhttp.OkHttpFrameLogger$Direction: io.grpc.okhttp.OkHttpFrameLogger$Direction valueOf(java.lang.String)
me.carda.awesome_notifications.core.models.returnedData.ActionReceived: void registerDismissedEvent(me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle)
me.carda.awesome_notifications.core.R: R()
androidx.transition.ObjectAnimatorUtils$Api21Impl: android.animation.ObjectAnimator ofObject(java.lang.Object,android.util.Property,android.graphics.Path)
androidx.core.widget.ImageViewCompat$Api21Impl: void setImageTintMode(android.widget.ImageView,android.graphics.PorterDuff$Mode)
com.google.android.material.textfield.TextInputLayout: android.content.res.ColorStateList getSuffixTextColor()
androidx.appcompat.widget.ActionBarContextView: ActionBarContextView(android.content.Context,android.util.AttributeSet)
me.carda.awesome_notifications.core.models.NotificationCalendarModel: java.util.Map toMap()
me.carda.awesome_notifications.core.AwesomeNotifications: void onNewActionReceived(java.lang.String,me.carda.awesome_notifications.core.models.returnedData.ActionReceived)
me.carda.awesome_notifications.core.enumerators.NotificationPlayState: me.carda.awesome_notifications.core.enumerators.NotificationPlayState fromMap(java.lang.Object)
com.google.android.material.textfield.TextInputLayout: void setEditText(android.widget.EditText)
android.support.v4.media.MediaDescriptionCompat$Api21Impl: java.lang.CharSequence getTitle(android.media.MediaDescription)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceDestroyed()
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceCreated(long,android.view.Surface)
com.google.android.material.chip.Chip: android.graphics.drawable.Drawable getCheckedIcon()
com.google.android.material.textfield.TextInputLayout: void setEndIconOnLongClickListener(android.view.View$OnLongClickListener)
androidx.core.app.NotificationCompatBuilder$Api31Impl: android.app.Notification$Action$Builder setAuthenticationRequired(android.app.Notification$Action$Builder,boolean)
androidx.media.app.NotificationCompat$Api21Impl: void setMediaSession(android.app.Notification$MediaStyle,android.media.session.MediaSession$Token)
com.google.firestore.v1.TargetChange$TargetChangeType: com.google.firestore.v1.TargetChange$TargetChangeType[] values()
com.google.gson.internal.bind.TypeAdapters$16: TypeAdapters$16()
me.carda.awesome_notifications.AwesomeNotificationsFlutterExtension: AwesomeNotificationsFlutterExtension()
com.google.gson.stream.JsonReader: double nextDouble()
me.carda.awesome_notifications.core.models.NotificationModel: java.util.Map extractNotificationLocalizations(java.util.Map)
com.google.android.material.textfield.TextInputLayout: int getMaxWidth()
androidx.appcompat.widget.LinearLayoutCompat: void setVerticalGravity(int)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostCreated(android.app.Activity,android.os.Bundle)
androidx.appcompat.widget.ListPopupWindow$Api24Impl: int getMaxAvailableHeight(android.widget.PopupWindow,android.view.View,int,boolean)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: boolean canApplyTheme(android.graphics.drawable.Drawable)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: android.graphics.ColorFilter getColorFilter(android.graphics.drawable.Drawable)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$102(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean)
androidx.core.app.RemoteInput$Api20Impl: android.os.Bundle getResultsFromIntent(android.content.Intent)
me.carda.awesome_notifications.core.models.AbstractModel: java.lang.Integer getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,java.lang.Integer)
com.google.android.material.textfield.TextInputLayout: float getBoxCornerRadiusBottomEnd()
com.google.android.material.snackbar.Snackbar$SnackbarLayout: void setLayoutParams(android.view.ViewGroup$LayoutParams)
io.flutter.embedding.engine.FlutterJNI: void addIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
androidx.appcompat.widget.AppCompatButton: void setBackgroundResource(int)
io.flutter.embedding.android.KeyData$DeviceType: io.flutter.embedding.android.KeyData$DeviceType valueOf(java.lang.String)
androidx.appcompat.widget.AppCompatTextView: androidx.appcompat.widget.AppCompatEmojiTextHelper getEmojiTextViewHelper()
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: androidx.lifecycle.Lifecycle getLifecycle()
me.carda.awesome_notifications.core.models.NotificationMessageModel: NotificationMessageModel(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
com.google.android.material.textfield.TextInputLayout: void setErrorIconOnClickListener(android.view.View$OnClickListener)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: void setAllBooleanValues(android.content.Context,java.lang.String,java.util.Map)
me.carda.awesome_notifications.core.managers.DefaultsManager: void saveDefault(android.content.Context,me.carda.awesome_notifications.core.models.DefaultsModel)
androidx.recyclerview.widget.RecyclerView: void setLayoutTransition(android.animation.LayoutTransition)
com.google.firestore.v1.DocumentTransform$FieldTransform$ServerValue: com.google.firestore.v1.DocumentTransform$FieldTransform$ServerValue valueOf(java.lang.String)
me.carda.awesome_notifications.core.managers.ScheduleManager: android.app.AlarmManager getAlarmManager(android.content.Context)
me.carda.awesome_notifications.DartScheduledNotificationReceiver: DartScheduledNotificationReceiver()
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: void removeFloat(android.content.Context,java.lang.String,java.lang.String)
io.grpc.okhttp.OkHttpChannelProvider: int priority()
androidx.core.view.WindowInsetsCompat$BuilderImpl30: void setInsets(int,androidx.core.graphics.Insets)
com.google.firebase.database.collection.LLRBNode$Color: com.google.firebase.database.collection.LLRBNode$Color[] values()
me.carda.awesome_notifications.FlutterBitmapUtils: android.graphics.Bitmap getBitmapFromAsset(android.content.Context,java.lang.String)
me.carda.awesome_notifications.core.threads.NotificationThread: void execute(me.carda.awesome_notifications.core.models.NotificationModel)
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityCreated(android.app.Activity,android.os.Bundle)
com.google.firestore.v1.ListenResponse$ResponseTypeCase: com.google.firestore.v1.ListenResponse$ResponseTypeCase[] values()
me.carda.awesome_notifications.core.builders.NotificationBuilder: androidx.core.app.NotificationCompat$Builder getNotificationBuilderFromModel(android.content.Context,android.content.Intent,me.carda.awesome_notifications.core.models.NotificationChannelModel,me.carda.awesome_notifications.core.models.NotificationModel)
androidx.constraintlayout.widget.ConstraintHelper: void setReferencedIds(int[])
com.google.android.material.chip.Chip: android.content.res.ColorStateList getCloseIconTint()
com.google.android.material.chip.Chip: void setBackgroundTintList(android.content.res.ColorStateList)
me.carda.awesome_notifications.core.managers.ChannelManager: void setAndroidChannel(android.content.Context,me.carda.awesome_notifications.core.models.NotificationChannelModel,boolean)
me.carda.awesome_notifications.core.managers.PermissionManager: java.util.List shouldShowRationale(android.content.Context,java.lang.String,java.util.List)
com.google.android.gms.common.api.internal.zzd: zzd()
com.google.gson.internal.bind.TypeAdapters$7: TypeAdapters$7()
me.carda.awesome_notifications.core.services.ForegroundService: android.os.IBinder onBind(android.content.Intent)
com.google.android.material.button.MaterialButtonToggleGroup: int getLastVisibleChildIndex()
androidx.media.app.NotificationCompat$Api21Impl: void setShowActionsInCompactView(android.app.Notification$MediaStyle,int[])
androidx.core.view.WindowInsetsCompat$BuilderImpl29: WindowInsetsCompat$BuilderImpl29()
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness[] values()
io.flutter.embedding.engine.FlutterOverlaySurface: int getId()
androidx.core.app.RemoteInput$Api26Impl: java.util.Map getDataResultsFromIntent(android.content.Intent,java.lang.String)
me.carda.awesome_notifications.core.managers.DefaultsManager: boolean setCreatedCallbackDispatcher(android.content.Context,java.lang.Long)
com.google.gson.stream.JsonWriter: void writeDeferredName()
me.carda.awesome_notifications.core.managers.LifeCycleManager: void onResumed()
me.carda.awesome_notifications.core.enumerators.GroupSort: java.lang.String getSafeName()
com.google.android.material.textfield.TextInputLayout: void setError(java.lang.CharSequence)
com.google.gson.stream.JsonReader: java.lang.String getPreviousPath()
me.carda.awesome_notifications.core.models.NotificationCalendarModel: me.carda.awesome_notifications.core.models.NotificationCalendarModel fromMap(java.util.Map)
androidx.appcompat.widget.AppCompatButton: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
com.google.android.material.textfield.TextInputLayout: void setBoxStrokeWidthFocusedResource(int)
me.carda.awesome_notifications.core.AwesomeNotifications: void setGlobalBadgeCounter(java.lang.Integer)
com.google.android.material.timepicker.ChipTextInputComboView: ChipTextInputComboView(android.content.Context,android.util.AttributeSet)
com.google.android.material.snackbar.Snackbar$SnackbarLayout: void setBackgroundTintMode(android.graphics.PorterDuff$Mode)
me.carda.awesome_notifications.core.utils.CronUtils: CronUtils()
me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType: DefaultRingtoneType(java.lang.String,int,java.lang.String)
com.google.gson.stream.JsonReader: boolean nextBoolean()
com.google.firebase.firestore.Source: com.google.firebase.firestore.Source valueOf(java.lang.String)
com.google.gson.stream.JsonWriter: JsonWriter(java.io.Writer)
me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour: me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour[] values()
me.carda.awesome_notifications.core.AwesomeNotifications: boolean removeChannel(java.lang.String)
me.carda.awesome_notifications.DartBackgroundExecutor: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
me.carda.awesome_notifications.core.broadcasters.receivers.DismissedNotificationReceiver: DismissedNotificationReceiver()
androidx.appcompat.widget.ViewStubCompat: void setOnInflateListener(androidx.appcompat.widget.ViewStubCompat$OnInflateListener)
com.google.gson.stream.JsonWriter: void string(java.lang.String)
com.google.android.material.appbar.MaterialToolbar: void setLogoScaleType(android.widget.ImageView$ScaleType)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization[] values()
me.carda.awesome_notifications.core.broadcasters.receivers.RefreshSchedulesReceiver: RefreshSchedulesReceiver()
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo convertToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,int,android.view.View)
me.carda.awesome_notifications.core.managers.StatusBarManager: android.app.Notification getAndroidNotificationById(android.content.Context,int)
androidx.appcompat.widget.ActionBarOverlayLayout: void setActionBarVisibilityCallback(androidx.appcompat.widget.ActionBarOverlayLayout$ActionBarVisibilityCallback)
androidx.appcompat.widget.SearchView$Api29Impl: void setInputMethodMode(androidx.appcompat.widget.SearchView$SearchAutoComplete,int)
me.carda.awesome_notifications.core.enumerators.LogLevel: java.lang.String getSafeName()
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api33Impl: java.lang.String getCollectionItemRowTitle(java.lang.Object)
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType valueOf(java.lang.String)
me.carda.awesome_notifications.core.managers.LostEventsManager: java.util.Map recoverNotificationsDismissed(android.content.Context)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodGetBadgeCounter(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState: io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState[] values()
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver: boolean isEmpty()
com.google.android.material.button.MaterialButton: int getTextLayoutWidth()
androidx.core.view.ViewCompat$Api21Impl: androidx.core.view.WindowInsetsCompat computeSystemWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat,android.graphics.Rect)
me.carda.awesome_notifications.core.managers.DefaultsManager: java.lang.String getAwesomeExtensionClassName(android.content.Context)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType valueOf(java.lang.String)
androidx.core.view.animation.PathInterpolatorCompat$Api21Impl: android.view.animation.Interpolator createPathInterpolator(float,float,float,float)
com.google.firestore.admin.v1.Index$IndexField$Order: com.google.firestore.admin.v1.Index$IndexField$Order[] values()
com.google.gson.stream.JsonReader: java.lang.String nextUnquotedValue()
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType[] values()
com.google.android.material.button.MaterialButtonToggleGroup: void setSingleSelection(int)
com.google.gson.internal.bind.TypeAdapters$24: TypeAdapters$24()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostStarted(android.app.Activity)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: io.flutter.plugin.common.MethodChannel access$000(me.carda.awesome_notifications.AwesomeNotificationsPlugin)
com.google.android.material.textfield.TextInputLayout: android.content.res.ColorStateList getPrefixTextColor()
androidx.core.view.MenuItemCompat$Api26Impl: android.view.MenuItem setTooltipText(android.view.MenuItem,java.lang.CharSequence)
me.carda.awesome_notifications.core.models.NotificationCalendarModel: java.util.Calendar getNextValidDate(java.util.Calendar)
androidx.appcompat.widget.AppCompatImageView: android.content.res.ColorStateList getSupportBackgroundTintList()
me.carda.awesome_notifications.core.broadcasters.receivers.ScheduledNotificationReceiver: ScheduledNotificationReceiver()
android.support.v4.media.session.PlaybackStateCompat$Api22Impl: void setExtras(android.media.session.PlaybackState$Builder,android.os.Bundle)
me.carda.awesome_notifications.core.enumerators.ActionType: me.carda.awesome_notifications.core.enumerators.ActionType valueOf(java.lang.String)
com.google.gson.internal.bind.TypeAdapters$2: TypeAdapters$2()
androidx.constraintlayout.widget.Barrier: void setMargin(int)
androidx.core.app.NotificationCompatBuilder$Api26Impl: android.app.Notification$Builder setShortcutId(android.app.Notification$Builder,java.lang.String)
io.flutter.view.AccessibilityViewEmbedder: android.view.View platformViewOfNode(int)
me.carda.awesome_notifications.core.builders.NotificationBuilder: android.content.Intent buildNotificationIntentFromActionModel(android.content.Context,android.content.Intent,java.lang.String,me.carda.awesome_notifications.core.models.returnedData.ActionReceived,java.lang.Class)
io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$Source: io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$Source valueOf(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void setSize(int,int)
com.google.gson.stream.MalformedJsonException: MalformedJsonException(java.lang.String,java.lang.Throwable)
com.google.firebase.firestore.core.ActivityScope$StopListenerFragment: ActivityScope$StopListenerFragment()
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: int countRows(android.content.Context,java.lang.String,java.lang.String)
me.carda.awesome_notifications.core.models.NotificationCrontabModel: me.carda.awesome_notifications.core.models.NotificationScheduleModel fromMap(java.util.Map)
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Action$Builder createBuilder(int,java.lang.CharSequence,android.app.PendingIntent)
io.flutter.view.FlutterCallbackInformation: FlutterCallbackInformation(java.lang.String,java.lang.String,java.lang.String)
androidx.constraintlayout.widget.ConstraintLayout: ConstraintLayout(android.content.Context,android.util.AttributeSet)
com.google.gson.stream.JsonReader: java.lang.String getPath(boolean)
com.google.android.material.textfield.TextInputLayout: void setErrorTextAppearance(int)
com.google.android.material.textfield.TextInputLayout: int getMaxEms()
me.carda.awesome_notifications.core.managers.PermissionManager: boolean isDndOverrideAllowed(android.content.Context)
com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior: AppBarLayout$ScrollingViewBehavior(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointVariantSelector(int)
kotlinx.coroutines.selects.TrySelectDetailedResult: kotlinx.coroutines.selects.TrySelectDetailedResult valueOf(java.lang.String)
androidx.appcompat.widget.AppCompatButton: void setAutoSizeTextTypeWithDefaults(int)
androidx.appcompat.widget.AppCompatEditText: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
me.carda.awesome_notifications.core.threads.NotificationScheduler: void scheduleNotificationWithAlarmManager(android.content.Context,me.carda.awesome_notifications.core.models.NotificationModel,java.util.Calendar,android.app.PendingIntent)
com.google.android.material.chip.Chip: void setCloseIconTintResource(int)
androidx.appcompat.widget.ActionBarOverlayLayout: void setActionBarHideOffset(int)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void releaseInternal()
com.google.android.material.snackbar.Snackbar$SnackbarLayout: void setBackground(android.graphics.drawable.Drawable)
io.flutter.embedding.engine.FlutterJNI: void nativeMarkTextureFrameAvailable(long,long)
androidx.core.graphics.PaintCompat$Api23Impl: boolean hasGlyph(android.graphics.Paint,java.lang.String)
com.google.firebase.firestore.ListenSource: com.google.firebase.firestore.ListenSource[] values()
androidx.core.app.NotificationCompatBuilder$Api21Impl: android.app.Notification$Builder setCategory(android.app.Notification$Builder,java.lang.String)
com.google.android.material.button.MaterialButton: android.content.res.ColorStateList getBackgroundTintList()
androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type: androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type valueOf(java.lang.String)
com.google.firebase.firestore.model.FieldIndex$Segment$Kind: com.google.firebase.firestore.model.FieldIndex$Segment$Kind[] values()
androidx.appcompat.widget.LinearLayoutCompat: int getVirtualChildCount()
com.google.firestore.v1.Precondition$ConditionTypeCase: com.google.firestore.v1.Precondition$ConditionTypeCase[] values()
androidx.appcompat.widget.ViewStubCompat: ViewStubCompat(android.content.Context,android.util.AttributeSet)
com.google.android.material.internal.CheckableImageButton: void setCheckable(boolean)
com.google.android.material.chip.Chip: void setChipEndPadding(float)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: void removeAllFloat(android.content.Context,java.lang.String)
com.google.android.material.textfield.TextInputLayout: void setStartIconTintMode(android.graphics.PorterDuff$Mode)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType[] values()
me.carda.awesome_notifications.core.enumerators.NotificationPrivacy: me.carda.awesome_notifications.core.enumerators.NotificationPrivacy valueOf(java.lang.String)
com.google.android.material.chip.Chip: void setChipDrawable(com.google.android.material.chip.ChipDrawable)
com.google.android.material.chip.Chip: void setLayoutDirection(int)
com.google.android.material.chip.Chip: void setCloseIconStartPaddingResource(int)
androidx.appcompat.widget.AppCompatImageView: void setImageBitmap(android.graphics.Bitmap)
android.support.v4.media.MediaDescriptionCompat$Api21Impl: void setMediaId(android.media.MediaDescription$Builder,java.lang.String)
me.carda.awesome_notifications.core.threads.NotificationSender: NotificationSender(android.content.Context,me.carda.awesome_notifications.core.utils.StringUtils,me.carda.awesome_notifications.core.builders.NotificationBuilder,me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle,me.carda.awesome_notifications.core.enumerators.NotificationSource,me.carda.awesome_notifications.core.models.NotificationModel,android.content.Intent,me.carda.awesome_notifications.core.completion_handlers.NotificationThreadCompletionHandler)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushTransform(float[])
me.carda.awesome_notifications.core.managers.DefaultsManager: DefaultsManager(android.content.Context)
androidx.core.view.ViewCompat$Api30Impl: boolean isImportantForContentCapture(android.view.View)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmoji(int)
com.google.android.material.internal.NavigationMenuItemView: void setIconSize(int)
io.flutter.embedding.engine.FlutterJNI: void updateRefreshRate()
com.google.android.material.textfield.TextInputLayout: android.widget.ImageView$ScaleType getStartIconScaleType()
androidx.appcompat.widget.ActionBarOverlayLayout: void setWindowTitle(java.lang.CharSequence)
androidx.core.view.ViewCompat$Api21Impl: void callCompatInsetAnimationCallback(android.view.WindowInsets,android.view.View)
me.carda.awesome_notifications.core.enumerators.NotificationLayout: me.carda.awesome_notifications.core.enumerators.NotificationLayout[] values()
me.carda.awesome_notifications.core.exceptions.ExceptionFactory: me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException createNewAwesomeException(java.lang.String,me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException)
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver: me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver unsubscribeOnActionEvents(me.carda.awesome_notifications.core.listeners.AwesomeActionEventListener)
com.google.firebase.firestore.core.Query$LimitType: com.google.firebase.firestore.core.Query$LimitType valueOf(java.lang.String)
androidx.appcompat.widget.AppCompatTextView: int getAutoSizeMaxTextSize()
io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$ServerTimestampBehavior: io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$ServerTimestampBehavior[] values()
android.support.v4.media.session.PlaybackStateCompat$Api21Impl: long getActiveQueueItemId(android.media.session.PlaybackState)
me.carda.awesome_notifications.core.models.NotificationModel: me.carda.awesome_notifications.core.models.NotificationModel fromJson(java.lang.String)
com.google.gson.stream.JsonWriter: void setIndent(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void registerImageTexture(long,io.flutter.view.TextureRegistry$ImageConsumer)
me.carda.awesome_notifications.core.models.NotificationScheduleModel: java.util.Map toMap()
me.carda.awesome_notifications.core.managers.ChannelManager: boolean isChannelEnabled(android.content.Context,java.lang.String)
com.google.android.material.floatingactionbutton.FloatingActionButton$BaseBehavior: FloatingActionButton$BaseBehavior(android.content.Context,android.util.AttributeSet)
android.support.v4.media.session.PlaybackStateCompat$Api21Impl: int getState(android.media.session.PlaybackState)
androidx.core.widget.NestedScrollView: float getBottomFadingEdgeStrength()
me.carda.awesome_notifications.core.models.returnedData.NotificationReceived: me.carda.awesome_notifications.core.models.returnedData.NotificationReceived fromMap(java.util.Map)
com.google.firebase.firestore.local.QueryPurpose: com.google.firebase.firestore.local.QueryPurpose[] values()
com.google.android.material.chip.Chip: android.graphics.drawable.Drawable getChipDrawable()
androidx.activity.Api34Impl: android.window.BackEvent createOnBackEvent(float,float,float,int)
com.google.firestore.v1.StructuredQuery$CompositeFilter$Operator: com.google.firestore.v1.StructuredQuery$CompositeFilter$Operator[] values()
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.util.Map getIntsStartingWith(android.content.Context,java.lang.String,java.lang.String)
me.carda.awesome_notifications.core.managers.LifeCycleManager: void onCreated()
me.carda.awesome_notifications.core.AwesomeNotifications: me.carda.awesome_notifications.core.AwesomeNotifications unsubscribeOnNotificationEvents(me.carda.awesome_notifications.core.listeners.AwesomeNotificationEventListener)
com.google.android.material.textfield.TextInputLayout: void setStartIconMinSize(int)
me.carda.awesome_notifications.core.AwesomeNotifications: boolean captureNotificationActionFromActivity(android.app.Activity)
androidx.appcompat.widget.AppCompatButton: int getAutoSizeMinTextSize()
com.google.android.material.button.MaterialButton: void setCornerRadius(int)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImageReader getActiveReader()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setScaleY(float)
androidx.appcompat.widget.Toolbar: void setLogo(android.graphics.drawable.Drawable)
me.carda.awesome_notifications.core.decoders.BitmapResourceDecoder: void whenComplete(java.lang.Object,me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException)
me.carda.awesome_notifications.core.broadcasters.senders.BroadcastSender: void enqueueSilentBackgroundAction(android.content.Context,java.lang.String,me.carda.awesome_notifications.core.models.returnedData.ActionReceived,android.content.Intent)
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityResumed(android.app.Activity)
me.carda.awesome_notifications.core.utils.BitmapUtils: int getDrawableResourceId(android.content.Context,java.lang.String)
androidx.core.view.ViewCompat$Api21Impl: void setElevation(android.view.View,float)
me.carda.awesome_notifications.core.decoders.BitmapResourceDecoder: BitmapResourceDecoder(android.content.Context,java.lang.String,me.carda.awesome_notifications.core.completion_handlers.BitmapCompletionHandler)
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()
me.carda.awesome_notifications.core.managers.PermissionManager: boolean gotoAndroidAppNotificationPage(android.content.Context)
android.support.v4.media.MediaDescriptionCompat$Api21Impl: void setDescription(android.media.MediaDescription$Builder,java.lang.CharSequence)
androidx.core.view.ViewCompat$Api20Impl: void requestApplyInsets(android.view.View)
me.carda.awesome_notifications.core.models.NotificationChannelGroupModel: NotificationChannelGroupModel()
androidx.core.app.JobIntentService: boolean isStopped()
com.google.android.material.button.MaterialButton: android.content.res.ColorStateList getSupportBackgroundTintList()
androidx.core.view.WindowInsetsCompat$Impl28: WindowInsetsCompat$Impl28(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
me.carda.awesome_notifications.core.utils.CalendarUtils: java.util.Calendar getCurrentCalendar(java.lang.String)
androidx.transition.ViewUtilsApi21$Api29Impl: void setAnimationMatrix(android.view.View,android.graphics.Matrix)
me.carda.awesome_notifications.core.utils.BooleanUtils: boolean getValueOrDefault(java.lang.Boolean,java.lang.Boolean)
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setLargeIcon(android.content.Context,me.carda.awesome_notifications.core.models.NotificationModel,androidx.core.app.NotificationCompat$Builder)
com.google.protobuf.FieldType: com.google.protobuf.FieldType valueOf(java.lang.String)
com.google.protobuf.WireFormat$FieldType: com.google.protobuf.WireFormat$FieldType[] values()
me.carda.awesome_notifications.core.models.NotificationContentModel: java.util.List mapToMessages(java.util.List)
io.flutter.embedding.engine.FlutterJNI: void setPlatformMessageHandler(io.flutter.embedding.engine.dart.PlatformMessageHandler)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api33Impl: boolean isTextSelectable(android.view.accessibility.AccessibilityNodeInfo)
me.carda.awesome_notifications.core.AwesomeNotifications: void getDrawableData(java.lang.String,me.carda.awesome_notifications.core.completion_handlers.BitmapCompletionHandler)
io.grpc.internal.GrpcUtil$Http2Error: io.grpc.internal.GrpcUtil$Http2Error[] values()
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.util.Map getAllIntValues(android.content.Context,java.lang.String)
com.google.android.material.chip.Chip: void setChipTextResource(int)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: int getFillColor()
com.google.android.material.textfield.TextInputLayout: float getBoxCornerRadiusBottomStart()
com.google.android.material.transformation.FabTransformationSheetBehavior: FabTransformationSheetBehavior(android.content.Context,android.util.AttributeSet)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.content.ContextCompat$Api21Impl: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)
me.carda.awesome_notifications.core.completion_handlers.BitmapCompletionHandler: void handle(byte[],me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException)
com.google.android.material.chip.Chip: void setChipBackgroundColorResource(int)
com.google.android.material.button.MaterialButton: void setBackgroundDrawable(android.graphics.drawable.Drawable)
androidx.core.app.RemoteInput$Api20Impl: void addResultsToIntent(java.lang.Object,android.content.Intent,android.os.Bundle)
me.carda.awesome_notifications.core.threads.NotificationScheduler: java.util.Calendar onPostExecute(java.util.Calendar)
me.carda.awesome_notifications.core.managers.RepositoryManager: RepositoryManager(me.carda.awesome_notifications.core.utils.StringUtils,java.lang.String,java.lang.Class,java.lang.String)
me.carda.awesome_notifications.core.managers.LostEventsManager: LostEventsManager()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: androidx.core.graphics.PathParser$PathDataNode[] getPathData()
androidx.media.app.NotificationCompat$Api21Impl: android.app.Notification$MediaStyle createMediaStyle()
androidx.core.view.ViewCompat$Api29Impl: android.view.View$AccessibilityDelegate getAccessibilityDelegate(android.view.View)
androidx.appcompat.widget.LinearLayoutCompat: int getGravity()
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: void removeScheduleById(android.content.Context,java.lang.Integer)
androidx.appcompat.widget.Toolbar: int getTitleMarginEnd()
com.google.android.material.textfield.TextInputLayout: float getHintCollapsedTextHeight()
com.google.gson.internal.bind.ArrayTypeAdapter$1: ArrayTypeAdapter$1()
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setProgressLayout(me.carda.awesome_notifications.core.models.NotificationModel,androidx.core.app.NotificationCompat$Builder)
com.google.android.material.drawable.DrawableUtils$OutlineCompatL: void setConvexPath(android.graphics.Outline,android.graphics.Path)
me.carda.awesome_notifications.core.services.ForegroundService: void startNewForegroundService(android.content.Context,me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.enumerators.ForegroundStartMode,me.carda.awesome_notifications.core.enumerators.ForegroundServiceType)
com.google.android.material.datepicker.MaterialCalendarGridView: MaterialCalendarGridView(android.content.Context,android.util.AttributeSet)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api34Impl: void setAccessibilityDataSensitive(android.view.accessibility.AccessibilityNodeInfo,boolean)
androidx.core.view.ViewCompat$Api26Impl: boolean isKeyboardNavigationCluster(android.view.View)
android.support.v4.media.session.PlaybackStateCompat$Api21Impl: void setExtras(android.media.session.PlaybackState$CustomAction$Builder,android.os.Bundle)
com.google.gson.internal.bind.TypeAdapters$17: TypeAdapters$17()
me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour: java.lang.String getSafeName()
me.carda.awesome_notifications.core.managers.CreatedManager: java.util.List listCreated(android.content.Context)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: void removeAllInt(android.content.Context,java.lang.String)
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeBroadcastReceiver: AwesomeBroadcastReceiver()
me.carda.awesome_notifications.core.AwesomeNotifications: java.util.List arePermissionsAllowed(java.lang.String,java.util.List)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api34Impl: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction getActionScrollInDirection()
androidx.appcompat.widget.LinearLayoutCompat: void setDividerDrawable(android.graphics.drawable.Drawable)
com.google.firestore.v1.StructuredQuery$UnaryFilter$Operator: com.google.firestore.v1.StructuredQuery$UnaryFilter$Operator[] values()
me.carda.awesome_notifications.core.models.NotificationLocalizationModel: me.carda.awesome_notifications.core.models.NotificationLocalizationModel fromMap(java.util.Map)
me.carda.awesome_notifications.core.managers.SharedManager: void commitAsync(java.lang.String,android.content.SharedPreferences$Editor)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api34Impl: java.lang.CharSequence getContainerTitle(android.view.accessibility.AccessibilityNodeInfo)
me.carda.awesome_notifications.core.models.NotificationContentModel: me.carda.awesome_notifications.core.models.NotificationContentModel fromMap(java.util.Map)
me.carda.awesome_notifications.core.managers.ChannelManager: me.carda.awesome_notifications.core.models.NotificationChannelModel getChannelByKey(android.content.Context,java.lang.String)
com.google.android.material.chip.Chip: void setCheckedIconEnabledResource(int)
androidx.appcompat.widget.Toolbar: int getContentInsetEnd()
androidx.core.view.ViewCompat$Api28Impl: void setAccessibilityPaneTitle(android.view.View,java.lang.CharSequence)
androidx.window.layout.adapter.sidecar.SidecarCompat$TranslatingCallback: void onWindowLayoutChanged(android.os.IBinder,androidx.window.sidecar.SidecarWindowLayoutInfo)
io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$ServerTimestampBehavior: io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$ServerTimestampBehavior valueOf(java.lang.String)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB getInstance(android.content.Context)
me.carda.awesome_notifications.core.externalLibs.CronExpression: void checkIncrementRange(int,int,int)
androidx.core.app.JobIntentService: android.os.IBinder onBind(android.content.Intent)
me.carda.awesome_notifications.core.models.AbstractModel: me.carda.awesome_notifications.core.enumerators.NotificationCategory getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,me.carda.awesome_notifications.core.enumerators.NotificationCategory)
com.google.android.material.textfield.TextInputLayout: void setHelperTextTextAppearance(int)
me.carda.awesome_notifications.core.enumerators.MediaSource: me.carda.awesome_notifications.core.enumerators.MediaSource valueOf(java.lang.String)
com.google.android.material.textfield.TextInputLayout: void setShapeAppearanceModel(com.google.android.material.shape.ShapeAppearanceModel)
androidx.appcompat.widget.ActionBarContextView: java.lang.CharSequence getSubtitle()
androidx.core.view.ViewCompat$Api21Impl: boolean isImportantForAccessibility(android.view.View)
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind[] values()
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodCancelNotificationsByChannelKey(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.android.gms.common.ErrorDialogFragment: ErrorDialogFragment()
androidx.core.content.ContextCompat$Api21Impl: java.io.File getNoBackupFilesDir(android.content.Context)
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Builder setLocalOnly(android.app.Notification$Builder,boolean)
androidx.constraintlayout.widget.ConstraintLayout: void setMinHeight(int)
me.carda.awesome_notifications.core.models.NotificationButtonModel: me.carda.awesome_notifications.core.models.NotificationButtonModel fromJson(java.lang.String)
androidx.appcompat.widget.LinearLayoutCompat: int getOrientation()
io.flutter.embedding.engine.FlutterJNI: void nativeInvokePlatformMessageResponseCallback(long,int,java.nio.ByteBuffer,int)
androidx.core.graphics.drawable.IconCompat$Api26Impl: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)
io.grpc.okhttp.internal.TlsVersion: io.grpc.okhttp.internal.TlsVersion[] values()
me.carda.awesome_notifications.core.databases.SqLiteCypher: SqLiteCypher()
com.google.android.material.chip.Chip: void setCloseIconEnabledResource(int)
io.flutter.plugin.platform.PlatformViewWrapper: android.view.ViewTreeObserver$OnGlobalFocusChangeListener getActiveFocusListener()
androidx.recyclerview.widget.RecyclerView: int getBaseline()
com.google.android.material.textfield.TextInputLayout: void setLengthCounter(com.google.android.material.textfield.TextInputLayout$LengthCounter)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat inset(int,int,int,int)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.DisplayCutoutCompat getDisplayCutout()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void markDirty()
io.flutter.embedding.engine.FlutterJNI: void nativeUnregisterTexture(long,long)
androidx.core.view.MenuItemCompat$Api26Impl: android.view.MenuItem setNumericShortcut(android.view.MenuItem,char,int)
com.google.firebase.firestore.remote.WatchChange$WatchTargetChangeType: com.google.firebase.firestore.remote.WatchChange$WatchTargetChangeType valueOf(java.lang.String)
me.carda.awesome_notifications.core.models.AbstractModel: java.util.Map toMap()
androidx.activity.OnBackPressedDispatcher$Api33Impl: void registerOnBackInvokedCallback(java.lang.Object,int,java.lang.Object)
androidx.appcompat.widget.Toolbar: int getTitleMarginTop()
me.carda.awesome_notifications.core.managers.StatusBarManager: boolean isNotificationActiveOnStatusBar(int)
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.FlutterEngine getAttachedFlutterEngine()
androidx.appcompat.widget.AppCompatImageButton: void setImageDrawable(android.graphics.drawable.Drawable)
androidx.appcompat.widget.ListPopupWindow$Api29Impl: void setEpicenterBounds(android.widget.PopupWindow,android.graphics.Rect)
me.carda.awesome_notifications.core.managers.LostEventsManager: void saveAction(android.content.Context,me.carda.awesome_notifications.core.models.returnedData.ActionReceived)
me.carda.awesome_notifications.core.managers.DefaultsManager: java.lang.Long getDismissedCallbackDispatcher(android.content.Context)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void onPrepare(android.view.WindowInsetsAnimation)
me.carda.awesome_notifications.core.managers.DefaultsManager: java.lang.Long getCreatedCallbackDispatcher(android.content.Context)
androidx.constraintlayout.widget.Barrier: int getMargin()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View access$402(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.View)
me.carda.awesome_notifications.core.utils.IntegerUtils: java.lang.Boolean isBetween(java.lang.Integer,java.lang.Integer,java.lang.Integer)
me.carda.awesome_notifications.core.builders.NotificationBuilder: java.lang.Boolean setBigTextStyle(android.content.Context,me.carda.awesome_notifications.core.models.NotificationContentModel,androidx.core.app.NotificationCompat$Builder)
me.carda.awesome_notifications.core.broadcasters.senders.BroadcastSender: void sendBroadcastNotificationDisplayed(android.content.Context,me.carda.awesome_notifications.core.models.returnedData.NotificationReceived)
androidx.appcompat.widget.Toolbar: java.lang.CharSequence getSubtitle()
me.carda.awesome_notifications.core.AwesomeNotifications: java.util.List getAllChannels(android.content.Context)
com.google.android.material.textfield.TextInputLayout: com.google.android.material.shape.ShapeAppearanceModel getShapeAppearanceModel()
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: int getMaxInlineActionWidth()
io.grpc.MethodDescriptor$MethodType: io.grpc.MethodDescriptor$MethodType[] values()
com.google.firebase.heartbeatinfo.HeartBeatInfo$HeartBeat: com.google.firebase.heartbeatinfo.HeartBeatInfo$HeartBeat[] values()
me.carda.awesome_notifications.core.models.AbstractModel: java.lang.Short getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,java.lang.Short)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: void commit(android.content.Context)
androidx.core.widget.TextViewCompat$Api23Impl: int getHyphenationFrequency(android.widget.TextView)
io.flutter.view.TextureRegistry$ImageTextureEntry: void pushImage(android.media.Image)
io.flutter.embedding.engine.FlutterJNI: void detachFromNativeAndReleaseResources()
me.carda.awesome_notifications.core.managers.SharedManager: java.lang.Boolean set(android.content.Context,java.lang.String,java.lang.String,me.carda.awesome_notifications.core.models.AbstractModel)
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getMinWidthMinor()
me.carda.awesome_notifications.core.enumerators.NotificationLayout: NotificationLayout(java.lang.String,int,java.lang.String)
me.carda.awesome_notifications.core.models.AbstractModel: me.carda.awesome_notifications.core.models.AbstractModel fromMap(java.util.Map)
com.google.android.material.textfield.TextInputLayout: android.graphics.drawable.Drawable getErrorIconDrawable()
io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$ListenSource: io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$ListenSource valueOf(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int getHeight()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setTrimPathEnd(float)
com.google.android.material.snackbar.Snackbar$SnackbarLayout: Snackbar$SnackbarLayout(android.content.Context,android.util.AttributeSet)
com.google.android.material.button.MaterialButton: java.lang.String getA11yClassName()
com.google.gson.stream.JsonReader: void checkLenient()
me.carda.awesome_notifications.core.utils.MapUtils: java.lang.Boolean isNullOrEmptyKey(java.util.Map,java.lang.String)
androidx.core.view.ViewCompat$Api23Impl: int getScrollIndicators(android.view.View)
androidx.core.view.ViewCompat$Api28Impl: void removeOnUnhandledKeyEventListener(android.view.View,androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)
me.carda.awesome_notifications.core.managers.PermissionManager: java.lang.String getManifestPermissionCode(me.carda.awesome_notifications.core.enumerators.NotificationPermission)
com.google.gson.stream.JsonWriter: void flush()
io.grpc.internal.GzipInflatingBuffer$State: io.grpc.internal.GzipInflatingBuffer$State valueOf(java.lang.String)
androidx.recyclerview.widget.LinearLayoutManager: LinearLayoutManager(android.content.Context,android.util.AttributeSet,int,int)
androidx.core.content.ContextCompat$Api23Impl: java.lang.String getSystemServiceName(android.content.Context,java.lang.Class)
me.carda.awesome_notifications.core.utils.IntegerUtils: java.lang.Integer extractInteger(java.lang.Object,java.lang.Object)
com.google.android.material.chip.Chip: void setMaxLines(int)
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate getCompatAccessibilityDelegate()
me.carda.awesome_notifications.core.broadcasters.receivers.NotificationActionReceiver: void receiveActionIntent(android.content.Context,android.content.Intent,boolean)
me.carda.awesome_notifications.core.background.BackgroundExecutor: void runBackgroundExecutor(android.content.Context,android.content.Intent,java.lang.Long,java.lang.Long)
me.carda.awesome_notifications.core.threads.NotificationSender: java.lang.Object onPostExecute(java.lang.Object)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$300(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
androidx.appcompat.widget.AppCompatEditText: void setTextClassifier(android.view.textclassifier.TextClassifier)
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver: void addNotificationEvent(android.content.Context,java.lang.String,me.carda.awesome_notifications.core.models.returnedData.NotificationReceived)
androidx.core.view.ViewCompat$Api26Impl: android.view.autofill.AutofillId getAutofillId(android.view.View)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(boolean)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: boolean setLong(android.content.Context,java.lang.String,java.lang.String,long)
androidx.appcompat.widget.ActionBarContextView: void setVisibility(int)
androidx.core.view.WindowInsetsCompat$Impl: void setOverriddenInsets(androidx.core.graphics.Insets[])
androidx.lifecycle.ReportFragment$LifecycleCallbacks: ReportFragment$LifecycleCallbacks()
androidx.core.widget.NestedScrollView: int getScrollRange()
com.google.firestore.bundle.BundledQuery$LimitType: com.google.firestore.bundle.BundledQuery$LimitType[] values()
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.FlutterImageView getCurrentImageSurface()
com.google.android.material.chip.Chip: android.content.res.ColorStateList getChipStrokeColor()
com.google.android.material.textfield.TextInputEditText: com.google.android.material.textfield.TextInputLayout getTextInputLayout()
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setWakeUpScreen(android.content.Context,me.carda.awesome_notifications.core.models.NotificationModel)
androidx.window.core.VerificationMode: androidx.window.core.VerificationMode valueOf(java.lang.String)
me.carda.awesome_notifications.core.models.AbstractModel: me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour)
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedPreFling(android.view.View,float,float)
me.carda.awesome_notifications.core.managers.StatusBarManager: boolean isFirstActiveOnChannelKey(java.lang.String)
io.grpc.ChannelLogger$ChannelLogLevel: io.grpc.ChannelLogger$ChannelLogLevel[] values()
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setCriticalAlert(android.content.Context,me.carda.awesome_notifications.core.models.NotificationChannelModel)
me.carda.awesome_notifications.core.managers.DisplayedManager: DisplayedManager()
androidx.appcompat.widget.Toolbar: void setTitle(java.lang.CharSequence)
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setLayoutColor(android.content.Context,me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.models.NotificationChannelModel,androidx.core.app.NotificationCompat$Builder)
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode valueOf(java.lang.String)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api33Impl: void setTextSelectable(android.view.accessibility.AccessibilityNodeInfo,boolean)
androidx.appcompat.widget.ActionBarOverlayLayout: void setUiOptions(int)
com.google.firebase.firestore.core.OnlineState: com.google.firebase.firestore.core.OnlineState[] values()
androidx.window.core.VerificationMode: androidx.window.core.VerificationMode[] values()
com.google.android.material.textfield.TextInputLayout: void setBoxCornerFamily(int)
me.carda.awesome_notifications.core.externalLibs.CronExpression: void setCalendarHour(java.util.Calendar,int)
me.carda.awesome_notifications.core.models.NotificationLocalizationModel: NotificationLocalizationModel()
com.google.gson.stream.JsonWriter: int peek()
me.carda.awesome_notifications.AwesomeNotificationsFlutterExtension: void loadExternalExtensions(android.content.Context)
com.google.firestore.v1.Value$ValueTypeCase: com.google.firestore.v1.Value$ValueTypeCase valueOf(java.lang.String)
me.carda.awesome_notifications.core.managers.StatusBarManager: java.util.List getAllAndroidActiveNotificationsByChannelKey(android.content.Context,java.lang.String)
me.carda.awesome_notifications.core.managers.LocalizationManager: LocalizationManager()
androidx.appcompat.widget.Toolbar: android.widget.TextView getSubtitleTextView()
androidx.core.app.Person$Api28Impl: androidx.core.app.Person fromAndroidPerson(android.app.Person)
io.flutter.embedding.engine.FlutterJNI: void nativeSetViewportMetrics(long,float,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int[],int[],int[])
com.google.android.material.textfield.TextInputLayout: android.content.res.ColorStateList getHintTextColor()
android.support.v4.media.session.PlaybackStateCompat$Api21Impl: long getBufferedPosition(android.media.session.PlaybackState)
me.carda.awesome_notifications.core.AwesomeNotifications: void onNewLifeCycleEvent(me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle)
androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetTop(android.view.DisplayCutout)
me.carda.awesome_notifications.core.builders.NotificationBuilder: me.carda.awesome_notifications.core.models.returnedData.ActionReceived receiveNotificationActionFromIntent(android.content.Context,android.content.Intent,me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle)
me.carda.awesome_notifications.core.builders.NotificationBuilder: java.lang.String getGroupKey(me.carda.awesome_notifications.core.models.NotificationContentModel,me.carda.awesome_notifications.core.models.NotificationChannelModel)
androidx.appcompat.widget.ActionBarOverlayLayout: void setHasNonEmbeddedTabs(boolean)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api30Impl: java.lang.Object createRangeInfo(int,float,float,float)
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: com.google.android.gms.tasks.Task getPluginConstantsForFirebaseApp(com.google.firebase.FirebaseApp)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodSetBadgeCounter(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.view.ViewCompat$Api21Impl: android.content.res.ColorStateList getBackgroundTintList(android.view.View)
me.carda.awesome_notifications.core.AwesomeNotifications: java.lang.Object getUtcTimeZone()
io.flutter.embedding.android.FlutterImageView: android.view.Surface getSurface()
me.carda.awesome_notifications.core.AwesomeNotifications: java.lang.Long getActionHandle()
io.grpc.okhttp.OkHttpChannelProvider: OkHttpChannelProvider()
androidx.core.app.RemoteInput$Api29Impl: int getEditChoicesBeforeSending(java.lang.Object)
androidx.core.view.ViewCompat$Api21Impl: float getElevation(android.view.View)
me.carda.awesome_notifications.core.managers.StatusBarManager: void setIndexActiveNotificationChannel(android.content.SharedPreferences$Editor,java.lang.String,java.lang.String)
androidx.core.view.DisplayCutoutCompat$Api28Impl: java.util.List getBoundingRects(android.view.DisplayCutout)
me.carda.awesome_notifications.core.enumerators.LogLevel: me.carda.awesome_notifications.core.enumerators.LogLevel[] values()
com.google.firestore.v1.StructuredQuery$UnaryFilter$Operator: com.google.firestore.v1.StructuredQuery$UnaryFilter$Operator valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[])
androidx.core.widget.EdgeEffectCompat$Api31Impl: float getDistance(android.widget.EdgeEffect)
me.carda.awesome_notifications.core.models.NotificationChannelGroupModel: me.carda.awesome_notifications.core.models.NotificationChannelGroupModel fromMap(java.util.Map)
com.google.protobuf.ProtoSyntax: com.google.protobuf.ProtoSyntax valueOf(java.lang.String)
com.google.firestore.v1.StructuredQuery$Direction: com.google.firestore.v1.StructuredQuery$Direction valueOf(java.lang.String)
com.google.android.material.textfield.TextInputLayout: void setPasswordVisibilityToggleDrawable(android.graphics.drawable.Drawable)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodDismissNotification(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
me.carda.awesome_notifications.core.models.NotificationMessageModel: me.carda.awesome_notifications.core.models.NotificationMessageModel fromMap(java.util.Map)
com.google.firebase.firestore.remote.Stream$State: com.google.firebase.firestore.remote.Stream$State valueOf(java.lang.String)
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver: me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver unsubscribeOnNotificationEvents(me.carda.awesome_notifications.core.listeners.AwesomeNotificationEventListener)
com.google.android.material.textfield.TextInputLayout: java.lang.CharSequence getErrorContentDescription()
androidx.media.AudioAttributesImplBaseParcelizer: void write(androidx.media.AudioAttributesImplBase,androidx.versionedparcelable.VersionedParcel)
com.google.android.material.transformation.FabTransformationScrimBehavior: FabTransformationScrimBehavior()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer$PerImage dequeueImage()
androidx.constraintlayout.widget.Guideline: void setGuidelineEnd(int)
com.google.android.material.chip.Chip: void setHideMotionSpecResource(int)
com.google.firestore.admin.v1.Index$IndexField$ValueModeCase: com.google.firestore.admin.v1.Index$IndexField$ValueModeCase[] values()
io.flutter.embedding.engine.FlutterJNI: void runBundleAndSnapshotFromLibrary(java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager,java.util.List)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getStrokeWidth()
io.grpc.okhttp.internal.framed.HeadersMode: io.grpc.okhttp.internal.framed.HeadersMode valueOf(java.lang.String)
me.carda.awesome_notifications.FlutterBitmapUtils: FlutterBitmapUtils()
io.flutter.embedding.android.FlutterView: void setVisibility(int)
me.carda.awesome_notifications.core.AwesomeNotifications: int getGlobalBadgeCounter()
androidx.core.view.ViewCompat$Api21Impl: androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)
androidx.core.view.WindowInsetsCompat$Impl30: androidx.core.graphics.Insets getInsets(int)
me.carda.awesome_notifications.core.threads.NotificationScheduler: void cancelAllSchedules(android.content.Context)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: double deltaMillis(long)
com.google.gson.internal.bind.TypeAdapters$15: TypeAdapters$15()
me.carda.awesome_notifications.core.models.returnedData.ActionReceived: me.carda.awesome_notifications.core.models.NotificationContentModel fromJson(java.lang.String)
me.carda.awesome_notifications.core.threads.NotificationScheduler: NotificationScheduler(android.content.Context,me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle,me.carda.awesome_notifications.core.enumerators.NotificationSource,me.carda.awesome_notifications.core.models.NotificationModel,android.content.Intent,boolean,me.carda.awesome_notifications.core.completion_handlers.NotificationThreadCompletionHandler)
io.flutter.embedding.android.FlutterImageView: android.media.ImageReader getImageReader()
me.carda.awesome_notifications.core.utils.CalendarUtils: java.util.TimeZone getLocalTimeZone()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay valueOf(java.lang.String)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: android.database.sqlite.SQLiteDatabase getWritableDatabase(android.content.Context)
androidx.constraintlayout.widget.ConstraintLayout: void setMinWidth(int)
androidx.core.app.NotificationCompatBuilder$Api21Impl: android.app.Notification$Builder setVisibility(android.app.Notification$Builder,int)
io.flutter.embedding.engine.FlutterOverlaySurface: FlutterOverlaySurface(int,android.view.Surface)
com.google.android.material.chip.Chip: java.lang.CharSequence getChipText()
me.carda.awesome_notifications.core.models.NotificationContentModel: java.lang.String toJson()
me.carda.awesome_notifications.DartNotificationActionReceiver: void initializeExternalPlugins(android.content.Context)
androidx.media.app.NotificationCompat$Api21Impl: void setMediaStyle(android.app.Notification$Builder,android.app.Notification$MediaStyle)
androidx.core.widget.NestedScrollView: void setFillViewport(boolean)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setTrimPathOffset(float)
me.carda.awesome_notifications.core.enumerators.NotificationPlayState: java.lang.String getSafeName()
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api34Impl: void setMinDurationBetweenContentChangeMillis(android.view.accessibility.AccessibilityNodeInfo,long)
me.carda.awesome_notifications.core.logs.Logger: void d(java.lang.String,java.lang.String)
me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException: java.lang.String getCode()
com.google.android.material.textfield.TextInputLayout: void setPlaceholderTextColor(android.content.res.ColorStateList)
com.google.android.material.chip.Chip: float getChipIconSize()
androidx.core.view.ViewCompat$Api21Impl: boolean hasNestedScrollingParent(android.view.View)
io.flutter.embedding.android.FlutterTextureView: void setRenderSurface(android.view.Surface)
me.carda.awesome_notifications.core.models.AbstractModel: me.carda.awesome_notifications.core.enumerators.ForegroundServiceType getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,me.carda.awesome_notifications.core.enumerators.ForegroundServiceType)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodDecrementBadge(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.view.AccessibilityViewEmbedder: void addChildrenToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo)
me.carda.awesome_notifications.core.enumerators.ForegroundStartMode: me.carda.awesome_notifications.core.enumerators.ForegroundStartMode getSafeEnum(java.lang.String)
me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType: me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchPointerDataPacket(long,java.nio.ByteBuffer,int)
me.carda.awesome_notifications.core.AwesomeNotifications: void createNotification(me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.completion_handlers.NotificationThreadCompletionHandler)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int getWidth()
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerView$EdgeEffectFactory getEdgeEffectFactory()
androidx.core.app.NotificationCompatBuilder$Api23Impl: android.app.Notification$Builder setLargeIcon(android.app.Notification$Builder,android.graphics.drawable.Icon)
androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type valueOf(java.lang.String)
androidx.core.view.ViewCompat$Api26Impl: int getImportantForAutofill(android.view.View)
com.google.android.material.chip.Chip: android.graphics.drawable.Drawable getChipIcon()
me.carda.awesome_notifications.core.externalLibs.CronExpression: int getDayOfWeekNumber(java.lang.String)
androidx.recyclerview.widget.RecyclerView: java.lang.CharSequence getAccessibilityClassName()
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerView$LayoutManager getLayoutManager()
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag[] values()
com.google.android.material.chip.Chip: void setIconStartPadding(float)
me.carda.awesome_notifications.core.models.DefaultsModel: DefaultsModel()
me.carda.awesome_notifications.core.managers.ScheduleManager: void commitChanges(android.content.Context)
me.carda.awesome_notifications.core.enumerators.ForegroundStartMode: me.carda.awesome_notifications.core.enumerators.ForegroundStartMode[] $values()
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter endArray()
com.google.android.material.chip.Chip: void setTextAppearance(com.google.android.material.resources.TextAppearance)
me.carda.awesome_notifications.core.enumerators.NotificationSource: java.lang.String getSafeName()
com.google.firebase.FirebaseCommonKtxRegistrar: FirebaseCommonKtxRegistrar()
com.google.android.material.textfield.TextInputLayout: void setPrefixText(java.lang.CharSequence)
me.carda.awesome_notifications.core.models.returnedData.ActionReceived: java.lang.String toJson()
me.carda.awesome_notifications.core.enumerators.NotificationPermission: me.carda.awesome_notifications.core.enumerators.NotificationPermission[] values()
com.google.android.material.textfield.TextInputLayout: int getBoxBackgroundColor()
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setDropDownBackgroundResource(int)
androidx.constraintlayout.helper.widget.Flow: void setVerticalBias(float)
com.google.android.material.button.MaterialButton: void setIconSize(int)
androidx.appcompat.widget.LinearLayoutCompat: int getDividerWidth()
androidx.media.AudioAttributesImplApi26Parcelizer: androidx.media.AudioAttributesImplApi26 read(androidx.versionedparcelable.VersionedParcel)
com.google.android.material.chip.Chip: void setCloseIconTint(android.content.res.ColorStateList)
androidx.appcompat.widget.AppCompatImageView: void setImageURI(android.net.Uri)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api33Impl: void setUniqueId(android.view.accessibility.AccessibilityNodeInfo,java.lang.String)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPrePaused(android.app.Activity)
me.carda.awesome_notifications.core.models.DefaultsModel: java.util.Map toMap()
androidx.core.content.ContextCompat$Api21Impl: java.io.File getCodeCacheDir(android.content.Context)
io.grpc.okhttp.OkHttpChannelProvider: boolean isAvailable()
androidx.core.app.NotificationCompat$BubbleMetadata$Api29Impl: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodStartForeground(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.view.WindowInsetsCompat$BuilderImpl: androidx.core.view.WindowInsetsCompat build()
me.carda.awesome_notifications.core.threads.NotificationThread: void runOnForegroundThread()
com.google.android.material.internal.NavigationMenuItemView: void setChecked(boolean)
me.carda.awesome_notifications.core.models.NotificationCalendarModel: me.carda.awesome_notifications.core.models.NotificationScheduleModel fromMap(java.util.Map)
me.carda.awesome_notifications.core.decoders.BitmapResourceDecoder: byte[] doInBackground()
com.google.android.material.carousel.CarouselLayoutManager: CarouselLayoutManager()
me.carda.awesome_notifications.core.managers.StatusBarManager: void registerActiveNotification(me.carda.awesome_notifications.core.models.NotificationModel,int)
com.google.android.material.chip.Chip: void setTextStartPadding(float)
androidx.core.view.WindowInsetsCompat$Impl: boolean isConsumed()
me.carda.awesome_notifications.core.AwesomeNotifications: boolean isApplicationInDebug(android.content.Context)
androidx.core.view.WindowInsetsCompat$Impl28: androidx.core.view.WindowInsetsCompat consumeDisplayCutout()
me.carda.awesome_notifications.core.externalLibs.CronExpression: boolean isValidExpression(java.lang.String)
androidx.appcompat.widget.AppCompatTextView: android.graphics.PorterDuff$Mode getSupportCompoundDrawablesTintMode()
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelShowGlobalDndPage(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableDelegateState: int getChangingConfigurations()
io.grpc.util.OutlierDetectionLoadBalancerProvider: int getPriority()
com.google.android.material.chip.Chip: void setCheckableResource(int)
androidx.window.area.reflectionguard.WindowAreaComponentApi2Requirements: void removeRearDisplayStatusListener(androidx.window.extensions.core.util.function.Consumer)
me.carda.awesome_notifications.core.managers.ChannelManager: android.app.NotificationChannel getAndroidChannel(android.content.Context,java.lang.String)
androidx.recyclerview.widget.RecyclerView: androidx.core.view.NestedScrollingChildHelper getScrollingChildHelper()
io.flutter.plugin.platform.PlatformViewWrapper: void setOnDescendantFocusChangeListener(android.view.View$OnFocusChangeListener)
androidx.core.view.MenuItemCompat$Api26Impl: android.content.res.ColorStateList getIconTintList(android.view.MenuItem)
me.carda.awesome_notifications.core.enumerators.ForegroundServiceType: ForegroundServiceType(java.lang.String,int,java.lang.String)
io.grpc.SecurityLevel: io.grpc.SecurityLevel[] values()
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api33Impl: androidx.core.view.accessibility.AccessibilityNodeInfoCompat getParent(android.view.accessibility.AccessibilityNodeInfo,int)
me.carda.awesome_notifications.core.models.AbstractModel: me.carda.awesome_notifications.core.enumerators.ActionType getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,me.carda.awesome_notifications.core.enumerators.ActionType)
me.carda.awesome_notifications.core.enumerators.MediaSource: me.carda.awesome_notifications.core.enumerators.MediaSource[] $values()
androidx.recyclerview.widget.RecyclerView: void setItemViewCacheSize(int)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat consumeSystemWindowInsets()
com.google.android.material.button.MaterialButton: MaterialButton(android.content.Context,android.util.AttributeSet)
me.carda.awesome_notifications.core.models.AbstractModel: me.carda.awesome_notifications.core.models.AbstractModel templateFromJson(java.lang.String)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.util.Map getStringsStartingWith(android.content.Context,java.lang.String,java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void updateDisplayMetrics(int,float,float,float)
androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type: androidx.constraintlayout.solver.widgets.analyzer.DependencyNode$Type[] values()
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setLockedNotification(me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.models.NotificationChannelModel,androidx.core.app.NotificationCompat$Builder)
io.grpc.internal.ManagedChannelImpl$ResolutionState: io.grpc.internal.ManagedChannelImpl$ResolutionState valueOf(java.lang.String)
me.carda.awesome_notifications.core.services.AutoCancelService: void onTaskRemoved(android.content.Intent)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getPivotX()
androidx.core.view.VelocityTrackerCompat$Api34Impl: boolean isAxisSupported(android.view.VelocityTracker,int)
com.google.firebase.firestore.AggregateSource: com.google.firebase.firestore.AggregateSource valueOf(java.lang.String)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getInsets(int)
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart valueOf(java.lang.String)
com.google.android.material.bottomsheet.BottomSheetBehavior: BottomSheetBehavior()
androidx.appcompat.widget.Toolbar: int getContentInsetEndWithActions()
com.google.android.material.chip.Chip: void setBackgroundDrawable(android.graphics.drawable.Drawable)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api34Impl: void setContainerTitle(android.view.accessibility.AccessibilityNodeInfo,java.lang.CharSequence)
io.flutter.embedding.engine.FlutterJNI: void onRenderingStopped()
android.support.v4.media.session.PlaybackStateCompat$Api21Impl: void setActiveQueueItemId(android.media.session.PlaybackState$Builder,long)
androidx.appcompat.widget.ActionMenuView: void setOverflowReserved(boolean)
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap getBitmap()
me.carda.awesome_notifications.core.models.NotificationChannelGroupModel: me.carda.awesome_notifications.core.models.AbstractModel fromJson(java.lang.String)
com.google.android.material.chip.Chip: void setChipMinHeightResource(int)
com.google.common.util.concurrent.DirectExecutor: com.google.common.util.concurrent.DirectExecutor[] values()
me.carda.awesome_notifications.core.services.AutoCancelService: android.os.IBinder onBind(android.content.Intent)
androidx.core.view.ViewCompat$Api21Impl: boolean isNestedScrollingEnabled(android.view.View)
com.google.gson.stream.JsonReader: int nextInt()
me.carda.awesome_notifications.core.models.NotificationCalendarModel: java.lang.Integer weekDayISO8601ToStandard(java.lang.Integer)
com.google.android.material.transformation.FabTransformationScrimBehavior: FabTransformationScrimBehavior(android.content.Context,android.util.AttributeSet)
me.carda.awesome_notifications.core.threads.NotificationScheduler: me.carda.awesome_notifications.core.models.NotificationModel scheduleNotification(android.content.Context,me.carda.awesome_notifications.core.models.NotificationModel,java.util.Calendar)
com.google.android.material.internal.NavigationMenuItemView: void setActionView(android.view.View)
me.carda.awesome_notifications.core.enumerators.NotificationPlayState: NotificationPlayState(java.lang.String,int,java.lang.String,int)
androidx.core.view.WindowInsetsCompat$Impl20: void setOverriddenInsets(androidx.core.graphics.Insets[])
me.carda.awesome_notifications.core.models.NotificationChannelModel: java.lang.String toJson()
com.google.android.material.textfield.TextInputLayout: void setBoxStrokeWidthFocused(int)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodCancelAllSchedules(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
me.carda.awesome_notifications.core.models.NotificationContentModel: boolean registerCreatedEvent(me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle,me.carda.awesome_notifications.core.enumerators.NotificationSource)
androidx.appcompat.widget.ActionBarOverlayLayout: int getActionBarHideOffset()
me.carda.awesome_notifications.DartScheduledNotificationReceiver: void initializeExternalPlugins(android.content.Context)
me.carda.awesome_notifications.core.AwesomeNotifications: void dismissAllNotifications()
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart[] values()
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap decodeImage(java.nio.ByteBuffer,long)
com.google.android.material.internal.NavigationMenuItemView: void setIconTintList(android.content.res.ColorStateList)
me.carda.awesome_notifications.core.utils.CompareUtils: boolean assertEqualMaps(java.lang.Object,java.lang.Object)
me.carda.awesome_notifications.core.externalLibs.CronExpression: int getNumericValue(java.lang.String,int)
me.carda.awesome_notifications.core.models.NotificationIntervalModel: me.carda.awesome_notifications.core.models.NotificationIntervalModel fromMap(java.util.Map)
androidx.appcompat.widget.Toolbar: android.view.View getNavButtonView()
androidx.appcompat.widget.ActionBarOverlayLayout: void setIcon(int)
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness valueOf(java.lang.String)
com.google.firebase.heartbeatinfo.HeartBeatInfo$HeartBeat: com.google.firebase.heartbeatinfo.HeartBeatInfo$HeartBeat valueOf(java.lang.String)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setTranslateY(float)
androidx.recyclerview.widget.RecyclerView: void suppressLayout(boolean)
me.carda.awesome_notifications.core.managers.RepositoryManager: me.carda.awesome_notifications.core.models.AbstractModel get(android.content.Context,java.lang.String,java.lang.String)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityDestroyed(android.app.Activity)
me.carda.awesome_notifications.core.managers.StatusBarManager: boolean isFirstActiveOnGroupKey(java.lang.String)
com.google.firebase.firestore.FirestoreRegistrar: com.google.firebase.firestore.FirestoreMultiDbComponent lambda$getComponents$0(com.google.firebase.components.ComponentContainer)
androidx.core.view.WindowInsetsCompat$BuilderImpl20: void setStableInsets(androidx.core.graphics.Insets)
androidx.appcompat.widget.AppCompatTextView: void setAllCaps(boolean)
androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper$Impl23: void computeAndSetTextDirection(android.text.StaticLayout$Builder,android.widget.TextView)
me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType: me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType[] values()
com.google.android.material.chip.Chip: void setCloseIconSize(float)
me.carda.awesome_notifications.core.enumerators.NotificationPlayState: me.carda.awesome_notifications.core.enumerators.NotificationPlayState[] values()
androidx.recyclerview.widget.RecyclerView: void setScrollingTouchSlop(int)
androidx.constraintlayout.helper.widget.Flow: void setPaddingTop(int)
me.carda.awesome_notifications.core.models.NotificationLocalizationModel: me.carda.awesome_notifications.core.models.AbstractModel fromMap(java.util.Map)
io.flutter.view.TextureRegistry$SurfaceProducer: int getHeight()
com.google.android.material.textfield.TextInputLayout: void setBoxBackgroundColorStateList(android.content.res.ColorStateList)
com.google.android.material.transformation.ExpandableTransformationBehavior: ExpandableTransformationBehavior(android.content.Context,android.util.AttributeSet)
me.carda.awesome_notifications.core.threads.NotificationScheduler: void cancelSchedulesByChannelKey(android.content.Context,java.lang.String)
me.carda.awesome_notifications.core.models.AbstractModel: void putDataOnSerializedMap(java.lang.String,java.util.Map,java.util.TimeZone)
me.carda.awesome_notifications.core.broadcasters.senders.BroadcastSender: boolean isWithoutListenersAvailable()
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.util.Map getLongsStartingWith(android.content.Context,java.lang.String,java.lang.String)
com.google.android.material.chip.Chip: void setChipStrokeWidth(float)
androidx.appcompat.widget.AppCompatCheckBox: void setSupportButtonTintMode(android.graphics.PorterDuff$Mode)
me.carda.awesome_notifications.core.models.NotificationCrontabModel: java.util.Map toMap()
androidx.core.graphics.drawable.IconCompatParcelizer: IconCompatParcelizer()
me.carda.awesome_notifications.core.models.AbstractModel: me.carda.awesome_notifications.core.enumerators.NotificationImportance getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,me.carda.awesome_notifications.core.enumerators.NotificationImportance)
io.flutter.embedding.engine.FlutterOverlaySurface: android.view.Surface getSurface()
androidx.appcompat.widget.ActionBarContainer: ActionBarContainer(android.content.Context,android.util.AttributeSet)
androidx.appcompat.widget.SearchView$SearchAutoComplete: void setSearchView(androidx.appcompat.widget.SearchView)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmojiModifier(int)
me.carda.awesome_notifications.core.managers.StatusBarManager: void onNotificationRemoved(android.service.notification.StatusBarNotification)
com.google.gson.internal.sql.SqlTimestampTypeAdapter$1: SqlTimestampTypeAdapter$1()
androidx.lifecycle.ProcessLifecycleInitializer: ProcessLifecycleInitializer()
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: float getBackgroundOverlayColorAlpha()
me.carda.awesome_notifications.core.managers.ActionManager: java.util.List listActions(android.content.Context)
androidx.core.graphics.drawable.IconCompat$Api23Impl: android.net.Uri getUri(java.lang.Object)
androidx.core.view.ViewCompat$Api21Impl: void setNestedScrollingEnabled(android.view.View,boolean)
androidx.core.app.JobIntentService: void enqueueWork(android.content.Context,android.content.ComponentName,int,android.content.Intent)
androidx.appcompat.widget.ActionBarOverlayLayout: void setLogo(int)
androidx.fragment.app.DefaultSpecialEffectsController$Api24Impl: long totalDuration(android.animation.AnimatorSet)
androidx.appcompat.widget.AppCompatButton: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
me.carda.awesome_notifications.core.utils.CompareUtils: boolean assertEqualObjects(java.lang.Object,java.lang.Object)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter open(int,char)
androidx.core.app.CoreComponentFactory: CoreComponentFactory()
com.google.common.collect.Maps$EntryFunction: com.google.common.collect.Maps$EntryFunction[] values()
com.google.gson.stream.JsonReader: java.lang.String nextString()
androidx.lifecycle.ProcessLifecycleOwner$attach$1$onActivityPreCreated$1: ProcessLifecycleOwner$attach$1$onActivityPreCreated$1(androidx.lifecycle.ProcessLifecycleOwner)
me.carda.awesome_notifications.core.utils.BitmapUtils: java.lang.String cleanMediaPath(java.lang.String)
androidx.appcompat.widget.ViewStubCompat: void setInflatedId(int)
me.carda.awesome_notifications.core.utils.ThreadUtils: me.carda.awesome_notifications.core.utils.ThreadUtils getInstance()
me.carda.awesome_notifications.core.models.returnedData.ActionReceived: me.carda.awesome_notifications.core.models.returnedData.ActionReceived fromJson(java.lang.String)
androidx.core.view.ViewParentCompat$Api21Impl: boolean onNestedPreFling(android.view.ViewParent,android.view.View,float,float)
me.carda.awesome_notifications.core.AwesomeNotifications: java.util.Calendar getNextValidDate(me.carda.awesome_notifications.core.models.NotificationScheduleModel,java.util.Calendar)
io.grpc.SecurityLevel: io.grpc.SecurityLevel valueOf(java.lang.String)
androidx.media.AudioAttributesImplApi26: AudioAttributesImplApi26()
androidx.appcompat.widget.AppCompatImageView: void setSupportImageTintMode(android.graphics.PorterDuff$Mode)
me.carda.awesome_notifications.DartNotificationActionReceiver: DartNotificationActionReceiver()
com.google.android.material.textfield.TextInputLayout: android.widget.TextView getPrefixTextView()
me.carda.awesome_notifications.core.models.NotificationChannelModel: me.carda.awesome_notifications.core.models.NotificationChannelModel clone()
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodGetDrawableData(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
me.carda.awesome_notifications.core.enumerators.GroupSort: me.carda.awesome_notifications.core.enumerators.GroupSort[] values()
androidx.core.view.ViewParentCompat$Api21Impl: boolean onNestedFling(android.view.ViewParent,android.view.View,float,float,boolean)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmojiModifierBase(int)
me.carda.awesome_notifications.core.threads.NotificationForegroundSender: java.lang.Object onPostExecute(java.lang.Object)
androidx.activity.OnBackPressedDispatcher$Api34Impl: android.window.OnBackInvokedCallback createOnBackAnimationCallback(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function0)
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Action$Builder addExtras(android.app.Notification$Action$Builder,android.os.Bundle)
me.carda.awesome_notifications.core.enumerators.NotificationPlayState: me.carda.awesome_notifications.core.enumerators.NotificationPlayState[] $values()
kotlinx.coroutines.android.AndroidDispatcherFactory: java.lang.String hintOnError()
me.carda.awesome_notifications.core.managers.StatusBarManager: boolean getIsNotificationActiveWithoutServices(int)
me.carda.awesome_notifications.core.models.NotificationModel: NotificationModel()
me.carda.awesome_notifications.DartBackgroundExecutor: boolean isDone()
io.flutter.embedding.engine.FlutterJNI: void updateSemantics(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])
com.google.android.material.textfield.TextInputLayout: int getHelperTextCurrentTextColor()
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getVisibleInsets(android.view.View)
me.carda.awesome_notifications.core.models.AbstractModel: me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle)
com.google.android.material.chip.Chip: void setChipCornerRadius(float)
androidx.core.widget.ImageViewCompat$Api21Impl: android.graphics.PorterDuff$Mode getImageTintMode(android.widget.ImageView)
androidx.window.extensions.core.util.function.Predicate: boolean test(java.lang.Object)
me.carda.awesome_notifications.core.models.NotificationScheduleModel: java.lang.Boolean hasNextValidDate(java.util.Calendar)
me.carda.awesome_notifications.core.broadcasters.senders.BroadcastSender: void sendBroadcastNotificationCreated(android.content.Context,me.carda.awesome_notifications.core.models.returnedData.NotificationReceived)
androidx.appcompat.view.menu.ListMenuItemView: void setForceShowIcon(boolean)
com.google.firebase.firestore.ktx.FirebaseFirestoreKtxRegistrar: java.util.List getComponents()
me.carda.awesome_notifications.core.models.NotificationIntervalModel: me.carda.awesome_notifications.core.models.AbstractModel fromMap(java.util.Map)
androidx.appcompat.widget.AppCompatImageButton: void setImageBitmap(android.graphics.Bitmap)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: void onCreate(android.database.sqlite.SQLiteDatabase)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void waitOnFence(android.media.Image)
androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper$Impl23: AppCompatTextViewAutoSizeHelper$Impl23()
android.support.v4.media.session.PlaybackStateCompat$Api21Impl: android.media.session.PlaybackState$CustomAction build(android.media.session.PlaybackState$CustomAction$Builder)
androidx.appcompat.widget.AppCompatButton: void setBackgroundDrawable(android.graphics.drawable.Drawable)
me.carda.awesome_notifications.core.models.returnedData.NotificationReceived: NotificationReceived(me.carda.awesome_notifications.core.models.NotificationContentModel,android.content.Intent)
androidx.core.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel)
me.carda.awesome_notifications.core.managers.ScheduleManager: void cancelSchedulesByChannelKey(android.content.Context,java.lang.String)
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setOnlyAlertOnce(me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.models.NotificationChannelModel,androidx.core.app.NotificationCompat$Builder)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState: int getChangingConfigurations()
me.carda.awesome_notifications.core.models.AbstractModel: java.lang.String toJson()
androidx.appcompat.widget.Toolbar$Api33Impl: android.window.OnBackInvokedCallback newOnBackInvokedCallback(java.lang.Runnable)
me.carda.awesome_notifications.core.enumerators.NotificationImportance: me.carda.awesome_notifications.core.enumerators.NotificationImportance valueOf(java.lang.String)
me.carda.awesome_notifications.core.utils.AudioUtils: AudioUtils()
io.flutter.embedding.engine.FlutterJNI: void nativeUpdateDisplayMetrics(long)
com.google.android.material.button.MaterialButton: void setInsetBottom(int)
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action,java.lang.Object)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void detachFromGLContext()
me.carda.awesome_notifications.core.AwesomeNotifications: void notifyAwesomeEvent(java.lang.String,me.carda.awesome_notifications.core.models.returnedData.NotificationReceived)
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode valueOf(java.lang.String)
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setInsets(int,androidx.core.graphics.Insets)
com.google.firebase.firestore.FirebaseFirestoreKtxRegistrar: FirebaseFirestoreKtxRegistrar()
androidx.appcompat.widget.ViewStubCompat: void setVisibility(int)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreDestroyed(android.app.Activity)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType[] values()
androidx.constraintlayout.widget.ConstraintLayout: int getMinHeight()
io.flutter.embedding.engine.FlutterJNI: void onVsync(long,long,long)
androidx.core.widget.NestedScrollView: float getTopFadingEdgeStrength()
me.carda.awesome_notifications.core.models.NotificationChannelModel: NotificationChannelModel()
me.leolin.shortcutbadger.impl.AdwHomeBadger: AdwHomeBadger()
com.google.android.material.textfield.TextInputEditText: java.lang.CharSequence getHintFromLayout()
me.carda.awesome_notifications.core.threads.NotificationForegroundSender: java.lang.Object doInBackground()
me.carda.awesome_notifications.core.managers.ChannelManager: void saveAndroidChannel(android.content.Context,me.carda.awesome_notifications.core.models.NotificationChannelModel,me.carda.awesome_notifications.core.models.NotificationChannelModel,java.lang.Boolean)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setHotspotBounds(android.graphics.drawable.Drawable,int,int,int,int)
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setShowWhen(me.carda.awesome_notifications.core.models.NotificationModel,androidx.core.app.NotificationCompat$Builder)
me.carda.awesome_notifications.core.AwesomeNotifications: void initialize(android.content.Context)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchPlatformMessage(long,java.lang.String,java.nio.ByteBuffer,int,int)
me.carda.awesome_notifications.core.models.NotificationButtonModel: NotificationButtonModel()
io.flutter.embedding.engine.FlutterJNI: void attachToNative()
com.google.gson.stream.JsonWriter: void setHtmlSafe(boolean)
io.grpc.okhttp.internal.Protocol: io.grpc.okhttp.internal.Protocol valueOf(java.lang.String)
com.google.gson.stream.JsonReader: java.lang.String locationString()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setPivotX(float)
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: com.google.android.gms.tasks.Task didReinitializeFirebaseCore()
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter beginArray()
com.google.android.material.timepicker.ClockFaceView: ClockFaceView(android.content.Context,android.util.AttributeSet)
androidx.core.graphics.drawable.IconCompat$Api28Impl: java.lang.String getResPackage(java.lang.Object)
com.google.android.material.chip.Chip: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.util.TimeZone getTimeZone()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int numImageReaders()
io.flutter.embedding.engine.FlutterJNI: void setLocalizationPlugin(io.flutter.plugin.localization.LocalizationPlugin)
io.flutter.embedding.android.KeyData$Type: io.flutter.embedding.android.KeyData$Type valueOf(java.lang.String)
androidx.activity.OnBackPressedDispatcher$Api33Impl: android.window.OnBackInvokedCallback createOnBackInvokedCallback(kotlin.jvm.functions.Function0)
me.carda.awesome_notifications.core.models.DefaultsModel: me.carda.awesome_notifications.core.models.AbstractModel fromJson(java.lang.String)
android.support.v4.media.RatingCompat$Api19Impl: android.media.Rating newThumbRating(boolean)
com.google.android.material.floatingactionbutton.FloatingActionButton$Behavior: FloatingActionButton$Behavior(android.content.Context,android.util.AttributeSet)
android.support.v4.media.session.PlaybackStateCompat$Api21Impl: android.os.Bundle getExtras(android.media.session.PlaybackState$CustomAction)
me.carda.awesome_notifications.core.managers.DisplayedManager: boolean saveDisplayed(android.content.Context,me.carda.awesome_notifications.core.models.returnedData.NotificationReceived)
io.flutter.embedding.engine.FlutterJNI: void setPlatformViewsController(io.flutter.plugin.platform.PlatformViewsController)
androidx.core.view.VelocityTrackerCompat$Api34Impl: float getAxisVelocity(android.view.VelocityTracker,int)
me.carda.awesome_notifications.core.utils.StringUtils: java.lang.String digestString(java.lang.String)
com.google.firebase.firestore.proto.MaybeDocument$DocumentTypeCase: com.google.firebase.firestore.proto.MaybeDocument$DocumentTypeCase[] values()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void onImage(android.media.ImageReader,android.media.Image)
androidx.appcompat.widget.FitWindowsLinearLayout: FitWindowsLinearLayout(android.content.Context,android.util.AttributeSet)
me.carda.awesome_notifications.core.enumerators.ForegroundServiceType: int toAndroidServiceType()
me.carda.awesome_notifications.core.managers.StatusBarManager: boolean dismissNotificationsByChannelKey(android.content.Context,java.lang.String)
me.carda.awesome_notifications.core.utils.CalendarUtils: CalendarUtils()
android.support.v4.media.session.PlaybackStateCompat$Api21Impl: java.lang.String getAction(android.media.session.PlaybackState$CustomAction)
io.flutter.plugins.firebase.core.FlutterFirebaseCorePlugin: FlutterFirebaseCorePlugin()
androidx.media.AudioAttributesCompatParcelizer: androidx.media.AudioAttributesCompat read(androidx.versionedparcelable.VersionedParcel)
me.carda.awesome_notifications.core.enumerators.NotificationLayout: me.carda.awesome_notifications.core.enumerators.NotificationLayout valueOf(java.lang.String)
me.carda.awesome_notifications.core.utils.ListUtils: ListUtils()
com.google.android.material.button.MaterialButton: void setIconTintResource(int)
androidx.recyclerview.widget.RecyclerView: void setLayoutManager(androidx.recyclerview.widget.RecyclerView$LayoutManager)
androidx.core.app.NotificationCompat$MessagingStyle$Api24Impl: android.app.Notification$MessagingStyle addMessage(android.app.Notification$MessagingStyle,android.app.Notification$MessagingStyle$Message)
me.carda.awesome_notifications.core.builders.NotificationBuilder: void forceBringAppToForeground(android.content.Context)
com.google.android.material.textfield.TextInputLayout: int getPlaceholderTextAppearance()
io.flutter.embedding.engine.FlutterJNI: void onDisplayOverlaySurface(int,int,int,int,int)
com.google.gson.stream.JsonReader$1: JsonReader$1()
com.google.android.material.textfield.TextInputLayout: void setHint(int)
me.carda.awesome_notifications.core.managers.LostEventsManager: java.lang.String generateKeyDateToEvent(java.util.Calendar,java.lang.Integer,java.lang.String)
androidx.constraintlayout.solver.widgets.analyzer.WidgetRun$RunType: androidx.constraintlayout.solver.widgets.analyzer.WidgetRun$RunType valueOf(java.lang.String)
me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException: java.lang.String getDetailedCode()
me.carda.awesome_notifications.core.managers.BadgeManager: BadgeManager()
me.carda.awesome_notifications.core.utils.MediaUtils: java.lang.Boolean matchMediaType(java.lang.String,java.lang.String,java.lang.Boolean)
com.google.android.material.textfield.TextInputLayout: void setMinWidthResource(int)
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState valueOf(java.lang.String)
androidx.core.widget.TextViewCompat$Api23Impl: android.content.res.ColorStateList getCompoundDrawableTintList(android.widget.TextView)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$302(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean)
androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper$Impl29: AppCompatTextViewAutoSizeHelper$Impl29()
me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour: me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour[] $values()
com.google.android.material.snackbar.SnackbarContentLayout: android.widget.Button getActionView()
me.carda.awesome_notifications.core.managers.PermissionManager: boolean isSpecifiedPermissionGloballyAllowed(android.content.Context,me.carda.awesome_notifications.core.enumerators.NotificationPermission)
me.carda.awesome_notifications.core.services.ForegroundService: boolean serviceIsRunning(java.lang.Integer)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setPivotY(float)
com.google.android.material.button.MaterialButton: void setIconTint(android.content.res.ColorStateList)
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setBody(me.carda.awesome_notifications.core.models.NotificationModel,androidx.core.app.NotificationCompat$Builder)
me.carda.awesome_notifications.core.broadcasters.senders.BroadcastSender: void sendBroadcastNotificationDismissed(android.content.Context,me.carda.awesome_notifications.core.models.returnedData.ActionReceived)
me.carda.awesome_notifications.core.managers.DismissedManager: me.carda.awesome_notifications.core.managers.DismissedManager getInstance()
androidx.core.view.animation.PathInterpolatorCompat$Api21Impl: android.view.animation.Interpolator createPathInterpolator(android.graphics.Path)
com.google.android.material.textfield.TextInputLayout: void setPrefixTextAppearance(int)
com.google.android.material.textfield.TextInputLayout: void setCounterTextColor(android.content.res.ColorStateList)
me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException: AwesomeNotificationsException(java.lang.String,java.lang.String,java.lang.String,java.lang.Exception)
com.google.gson.internal.bind.TypeAdapters$13: TypeAdapters$13()
me.carda.awesome_notifications.core.models.DefaultsModel: me.carda.awesome_notifications.core.models.DefaultsModel fromJson(java.lang.String)
androidx.coordinatorlayout.widget.CoordinatorLayout: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)
androidx.appcompat.widget.AppCompatTextView: androidx.core.text.PrecomputedTextCompat$Params getTextMetricsParamsCompat()
me.carda.awesome_notifications.core.managers.RepositoryManager: java.lang.Boolean set(android.content.Context,java.lang.String,java.lang.String,me.carda.awesome_notifications.core.models.AbstractModel)
com.google.android.material.chip.Chip: void setEnsureMinTouchTargetSize(boolean)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter close(int,int,char)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List getMutators()
io.flutter.embedding.engine.FlutterJNI: void setSemanticsEnabled(boolean)
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeExceptionReceiver: me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeExceptionReceiver unsubscribeOnNotificationEvents(me.carda.awesome_notifications.core.listeners.AwesomeExceptionListener)
androidx.constraintlayout.helper.widget.Flow: void setWrapMode(int)
com.google.android.material.chip.Chip: float getChipEndPadding()
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness[] values()
com.google.android.material.internal.BaselineLayout: int getBaseline()
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setFullScreenIntent(android.content.Context,android.app.PendingIntent,me.carda.awesome_notifications.core.models.NotificationModel,androidx.core.app.NotificationCompat$Builder)
com.google.firebase.firestore.LoadBundleTaskProgress$TaskState: com.google.firebase.firestore.LoadBundleTaskProgress$TaskState[] values()
com.google.firestore.admin.v1.Index$IndexField$ValueModeCase: com.google.firestore.admin.v1.Index$IndexField$ValueModeCase valueOf(java.lang.String)
androidx.appcompat.view.menu.ListMenuItemView: void setCheckable(boolean)
io.grpc.Status$Code: io.grpc.Status$Code[] values()
androidx.appcompat.widget.Toolbar: void setLogoDescription(java.lang.CharSequence)
com.google.android.material.transformation.FabTransformationBehavior: FabTransformationBehavior()
com.google.android.material.textfield.TextInputLayout: void setExpandedHintEnabled(boolean)
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides valueOf(java.lang.String)
androidx.appcompat.widget.AppCompatCheckBox: void setBackgroundResource(int)
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: void setBaseTransientBottomBar(com.google.android.material.snackbar.BaseTransientBottomBar)
com.google.android.material.bottomsheet.BottomSheetBehavior: BottomSheetBehavior(android.content.Context,android.util.AttributeSet)
me.carda.awesome_notifications.core.builders.NotificationBuilder: java.lang.Boolean setMediaPlayerLayout(android.content.Context,me.carda.awesome_notifications.core.models.NotificationModel,androidx.core.app.NotificationCompat$Builder,android.content.Intent,me.carda.awesome_notifications.core.models.NotificationChannelModel)
me.carda.awesome_notifications.core.AwesomeNotifications: void cancelAllNotifications()
me.leolin.shortcutbadger.impl.NovaHomeBadger: NovaHomeBadger()
androidx.appcompat.view.menu.ExpandedMenuView: ExpandedMenuView(android.content.Context,android.util.AttributeSet)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: void setAllFloatValues(android.content.Context,java.lang.String,java.util.Map)
androidx.core.view.ViewParentCompat$Api21Impl: void onStopNestedScroll(android.view.ViewParent,android.view.View)
com.google.firestore.v1.Value$ValueTypeCase: com.google.firestore.v1.Value$ValueTypeCase[] values()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: java.lang.String getPathName()
me.carda.awesome_notifications.core.models.NotificationCalendarModel: me.carda.awesome_notifications.core.models.AbstractModel fromJson(java.lang.String)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void remove()
com.google.android.material.internal.NavigationMenuView: int getWindowAnimations()
me.carda.awesome_notifications.core.managers.DefaultsManager: boolean setDismissedCallbackDispatcher(android.content.Context,java.lang.Long)
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getFixedWidthMinor()
me.carda.awesome_notifications.core.utils.IntegerUtils: int generateNextRandomId()
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceChanged(long,int,int)
androidx.core.view.ViewParentCompat$Api21Impl: void onNestedPreScroll(android.view.ViewParent,android.view.View,int,int,int[])
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: void removeString(android.content.Context,java.lang.String,java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void dispatchEmptyPlatformMessage(java.lang.String,int)
androidx.core.app.NotificationCompat$MessagingStyle$Message$Api24Impl: android.app.Notification$MessagingStyle$Message createMessage(java.lang.CharSequence,long,java.lang.CharSequence)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodSetEventsHandle(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.appcompat.widget.ActionBarContainer: void setVisibility(int)
me.carda.awesome_notifications.core.models.NotificationChannelModel: void validate(android.content.Context)
me.carda.awesome_notifications.core.models.AbstractModel: me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType)
me.carda.awesome_notifications.core.managers.LostEventsManager: me.carda.awesome_notifications.core.managers.LostEventsManager getInstance()
me.carda.awesome_notifications.core.managers.StatusBarManager: void setIndexCollapsedLayout(android.content.SharedPreferences$Editor,java.lang.String,boolean)
androidx.core.view.ViewCompat$Api21Impl: void setBackgroundTintList(android.view.View,android.content.res.ColorStateList)
androidx.core.widget.TextViewCompat$Api23Impl: void setBreakStrategy(android.widget.TextView,int)
androidx.appcompat.widget.AppCompatTextView: int getAutoSizeMinTextSize()
com.google.android.material.chip.Chip: void setIconEndPaddingResource(int)
androidx.core.app.NotificationCompat$Builder$Api21Impl: android.media.AudioAttributes$Builder setLegacyStreamType(android.media.AudioAttributes$Builder,int)
com.google.gson.stream.JsonReader: void endArray()
me.carda.awesome_notifications.core.managers.PermissionManager: boolean isSpecifiedChannelPermissionAllowed(android.content.Context,java.lang.String,me.carda.awesome_notifications.core.enumerators.NotificationPermission)
android.support.v4.media.MediaDescriptionCompat$Api21Impl: android.graphics.Bitmap getIconBitmap(android.media.MediaDescription)
android.support.v4.media.MediaDescriptionCompat$Api21Impl: android.media.MediaDescription build(android.media.MediaDescription$Builder)
io.grpc.util.SecretRoundRobinLoadBalancerProvider$Provider: boolean isAvailable()
me.carda.awesome_notifications.core.exceptions.ExceptionFactory: void registerNewAwesomeException(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
com.google.android.material.appbar.MaterialToolbar: android.widget.ImageView$ScaleType getLogoScaleType()
com.google.android.material.textfield.TextInputLayout: void setBoxBackgroundColor(int)
me.carda.awesome_notifications.core.threads.NotificationSender: void send(android.content.Context,me.carda.awesome_notifications.core.builders.NotificationBuilder,me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle,me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.completion_handlers.NotificationThreadCompletionHandler)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.util.Map getBooleansStartingWith(android.content.Context,java.lang.String,java.lang.String)
com.google.android.material.button.MaterialButton: void setStrokeColor(android.content.res.ColorStateList)
androidx.constraintlayout.widget.ConstraintLayout: void setMaxHeight(int)
me.carda.awesome_notifications.core.threads.NotificationSender: me.carda.awesome_notifications.core.models.NotificationModel showNotification(android.content.Context,me.carda.awesome_notifications.core.models.NotificationModel,android.content.Intent)
com.google.android.material.behavior.SwipeDismissBehavior: SwipeDismissBehavior()
com.google.android.material.internal.TouchObserverFrameLayout: TouchObserverFrameLayout(android.content.Context,android.util.AttributeSet)
androidx.appcompat.widget.AppCompatTextView: android.view.textclassifier.TextClassifier getTextClassifier()
com.google.android.material.textfield.TextInputLayout: com.google.android.material.internal.CheckableImageButton getEndIconView()
com.google.android.material.chip.Chip: com.google.android.material.shape.ShapeAppearanceModel getShapeAppearanceModel()
androidx.recyclerview.widget.RecyclerView: void setAdapter(androidx.recyclerview.widget.RecyclerView$Adapter)
com.google.android.material.textfield.TextInputLayout: android.widget.ImageView$ScaleType getEndIconScaleType()
com.google.gson.stream.JsonReader: void push(int)
androidx.appcompat.widget.Toolbar: int getTitleMarginStart()
com.google.gson.internal.bind.TypeAdapters$3: TypeAdapters$3()
me.carda.awesome_notifications.core.managers.BadgeManager: void resetGlobalBadgeCounter(android.content.Context)
androidx.coordinatorlayout.widget.CoordinatorLayout: void setStatusBarBackground(android.graphics.drawable.Drawable)
androidx.core.widget.NestedScrollView: int getMaxScrollAmount()
com.google.gson.ToNumberPolicy: com.google.gson.ToNumberPolicy valueOf(java.lang.String)
me.carda.awesome_notifications.core.managers.StatusBarManager: void dismissNotification(android.content.Context,java.lang.Integer)
androidx.core.app.NotificationCompatBuilder$Api26Impl: android.app.Notification$Builder createBuilder(android.content.Context,java.lang.String)
com.google.firebase.concurrent.UiExecutor: com.google.firebase.concurrent.UiExecutor[] values()
io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType[] values()
io.flutter.plugins.firebase.core.FlutterFirebasePlugin: com.google.android.gms.tasks.Task didReinitializeFirebaseCore()
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState[] values()
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getSystemGestureInsets()
android.support.v4.media.MediaDescriptionCompat$Api21Impl: java.lang.CharSequence getSubtitle(android.media.MediaDescription)
androidx.core.view.WindowInsetsCompat$Impl: void setRootWindowInsets(androidx.core.view.WindowInsetsCompat)
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeBroadcastReceiver: void initializeExternalPlugins(android.content.Context)
androidx.core.view.ViewConfigurationCompat$Api34Impl: int getScaledMinimumFlingVelocity(android.view.ViewConfiguration,int,int,int)
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action)
com.google.android.material.textfield.TextInputLayout: android.graphics.drawable.Drawable getEditTextBoxBackground()
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(double)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: SurfaceTextureWrapper(android.graphics.SurfaceTexture)
com.google.android.material.chip.Chip: void setChipIconTint(android.content.res.ColorStateList)
androidx.appcompat.widget.AppCompatTextView: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode[] values()
androidx.appcompat.widget.AppCompatButton: void setSupportAllCaps(boolean)
me.carda.awesome_notifications.DartBackgroundExecutor: void dischargeNextSilentExecution()
androidx.appcompat.widget.ActionMenuView: void setOnMenuItemClickListener(androidx.appcompat.widget.ActionMenuView$OnMenuItemClickListener)
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap nativeGetBitmap(long)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: int getRootAlpha()
androidx.core.graphics.drawable.IconCompat$Api28Impl: int getResId(java.lang.Object)
androidx.fragment.app.FragmentContainerView: androidx.fragment.app.Fragment getFragment()
me.carda.awesome_notifications.core.managers.StatusBarManager: java.lang.String getIndexActiveNotificationGroup(java.lang.String)
androidx.core.view.WindowInsetsCompat$BuilderImpl20: WindowInsetsCompat$BuilderImpl20(androidx.core.view.WindowInsetsCompat)
com.google.firebase.firestore.AggregateSource: com.google.firebase.firestore.AggregateSource[] values()
com.google.android.material.textfield.TextInputEditText: TextInputEditText(android.content.Context,android.util.AttributeSet)
me.carda.awesome_notifications.core.services.BackgroundService: BackgroundService()
androidx.core.view.ViewCompat$Api26Impl: android.view.View keyboardNavigationClusterSearch(android.view.View,android.view.View,int)
com.google.android.material.chip.Chip: void setHideMotionSpec(com.google.android.material.animation.MotionSpec)
com.google.firebase.components.ComponentDiscoveryService: ComponentDiscoveryService()
androidx.appcompat.widget.AppCompatTextView: void setFirstBaselineToTopHeight(int)
me.carda.awesome_notifications.core.managers.StatusBarManager: void removeIndexActiveNotificationChannel(android.content.SharedPreferences$Editor,java.lang.String)
me.carda.awesome_notifications.core.managers.StatusBarManager: void resetRegisters()
io.flutter.plugins.firebase.core.FlutterFirebaseCoreRegistrar: FlutterFirebaseCoreRegistrar()
androidx.core.view.ViewCompat$Api31Impl: void setOnReceiveContentListener(android.view.View,java.lang.String[],androidx.core.view.OnReceiveContentListener)
me.carda.awesome_notifications.core.managers.CancellationManager: boolean cancelSchedulesByChannelKey(android.content.Context,java.lang.String)
com.google.android.material.textfield.TextInputLayout: java.lang.CharSequence getEndIconContentDescription()
me.carda.awesome_notifications.core.managers.ActionManager: me.carda.awesome_notifications.core.models.returnedData.ActionReceived getInitialActionReceived()
androidx.fragment.app.FragmentContainerView: void setOnApplyWindowInsetsListener(android.view.View$OnApplyWindowInsetsListener)
androidx.core.widget.EdgeEffectCompat$Api21Impl: void onPull(android.widget.EdgeEffect,float,float)
androidx.core.view.ViewCompat$Api21Impl: void setTransitionName(android.view.View,java.lang.String)
androidx.appcompat.widget.FitWindowsFrameLayout: FitWindowsFrameLayout(android.content.Context,android.util.AttributeSet)
me.carda.awesome_notifications.core.utils.JsonUtils: org.json.JSONObject mapToJson(java.util.Map)
com.google.firestore.v1.BatchGetDocumentsResponse$ResultCase: com.google.firestore.v1.BatchGetDocumentsResponse$ResultCase[] values()
com.google.android.material.chip.Chip: void setChipIconSize(float)
androidx.window.layout.adapter.sidecar.DistinctElementSidecarCallback: void onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState)
androidx.core.view.WindowInsetsCompat$Impl21: void setStableInsets(androidx.core.graphics.Insets)
androidx.appcompat.widget.AppCompatCheckBox: void setFilters(android.text.InputFilter[])
io.grpc.internal.ManagedChannelImpl$ResolutionState: io.grpc.internal.ManagedChannelImpl$ResolutionState[] values()
androidx.appcompat.widget.ActionMenuView: int getPopupTheme()
io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams[] values()
com.google.android.material.textfield.TextInputLayout: int getBoxBackgroundMode()
me.carda.awesome_notifications.core.utils.CompareUtils: CompareUtils()
com.google.android.material.internal.NavigationMenuItemView: void setIconPadding(int)
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.lang.String getExpressionSummary()
me.carda.awesome_notifications.core.models.NotificationChannelGroupModel: java.lang.String toJson()
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodClearStoredActions(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.appcompat.widget.AppCompatButton: int getAutoSizeStepGranularity()
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setNotificationId(me.carda.awesome_notifications.core.models.NotificationModel)
io.flutter.view.AccessibilityViewEmbedder: void setFlutterNodesTranslateBounds(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Rect,android.view.accessibility.AccessibilityNodeInfo)
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getFixedHeightMinor()
android.support.v4.app.RemoteActionCompatParcelizer: RemoteActionCompatParcelizer()
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: java.util.Map getAllSchedules(android.content.Context)
me.carda.awesome_notifications.core.managers.PermissionManager: void requestUserPermissions(android.app.Activity,android.content.Context,java.lang.String,java.util.List,me.carda.awesome_notifications.core.completion_handlers.PermissionCompletionHandler)
me.carda.awesome_notifications.core.enumerators.SafeEnum$-CC: boolean charMatches(java.lang.String,int,int,char)
androidx.appcompat.widget.ActionBarContainer: void setTabContainer(androidx.appcompat.widget.ScrollingTabContainerView)
me.carda.awesome_notifications.core.managers.LostEventsManager: java.util.Map recoverNotificationDisplayed(android.content.Context)
com.google.android.material.textfield.TextInputLayout: float getBoxCornerRadiusTopEnd()
com.google.firebase.firestore.core.EventManager$ListenerSetupAction: com.google.firebase.firestore.core.EventManager$ListenerSetupAction[] values()
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: int floatCount(android.content.Context,java.lang.String)
io.flutter.view.TextureRegistry$SurfaceProducer: void setSize(int,int)
com.google.android.material.snackbar.SnackbarContentLayout: android.widget.TextView getMessageView()
me.carda.awesome_notifications.core.managers.CreatedManager: CreatedManager()
androidx.appcompat.widget.Toolbar: void setLogoDescription(int)
androidx.recyclerview.widget.RecyclerView: void setLayoutFrozen(boolean)
me.carda.awesome_notifications.core.logs.Logger: void e(java.lang.String,java.lang.String)
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type valueOf(java.lang.String)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodGetAllActiveNotificationIdsOnStatusBar(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.coordinatorlayout.widget.CoordinatorLayout: void setFitsSystemWindows(boolean)
android.support.v4.media.MediaDescriptionCompat$Api21Impl: java.lang.String getMediaId(android.media.MediaDescription)
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat valueOf(java.lang.String)
androidx.core.view.WindowInsetsCompat$Impl: boolean isRound()
me.carda.awesome_notifications.core.AwesomeNotifications: AwesomeNotifications(android.content.Context)
io.flutter.embedding.android.FlutterImageView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
androidx.core.app.NotificationCompat$MessagingStyle$Api28Impl: android.app.Notification$MessagingStyle setGroupConversation(android.app.Notification$MessagingStyle,boolean)
androidx.appcompat.widget.Toolbar: void setCollapsible(boolean)
androidx.core.os.ConfigurationCompat$Api24Impl: android.os.LocaleList getLocales(android.content.res.Configuration)
io.flutter.embedding.engine.FlutterJNI: void dispatchPlatformMessage(java.lang.String,java.nio.ByteBuffer,int,int)
me.carda.awesome_notifications.core.managers.BadgeManager: boolean isBadgeAppGloballyAllowed(android.content.Context)
me.carda.awesome_notifications.core.managers.BadgeManager: boolean isBadgeDeviceGloballyAllowed(android.content.Context)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: void setAll(android.content.Context,java.lang.String,java.lang.String,java.util.Map,me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB$iSetAll)
me.carda.awesome_notifications.core.models.AbstractModel: me.carda.awesome_notifications.core.enumerators.NotificationSource getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,me.carda.awesome_notifications.core.enumerators.NotificationSource)
androidx.lifecycle.ProcessLifecycleOwner$attach$1: void onActivityPreCreated(android.app.Activity,android.os.Bundle)
com.google.firebase.firestore.MetadataChanges: com.google.firebase.firestore.MetadataChanges valueOf(java.lang.String)
com.google.gson.internal.bind.TypeAdapters$11: TypeAdapters$11()
com.google.gson.internal.bind.TypeAdapters$8: TypeAdapters$8()
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: void registerPlugin(java.lang.String,io.flutter.plugins.firebase.core.FlutterFirebasePlugin)
me.carda.awesome_notifications.core.models.returnedData.ActionReceived: me.carda.awesome_notifications.core.models.AbstractModel fromMap(java.util.Map)
com.google.android.material.textfield.TextInputLayout: android.graphics.drawable.Drawable getEndIconDrawable()
androidx.appcompat.widget.AppCompatCheckBox: void setSupportButtonTintList(android.content.res.ColorStateList)
io.flutter.embedding.engine.FlutterJNI: void nativeRegisterImageTexture(long,long,java.lang.ref.WeakReference)
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event valueOf(java.lang.String)
androidx.core.app.NotificationCompatBuilder$Api29Impl: android.app.Notification$Action$Builder setContextual(android.app.Notification$Action$Builder,boolean)
androidx.constraintlayout.widget.ConstraintLayout: int getMaxWidth()
androidx.recyclerview.widget.RecyclerView: long getNanoTime()
me.carda.awesome_notifications.core.managers.LifeCycleManager: void onPaused()
androidx.appcompat.widget.ContentFrameLayout: android.util.TypedValue getFixedWidthMajor()
io.grpc.util.SecretRoundRobinLoadBalancerProvider$Provider: java.lang.String getPolicyName()
androidx.appcompat.widget.AppCompatEditText: void setEmojiCompatEnabled(boolean)
androidx.appcompat.widget.AppCompatCheckBox: android.graphics.PorterDuff$Mode getSupportCompoundDrawablesTintMode()
me.carda.awesome_notifications.core.managers.DisplayedManager: boolean removeAllDisplayed(android.content.Context)
androidx.recyclerview.widget.RecyclerView: void setNestedScrollingEnabled(boolean)
me.carda.awesome_notifications.core.utils.MapUtils: java.util.Map deepMerge(java.util.Map,java.util.Map)
me.carda.awesome_notifications.core.enumerators.NotificationImportance: java.lang.String getSafeName()
androidx.appcompat.widget.Toolbar: android.view.MenuInflater getMenuInflater()
androidx.fragment.app.strictmode.FragmentStrictMode$Flag: androidx.fragment.app.strictmode.FragmentStrictMode$Flag valueOf(java.lang.String)
com.google.firebase.firestore.FirebaseFirestoreException$Code: com.google.firebase.firestore.FirebaseFirestoreException$Code valueOf(java.lang.String)
androidx.core.app.JobIntentService: void setInterruptIfStopped(boolean)
me.carda.awesome_notifications.core.utils.CalendarUtils: java.util.Calendar calendarFromString(java.lang.String,java.lang.String)
androidx.appcompat.widget.AppCompatTextView: void setBackgroundDrawable(android.graphics.drawable.Drawable)
androidx.transition.Transition$Impl26: void setCurrentPlayTime(android.animation.Animator,long)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodCancelSchedulesByChannelKey(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader: DynamiteModule$DynamiteLoaderClassLoader()
me.carda.awesome_notifications.core.utils.BitmapUtils: android.graphics.Bitmap roundBitmap(android.graphics.Bitmap)
com.google.android.material.appbar.MaterialToolbar: void setSubtitleCentered(boolean)
androidx.core.app.NotificationCompatBuilder$Api23Impl: android.app.Notification$Action$Builder createBuilder(android.graphics.drawable.Icon,java.lang.CharSequence,android.app.PendingIntent)
me.carda.awesome_notifications.core.managers.ChannelGroupManager: void commitChanges(android.content.Context)
androidx.core.view.WindowInsetsCompat$Impl29: WindowInsetsCompat$Impl29(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
androidx.core.widget.ImageViewCompat$Api21Impl: void setImageTintList(android.widget.ImageView,android.content.res.ColorStateList)
com.google.android.material.snackbar.SnackbarContentLayout: void setMaxInlineActionWidth(int)
com.google.android.material.textfield.TextInputLayout: void setStartIconOnClickListener(android.view.View$OnClickListener)
me.carda.awesome_notifications.core.managers.ScheduleManager: java.util.List listScheduledIdsFromGroup(android.content.Context,java.lang.String)
me.carda.awesome_notifications.core.managers.SharedManager: me.carda.awesome_notifications.core.models.AbstractModel get(android.content.Context,java.lang.String,java.lang.String)
io.grpc.ChannelLogger$ChannelLogLevel: io.grpc.ChannelLogger$ChannelLogLevel valueOf(java.lang.String)
com.google.android.material.button.MaterialButton: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
me.carda.awesome_notifications.core.utils.AudioUtils: java.lang.Boolean isValidAudioResource(android.content.Context,java.lang.String)
androidx.activity.Api34Impl: int swipeEdge(android.window.BackEvent)
androidx.appcompat.widget.LinearLayoutCompat: void setDividerPadding(int)
com.google.android.material.button.MaterialButtonToggleGroup: int getFirstVisibleChildIndex()
com.google.android.material.textfield.TextInputLayout: void setStartIconDrawable(android.graphics.drawable.Drawable)
com.google.gson.stream.JsonReader: int nextNonWhitespace(boolean)
me.carda.awesome_notifications.core.utils.StringUtils: me.carda.awesome_notifications.core.utils.StringUtils getInstance()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStopped(android.app.Activity)
me.carda.awesome_notifications.core.decoders.BitmapResourceDecoder: byte[] convertBitmapToByteArray(android.graphics.Bitmap,java.io.ByteArrayOutputStream)
android.support.v4.media.session.PlaybackStateCompat$Api22Impl: android.os.Bundle getExtras(android.media.session.PlaybackState)
com.google.android.material.snackbar.BaseTransientBottomBar$Behavior: BaseTransientBottomBar$Behavior()
androidx.tracing.TraceApi29Impl: boolean isEnabled()
me.carda.awesome_notifications.core.managers.StatusBarManager: void setIndexActiveNotificationGroup(android.content.SharedPreferences$Editor,java.lang.String,java.lang.String)
androidx.appcompat.widget.Toolbar: java.lang.CharSequence getTitle()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: void setOnDescendantFocusChangeListener(android.view.View$OnFocusChangeListener)
com.google.android.material.chip.Chip: void setCheckedIconTintResource(int)
com.google.gson.stream.JsonReader: void skipValue()
io.flutter.plugin.platform.PlatformViewWrapper: int getRenderTargetHeight()
me.carda.awesome_notifications.core.AwesomeNotifications: void requestUserPermissions(android.app.Activity,java.lang.String,java.util.List,me.carda.awesome_notifications.core.completion_handlers.PermissionCompletionHandler)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
com.google.android.material.button.MaterialButton: android.text.Layout$Alignment getGravityTextAlignment()
androidx.constraintlayout.helper.widget.Flow: void setVerticalStyle(int)
me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType: java.lang.String getSafeName()
androidx.core.view.ViewCompat$Api30Impl: void setImportantForContentCapture(android.view.View,int)
io.flutter.embedding.engine.FlutterJNI: void nativeImageHeaderCallback(long,int,int)
me.carda.awesome_notifications.core.managers.DefaultsManager: boolean setDartCallbackDispatcher(android.content.Context,java.lang.Long)
me.carda.awesome_notifications.core.models.NotificationChannelModel: java.lang.Object clone()
androidx.constraintlayout.widget.ConstraintLayout: void setId(int)
io.flutter.view.TextureRegistry$SurfaceProducer: int getWidth()
me.carda.awesome_notifications.core.managers.ChannelGroupManager: void cancelAllChannelGroup(android.content.Context)
com.google.gson.internal.bind.DateTypeAdapter: DateTypeAdapter()
me.carda.awesome_notifications.core.enumerators.NotificationPrivacy: me.carda.awesome_notifications.core.enumerators.NotificationPrivacy[] $values()
androidx.window.area.reflectionguard.WindowAreaComponentApi2Requirements: void addRearDisplayStatusListener(androidx.window.extensions.core.util.function.Consumer)
androidx.appcompat.widget.AppCompatEditText: void setSupportBackgroundTintList(android.content.res.ColorStateList)
androidx.appcompat.widget.ActionBarOverlayLayout: void setHideOnContentScrollEnabled(boolean)
com.google.gson.stream.JsonWriter: boolean isHtmlSafe()
androidx.constraintlayout.widget.ConstraintAttribute$AttributeType: androidx.constraintlayout.widget.ConstraintAttribute$AttributeType valueOf(java.lang.String)
androidx.core.widget.PopupWindowCompat$Api23Impl: int getWindowLayoutType(android.widget.PopupWindow)
com.google.firebase.firestore.core.EventManager$ListenerSetupAction: com.google.firebase.firestore.core.EventManager$ListenerSetupAction valueOf(java.lang.String)
me.carda.awesome_notifications.core.models.NotificationCalendarModel: java.lang.String toJson()
io.grpc.InternalChannelz$ChannelTrace$Event$Severity: io.grpc.InternalChannelz$ChannelTrace$Event$Severity[] values()
androidx.appcompat.widget.AppCompatImageButton: void setBackgroundResource(int)
com.google.android.material.textfield.TextInputLayout: android.graphics.drawable.Drawable getPasswordVisibilityToggleDrawable()
me.carda.awesome_notifications.core.models.NotificationButtonModel: void adaptInputFieldToRequireText()
me.carda.awesome_notifications.core.listeners.AwesomeEventListener: void onNewAwesomeEvent(java.lang.String,java.util.Map)
me.carda.awesome_notifications.core.managers.PermissionManager: boolean isNotificationSoundGloballyAllowed(android.content.Context)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodSetLocalization(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: int stringCount(android.content.Context,java.lang.String)
me.carda.awesome_notifications.core.utils.MapUtils: com.google.common.base.Optional extractValue(java.util.Map,java.lang.String,java.lang.Class)
android.support.v4.media.RatingCompat$Api19Impl: android.media.Rating newUnratedRating(int)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushClipRect(int,int,int,int)
androidx.transition.ViewGroupUtils$Api29Impl: int getChildDrawingOrder(android.view.ViewGroup,int)
androidx.core.widget.TextViewCompat$Api28Impl: java.lang.String[] getDigitStrings(android.icu.text.DecimalFormatSymbols)
androidx.core.view.ViewCompat$Api21Impl: float getTranslationZ(android.view.View)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void waitOnFence(android.media.Image)
me.carda.awesome_notifications.core.utils.MapUtils: MapUtils()
com.google.firebase.ktx.FirebaseCommonLegacyRegistrar: java.util.List getComponents()
androidx.appcompat.widget.Toolbar: void setCollapseContentDescription(java.lang.CharSequence)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setStrokeAlpha(float)
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerView$ItemAnimator getItemAnimator()
androidx.appcompat.widget.ContentFrameLayout: void setAttachListener(androidx.appcompat.widget.ContentFrameLayout$OnAttachListener)
com.google.android.material.internal.ForegroundLinearLayout: void setForeground(android.graphics.drawable.Drawable)
me.carda.awesome_notifications.core.managers.ChannelManager: android.app.NotificationManager getAndroidNotificationManager(android.content.Context)
androidx.appcompat.widget.AppCompatCheckBox: void setButtonDrawable(int)
androidx.appcompat.widget.Toolbar: void setTitleMarginBottom(int)
com.google.android.material.textfield.TextInputLayout: void setErrorIconDrawable(int)
androidx.appcompat.view.menu.ListMenuItemView: void setSubMenuArrowVisible(boolean)
androidx.appcompat.widget.AppCompatTextView: void setTextClassifier(android.view.textclassifier.TextClassifier)
com.google.android.material.chip.Chip: void setCloseIconVisible(int)
com.google.android.material.appbar.MaterialToolbar: void setElevation(float)
androidx.core.widget.PopupWindowCompat$Api23Impl: void setWindowLayoutType(android.widget.PopupWindow,int)
androidx.core.graphics.drawable.IconCompat$Api28Impl: android.net.Uri getUri(java.lang.Object)
androidx.core.view.ViewCompat$Api30Impl: int getImportantForContentCapture(android.view.View)
io.flutter.embedding.engine.FlutterJNI: void ensureNotAttachedToNative()
androidx.core.view.WindowInsetsCompat$Impl21: androidx.core.view.WindowInsetsCompat consumeSystemWindowInsets()
com.google.android.material.button.MaterialButtonToggleGroup: java.util.List getCheckedButtonIds()
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setChronometer(me.carda.awesome_notifications.core.models.NotificationModel,androidx.core.app.NotificationCompat$Builder)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.media.ImageReader createImageReader33()
me.carda.awesome_notifications.core.managers.PermissionManager: void updateChannelModelThroughPermissions(android.content.Context,java.lang.String,java.util.List)
android.support.v4.media.RatingCompat$Api19Impl: int getRatingStyle(android.media.Rating)
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection[] values()
androidx.core.os.LocaleListCompat$Api24Impl: android.os.LocaleList getAdjustedDefault()
androidx.core.view.ViewGroupCompat$Api21Impl: boolean isTransitionGroup(android.view.ViewGroup)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void install()
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory valueOf(java.lang.String)
com.google.gson.stream.JsonReader: void setLenient(boolean)
me.carda.awesome_notifications.core.managers.CancellationManager: boolean dismissNotificationsByGroupKey(android.content.Context,java.lang.String)
com.google.gson.internal.bind.TypeAdapters$6: TypeAdapters$6()
me.carda.awesome_notifications.core.managers.LifeCycleManager: void notify(me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle)
com.google.firebase.firestore.DocumentSnapshot$ServerTimestampBehavior: com.google.firebase.firestore.DocumentSnapshot$ServerTimestampBehavior[] values()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getPivotY()
androidx.media.AudioAttributesImplBaseParcelizer: AudioAttributesImplBaseParcelizer()
me.carda.awesome_notifications.core.models.DefaultsModel: me.carda.awesome_notifications.core.models.AbstractModel fromMap(java.util.Map)
androidx.recyclerview.widget.RecyclerView: void setEdgeEffectFactory(androidx.recyclerview.widget.RecyclerView$EdgeEffectFactory)
me.carda.awesome_notifications.core.managers.StatusBarManager: void registerNotificationIdOnPreferences(android.content.SharedPreferences$Editor,java.lang.String,java.util.Map,java.lang.String,java.lang.String)
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.lang.Object clone()
com.google.android.material.chip.Chip: android.graphics.drawable.Drawable getCloseIcon()
com.google.gson.stream.JsonReader: void beginObject()
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)
androidx.core.view.WindowInsetsCompat$Impl28: WindowInsetsCompat$Impl28(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl28)
androidx.lifecycle.ProcessLifecycleOwner$attach$1$onActivityPreCreated$1: void onActivityPostResumed(android.app.Activity)
android.support.v4.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel)
androidx.appcompat.widget.AppCompatEditText: void setKeyListener(android.text.method.KeyListener)
com.google.android.material.button.MaterialButton: void setBackgroundTintList(android.content.res.ColorStateList)
androidx.appcompat.widget.AppCompatTextView: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.view.WindowInsetsCompat inset(int,int,int,int)
com.google.android.material.button.MaterialButton: void setBackgroundTintMode(android.graphics.PorterDuff$Mode)
androidx.appcompat.resources.Compatibility$Api21Impl: void inflate(android.graphics.drawable.Drawable,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.util.Date getNextValidTimeAfter(java.util.Date)
io.flutter.embedding.android.KeyData$Type: io.flutter.embedding.android.KeyData$Type[] values()
com.google.android.material.textfield.TextInputLayout: void setEndIconCheckable(boolean)
me.carda.awesome_notifications.core.models.NotificationIntervalModel: void validate(android.content.Context)
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: HiddenLifecycleReference(androidx.lifecycle.Lifecycle)
io.flutter.embedding.engine.FlutterJNI: void invokePlatformMessageResponseCallback(int,java.nio.ByteBuffer,int)
androidx.core.view.ViewCompat$Api28Impl: void addOnUnhandledKeyEventListener(android.view.View,androidx.core.view.ViewCompat$OnUnhandledKeyEventListenerCompat)
com.google.firebase.firestore.core.FieldFilter$Operator: com.google.firebase.firestore.core.FieldFilter$Operator[] values()
io.grpc.okhttp.OkHttpFrameLogger$SettingParams: io.grpc.okhttp.OkHttpFrameLogger$SettingParams valueOf(java.lang.String)
me.carda.awesome_notifications.DartBackgroundExecutor: void initializeReverseMethodChannel(io.flutter.plugin.common.BinaryMessenger)
com.google.gson.stream.JsonWriter: void replaceTop(int)
me.carda.awesome_notifications.core.externalLibs.CronExpression: void readObject(java.io.ObjectInputStream)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setSupportCompoundDrawablesTintMode(android.graphics.PorterDuff$Mode)
com.google.android.material.chip.Chip: void setCloseIconVisible(boolean)
me.carda.awesome_notifications.core.externalLibs.CronExpression: int findNextWhiteSpace(int,java.lang.String)
me.carda.awesome_notifications.core.utils.IntegerUtils: IntegerUtils()
com.google.android.material.button.MaterialButton: void setSupportBackgroundTintList(android.content.res.ColorStateList)
androidx.core.view.ViewCompat$Api28Impl: void setAccessibilityHeading(android.view.View,boolean)
io.flutter.plugins.firebase.core.FlutterFirebaseCoreRegistrar: java.util.List getComponents()
com.google.firestore.v1.DocumentTransform$FieldTransform$TransformTypeCase: com.google.firestore.v1.DocumentTransform$FieldTransform$TransformTypeCase valueOf(java.lang.String)
androidx.appcompat.widget.AppCompatEditText: void setBackgroundDrawable(android.graphics.drawable.Drawable)
me.carda.awesome_notifications.core.managers.ActionManager: boolean removeAction(android.content.Context,java.lang.Integer)
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements: void removeRearDisplayPresentationStatusListener(androidx.window.extensions.core.util.function.Consumer)
me.carda.awesome_notifications.core.models.NotificationChannelGroupModel: void validate(android.content.Context)
com.google.gson.internal.bind.TypeAdapters$5: TypeAdapters$5()
androidx.profileinstaller.ProfileInstallerInitializer: ProfileInstallerInitializer()
io.flutter.view.TextureRegistry$SurfaceProducer: long id()
me.carda.awesome_notifications.core.managers.StatusBarManager: void unregisterActiveNotification(android.content.Context,int)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setFillColor(int)
com.google.android.material.button.MaterialButton: void setStrokeColorResource(int)
me.carda.awesome_notifications.core.managers.StatusBarManager: me.carda.awesome_notifications.core.managers.StatusBarManager getInstance(android.content.Context)
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setTappableElementInsets(androidx.core.graphics.Insets)
android.support.v4.media.session.PlaybackStateCompat$Api21Impl: android.media.session.PlaybackState$Builder createBuilder()
me.carda.awesome_notifications.core.enumerators.NotificationCategory: NotificationCategory(java.lang.String,int,java.lang.String,java.lang.String)
com.google.gson.stream.JsonReader: java.lang.String getPath()
com.google.android.material.textfield.TextInputEditText: void setTextInputLayoutFocusedRectEnabled(boolean)
com.google.android.material.internal.BaselineLayout: BaselineLayout(android.content.Context,android.util.AttributeSet)
com.google.firebase.firestore.Source: com.google.firebase.firestore.Source[] values()
me.carda.awesome_notifications.core.managers.ChannelGroupManager: java.util.List listChannelGroup(android.content.Context)
me.carda.awesome_notifications.core.models.AbstractModel: java.lang.Byte getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,java.lang.Byte)
me.carda.awesome_notifications.core.background.BackgroundExecutor: boolean runBackgroundAction(android.content.Context,android.content.Intent)
me.carda.awesome_notifications.core.managers.PermissionManager: boolean gotoAndroidGlobalNotificationsPage(android.content.Context)
com.google.android.material.bottomappbar.BottomAppBar$Behavior: BottomAppBar$Behavior(android.content.Context,android.util.AttributeSet)
androidx.appcompat.widget.AppCompatTextClassifierHelper$Api26Impl: android.view.textclassifier.TextClassifier getTextClassifier(android.widget.TextView)
androidx.fragment.app.DialogFragment: DialogFragment()
com.google.android.material.chip.Chip: void setCloseIconPressed(boolean)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getTrimPathEnd()
me.carda.awesome_notifications.core.managers.DefaultsManager: boolean setDefaultIcon(android.content.Context,java.lang.String)
com.google.firestore.bundle.BundledQuery$LimitType: com.google.firestore.bundle.BundledQuery$LimitType valueOf(java.lang.String)
me.carda.awesome_notifications.core.managers.StatusBarManager: android.app.NotificationManager getNotificationManager(android.content.Context)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.lang.Boolean lambda$getBoolean$0(android.database.Cursor,int)
me.carda.awesome_notifications.core.services.ForegroundService: java.util.Map access$000()
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelIsNotificationAllowed(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)
androidx.appcompat.widget.AppCompatTextHelper$Api26Impl: void setAutoSizeTextTypeUniformWithPresetSizes(android.widget.TextView,int[],int)
androidx.core.app.NotificationCompat$MessagingStyle$Api24Impl: android.app.Notification$MessagingStyle setConversationTitle(android.app.Notification$MessagingStyle,java.lang.CharSequence)
androidx.coordinatorlayout.widget.CoordinatorLayout: void setVisibility(int)
androidx.appcompat.widget.ViewStubCompat: android.view.LayoutInflater getLayoutInflater()
me.carda.awesome_notifications.AwesomeNotificationsFlutterExtension: void initialize()
me.carda.awesome_notifications.core.models.AbstractModel: java.util.List getValueOrDefaultListMap(java.util.Map,java.lang.String,java.util.List)
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: int getMaxWidth()
me.carda.awesome_notifications.core.enumerators.NotificationImportance: me.carda.awesome_notifications.core.enumerators.NotificationImportance[] $values()
me.carda.awesome_notifications.core.managers.EventManager: java.lang.String _getKeyByIdAndDate(java.lang.Integer,java.util.Calendar)
com.google.android.material.appbar.MaterialToolbar: void setNavigationIcon(android.graphics.drawable.Drawable)
androidx.recyclerview.widget.RecyclerView: void setOnFlingListener(androidx.recyclerview.widget.RecyclerView$OnFlingListener)
me.carda.awesome_notifications.core.enumerators.NotificationSource: me.carda.awesome_notifications.core.enumerators.NotificationSource valueOf(java.lang.String)
me.carda.awesome_notifications.core.threads.NotificationThread: java.lang.Object onPostExecute(java.lang.Object)
com.google.android.material.chip.Chip: java.lang.CharSequence getAccessibilityClassName()
com.google.android.material.chip.Chip: float getCloseIconStartPadding()
com.google.firebase.firestore.model.MutableDocument$DocumentState: com.google.firebase.firestore.model.MutableDocument$DocumentState valueOf(java.lang.String)
androidx.appcompat.widget.AppCompatTextView: void setSupportCompoundDrawablesTintMode(android.graphics.PorterDuff$Mode)
android.support.v4.media.session.PlaybackStateCompat$Api21Impl: long getPosition(android.media.session.PlaybackState)
androidx.appcompat.widget.FitWindowsLinearLayout: void setOnFitSystemWindowsListener(androidx.appcompat.widget.FitWindowsViewGroup$OnFitSystemWindowsListener)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: boolean setBoolean(android.content.Context,java.lang.String,java.lang.String,boolean)
io.grpc.Status$Code: io.grpc.Status$Code valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterOverlaySurface createOverlaySurface()
io.grpc.okhttp.internal.framed.ErrorCode: io.grpc.okhttp.internal.framed.ErrorCode valueOf(java.lang.String)
com.google.gson.stream.JsonReader: java.lang.String nextQuotedValue(char)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode[] values()
com.google.gson.stream.JsonReader: boolean isLiteral(char)
com.google.gson.stream.MalformedJsonException: MalformedJsonException(java.lang.String)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: int intCount(android.content.Context,java.lang.String)
com.google.android.material.textfield.TextInputLayout: void setEndIconTintList(android.content.res.ColorStateList)
io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType: io.grpc.okhttp.OkHttpChannelBuilder$NegotiationType valueOf(java.lang.String)
io.grpc.internal.DnsNameResolverProvider: boolean isAvailable()
androidx.activity.Api34Impl: float touchX(android.window.BackEvent)
me.carda.awesome_notifications.core.threads.NotificationSender: me.carda.awesome_notifications.core.models.returnedData.NotificationReceived doInBackground()
androidx.appcompat.widget.AppCompatTextView: android.content.res.ColorStateList getSupportBackgroundTintList()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void scheduleFrame()
com.google.android.material.transformation.FabTransformationSheetBehavior: FabTransformationSheetBehavior()
androidx.coordinatorlayout.widget.CoordinatorLayout: int getNestedScrollAxes()
androidx.constraintlayout.widget.Barrier: int getType()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getScaleY()
me.carda.awesome_notifications.AwesomeNotificationsPlugin: boolean onNewIntent(android.content.Intent)
com.google.firestore.v1.ListenResponse$ResponseTypeCase: com.google.firestore.v1.ListenResponse$ResponseTypeCase valueOf(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void setDeferredComponentManager(io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager)
com.google.android.material.button.MaterialButton: int getIconGravity()
io.grpc.internal.PickFirstLoadBalancerProvider: boolean isAvailable()
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: void setAllStringValues(android.content.Context,java.lang.String,java.util.Map)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityResumed(android.app.Activity)
me.carda.awesome_notifications.core.utils.JsonUtils: java.lang.Object fromJson(java.lang.String)
com.google.android.material.chip.Chip: void setCheckedIconVisible(int)
com.google.android.material.chip.Chip: void setTextAppearanceResource(int)
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: java.util.Map getScheduleById(android.content.Context,java.lang.Integer)
androidx.media.AudioAttributesImplBaseParcelizer: androidx.media.AudioAttributesImplBase read(androidx.versionedparcelable.VersionedParcel)
androidx.core.graphics.drawable.IconCompat$Api26Impl: android.graphics.drawable.Drawable createAdaptiveIconDrawable(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)
io.flutter.view.TextureRegistry$ImageTextureEntry: long id()
me.carda.awesome_notifications.core.enumerators.LogLevel: me.carda.awesome_notifications.core.enumerators.LogLevel valueOf(java.lang.String)
androidx.activity.Api34Impl: float progress(android.window.BackEvent)
me.carda.awesome_notifications.core.AwesomeNotifications: int incrementGlobalBadgeCounter()
com.google.firebase.firestore.core.EventManager$ListenerRemovalAction: com.google.firebase.firestore.core.EventManager$ListenerRemovalAction valueOf(java.lang.String)
me.carda.awesome_notifications.core.models.NotificationButtonModel: java.lang.String toJson()
me.carda.awesome_notifications.core.enumerators.NotificationSource: me.carda.awesome_notifications.core.enumerators.NotificationSource[] values()
me.carda.awesome_notifications.core.managers.ActionManager: ActionManager()
io.flutter.embedding.engine.FlutterJNI: void nativePrefetchDefaultFontManager()
com.google.protobuf.FieldType: com.google.protobuf.FieldType[] values()
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodGetLifeCycle(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
me.carda.awesome_notifications.core.services.AutoCancelService: AutoCancelService()
androidx.core.app.NotificationCompat$Builder$Api21Impl: android.media.AudioAttributes$Builder setContentType(android.media.AudioAttributes$Builder,int)
io.flutter.embedding.engine.FlutterJNI: void init(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,long)
me.carda.awesome_notifications.core.managers.DefaultsManager: java.lang.Long getSilentCallbackDispatcher(android.content.Context)
me.carda.awesome_notifications.core.models.NotificationButtonModel: void validate(android.content.Context)
me.carda.awesome_notifications.core.models.NotificationContentModel: void validateBigPicture(android.content.Context)
com.google.gson.internal.bind.TypeAdapters$9: TypeAdapters$9()
me.carda.awesome_notifications.core.models.NotificationContentModel: void validateLargeIcon(android.content.Context)
androidx.appcompat.widget.AppCompatCheckBox: android.content.res.ColorStateList getSupportBackgroundTintList()
me.carda.awesome_notifications.core.models.NotificationLocalizationModel: me.carda.awesome_notifications.core.models.AbstractModel fromJson(java.lang.String)
com.google.android.material.textfield.TextInputLayout: void setHelperText(java.lang.CharSequence)
com.google.android.material.textfield.TextInputLayout: void setCursorErrorColor(android.content.res.ColorStateList)
com.google.firestore.v1.DocumentTransform$FieldTransform$ServerValue: com.google.firestore.v1.DocumentTransform$FieldTransform$ServerValue[] values()
com.google.android.material.textfield.TextInputLayout: int getBoxCollapsedPaddingTop()
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsets(int,boolean)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodCreateNotification(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
me.carda.awesome_notifications.core.enumerators.MediaSource: me.carda.awesome_notifications.core.enumerators.MediaSource[] values()
androidx.core.widget.CompoundButtonCompat$Api21Impl: void setButtonTintMode(android.widget.CompoundButton,android.graphics.PorterDuff$Mode)
androidx.emoji2.text.EmojiExclusions$EmojiExclusions_Api34: java.util.Set getExclusions()
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setBackgroundDrawable(android.graphics.drawable.Drawable)
me.carda.awesome_notifications.core.enumerators.GroupSort: me.carda.awesome_notifications.core.enumerators.GroupSort[] $values()
io.flutter.embedding.android.FlutterView: void setWindowInfoListenerDisplayFeatures(androidx.window.layout.WindowLayoutInfo)
me.carda.awesome_notifications.core.builders.NotificationBuilder: java.lang.String getAppName(android.content.Context)
me.carda.awesome_notifications.core.models.returnedData.ActionReceived: me.carda.awesome_notifications.core.models.NotificationContentModel fromMap(java.util.Map)
androidx.transition.ViewUtilsApi21$Api29Impl: void transformMatrixToLocal(android.view.View,android.graphics.Matrix)
androidx.core.view.ViewCompat$Api21Impl: void setTranslationZ(android.view.View,float)
androidx.core.app.NotificationCompat$MessagingStyle$Message$Api24Impl: android.app.Notification$MessagingStyle$Message setData(android.app.Notification$MessagingStyle$Message,java.lang.String,android.net.Uri)
androidx.core.view.ViewParentCompat$Api21Impl: void onNestedScrollAccepted(android.view.ViewParent,android.view.View,android.view.View,int)
me.carda.awesome_notifications.core.managers.DefaultsManager: void commitChanges(android.content.Context)
androidx.core.content.ContextCompat$Api28Impl: java.util.concurrent.Executor getMainExecutor(android.content.Context)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getFillAlpha()
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat consumeDisplayCutout()
androidx.transition.ViewUtilsApi23$Api29Impl: void setTransitionVisibility(android.view.View,int)
me.carda.awesome_notifications.core.utils.SerializableUtils: java.util.TimeZone deserializeTimeZone(java.lang.String)
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: void removeSchedulesByChannelKey(android.content.Context,java.lang.String)
me.carda.awesome_notifications.core.utils.MediaUtils: MediaUtils()
io.flutter.embedding.engine.FlutterJNI: void notifyLowMemoryWarning()
com.google.android.material.textfield.TextInputLayout: int getMinWidth()
me.carda.awesome_notifications.core.threads.NotificationThread: NotificationThread()
androidx.recyclerview.widget.GridLayoutManager: GridLayoutManager(android.content.Context,android.util.AttributeSet,int,int)
androidx.appcompat.widget.AppCompatImageButton: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
me.carda.awesome_notifications.core.threads.NotificationSender: me.carda.awesome_notifications.core.models.NotificationModel _buildSummaryGroupNotification(me.carda.awesome_notifications.core.models.NotificationModel)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(float)
me.carda.awesome_notifications.core.managers.PermissionManager: void fireActivityCompletionHandle()
me.carda.awesome_notifications.core.builders.NotificationBuilder: android.content.Intent getLaunchIntent(android.content.Context)
androidx.core.content.ContextCompat$Api23Impl: int getColor(android.content.Context,int)
me.carda.awesome_notifications.DartBackgroundExecutor: void closeBackgroundIsolate()
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
androidx.core.content.ContextCompat$Api24Impl: android.content.Context createDeviceProtectedStorageContext(android.content.Context)
android.support.v4.media.AudioAttributesImplApi21Parcelizer: androidx.media.AudioAttributesImplApi21 read(androidx.versionedparcelable.VersionedParcel)
me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour: me.carda.awesome_notifications.core.enumerators.GroupAlertBehaviour valueOf(java.lang.String)
androidx.core.view.WindowInsetsCompat$BuilderImpl: WindowInsetsCompat$BuilderImpl()
io.grpc.internal.MessageDeframer$State: io.grpc.internal.MessageDeframer$State[] values()
android.support.v4.media.session.PlaybackStateCompat$Api21Impl: java.lang.CharSequence getErrorMessage(android.media.session.PlaybackState)
me.carda.awesome_notifications.DartBackgroundExecutor: DartBackgroundExecutor()
io.flutter.embedding.engine.FlutterJNI: java.lang.String getObservatoryUri()
me.carda.awesome_notifications.core.models.NotificationContentModel: void validate(android.content.Context)
io.grpc.internal.DnsNameResolverProvider: java.util.Collection getProducedSocketAddressTypes()
com.google.gson.ToNumberPolicy: com.google.gson.ToNumberPolicy[] values()
android.support.v4.media.MediaDescriptionCompat$Api21Impl: void setExtras(android.media.MediaDescription$Builder,android.os.Bundle)
me.carda.awesome_notifications.core.managers.DisplayedManager: me.carda.awesome_notifications.core.models.returnedData.NotificationReceived getDisplayedByIdAndDate(android.content.Context,java.lang.Integer,java.util.Calendar)
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB getInstance(android.content.Context)
me.carda.awesome_notifications.core.decoders.BitmapResourceDecoder: java.lang.Object onPostExecute(java.lang.Object)
com.google.firebase.firestore.FirebaseFirestore: void setClientLanguage(java.lang.String)
me.carda.awesome_notifications.core.managers.ScheduleManager: void migrateSharedScheduleDatabase(android.content.Context,me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB,java.util.List)
io.flutter.embedding.engine.FlutterJNI: long nativeAttach(io.flutter.embedding.engine.FlutterJNI)
androidx.core.view.ViewCompat$Api26Impl: void setNextClusterForwardId(android.view.View,int)
android.support.v4.media.session.PlaybackStateCompat$Api21Impl: void addCustomAction(android.media.session.PlaybackState$Builder,android.media.session.PlaybackState$CustomAction)
androidx.core.view.WindowInsetsCompat$BuilderImpl20: WindowInsetsCompat$BuilderImpl20()
androidx.core.view.WindowInsetsCompat$BuilderImpl20: void setSystemWindowInsets(androidx.core.graphics.Insets)
androidx.core.view.WindowInsetsCompat$Impl20: void setRootViewData(androidx.core.graphics.Insets)
androidx.core.widget.TextViewCompat$Api23Impl: android.graphics.PorterDuff$Mode getCompoundDrawableTintMode(android.widget.TextView)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void finalize()
me.carda.awesome_notifications.core.utils.TimeZoneUtils: java.lang.String timeZoneToString(java.util.TimeZone)
androidx.appcompat.widget.Toolbar: android.widget.TextView getTitleTextView()
androidx.appcompat.widget.AppCompatEditText: androidx.appcompat.widget.AppCompatEditText$SuperCaller getSuperCaller()
me.carda.awesome_notifications.core.AwesomeNotifications: me.carda.awesome_notifications.core.AwesomeNotifications subscribeOnAwesomeNotificationEvents(me.carda.awesome_notifications.core.listeners.AwesomeEventListener)
androidx.transition.ViewGroupUtils$Api29Impl: void suppressLayout(android.view.ViewGroup,boolean)
io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$DocumentChangeType: io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$DocumentChangeType valueOf(java.lang.String)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: ImeSyncDeferringInsetsCallback(android.view.View)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsetsAnimation$Callback getAnimationCallback()
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
android.support.v4.media.MediaDescriptionCompat$Api21Impl: android.media.MediaDescription$Builder createBuilder()
androidx.core.app.RemoteInput$Api26Impl: android.app.RemoteInput$Builder setAllowDataType(android.app.RemoteInput$Builder,java.lang.String,boolean)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getTrimPathStart()
me.carda.awesome_notifications.core.enumerators.NotificationCategory: java.lang.String getSafeName()
me.carda.awesome_notifications.AwesomeNotificationsPlugin: AwesomeNotificationsPlugin()
androidx.core.os.LocaleListCompat$Api24Impl: android.os.LocaleList getDefault()
io.grpc.internal.DnsNameResolver$JdkAddressResolver: io.grpc.internal.DnsNameResolver$JdkAddressResolver[] values()
com.google.android.material.button.MaterialButton: void setPressed(boolean)
androidx.profileinstaller.FileSectionType: androidx.profileinstaller.FileSectionType valueOf(java.lang.String)
com.google.android.material.textfield.TextInputLayout: java.lang.CharSequence getPlaceholderText()
io.flutter.plugin.platform.SingleViewPresentation: SingleViewPresentation(android.content.Context,android.view.Display,io.flutter.plugin.platform.AccessibilityEventsDelegate,io.flutter.plugin.platform.SingleViewPresentation$PresentationState,android.view.View$OnFocusChangeListener,boolean)
com.google.android.material.chip.Chip: void setChipStrokeColor(android.content.res.ColorStateList)
me.carda.awesome_notifications.core.AwesomeNotifications: void detachAsMainInstance(me.carda.awesome_notifications.core.listeners.AwesomeEventListener)
androidx.core.widget.NestedScrollView$Api21Impl: boolean getClipToPadding(android.view.ViewGroup)
androidx.core.view.ViewCompat$Api28Impl: void setScreenReaderFocusable(android.view.View,boolean)
io.grpc.util.OutlierDetectionLoadBalancerProvider: io.grpc.NameResolver$ConfigOrError parseLoadBalancingPolicyConfig(java.util.Map)
io.flutter.embedding.engine.FlutterJNI: void nativeSetAccessibilityFeatures(long,int)
androidx.core.widget.TextViewCompat$Api28Impl: java.lang.CharSequence castToCharSequence(android.text.PrecomputedText)
androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getSystemGestureInsets()
io.grpc.TlsChannelCredentials$Feature: io.grpc.TlsChannelCredentials$Feature valueOf(java.lang.String)
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver: void onBroadcastDefaultActionNotification(android.content.Context,me.carda.awesome_notifications.core.models.returnedData.ActionReceived)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getTranslateX()
me.carda.awesome_notifications.core.externalLibs.CronExpression: void setTimeZone(java.util.TimeZone)
me.carda.awesome_notifications.core.managers.DismissedManager: java.util.List getDismissedByKey(android.content.Context,java.lang.Integer)
androidx.appcompat.widget.Toolbar: void setNavigationIcon(int)
androidx.appcompat.widget.AppCompatTextView: void setSupportCompoundDrawablesTintList(android.content.res.ColorStateList)
me.carda.awesome_notifications.core.AwesomeNotifications: boolean cancelNotificationsByChannelKey(java.lang.String)
me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle: me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle valueOf(java.lang.String)
android.support.v4.media.AudioAttributesImplApi26Parcelizer: androidx.media.AudioAttributesImplApi26 read(androidx.versionedparcelable.VersionedParcel)
androidx.room.MultiInstanceInvalidationService: MultiInstanceInvalidationService()
androidx.core.view.WindowInsetsCompat$BuilderImpl: void applyInsetTypes()
io.flutter.embedding.engine.FlutterJNI: void loadLibrary(android.content.Context)
me.carda.awesome_notifications.core.managers.DefaultsManager: java.lang.Long getActionCallbackDispatcher(android.content.Context)
me.leolin.shortcutbadger.impl.NewHtcHomeBadger: NewHtcHomeBadger()
androidx.appcompat.widget.Toolbar: void setTitleTextColor(int)
androidx.recyclerview.widget.RecyclerView: void setPreserveFocusAfterLayout(boolean)
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedFling(android.view.View,float,float,boolean)
androidx.core.app.RemoteInput$Api26Impl: void addDataResultToIntent(androidx.core.app.RemoteInput,android.content.Intent,java.util.Map)
me.carda.awesome_notifications.core.managers.ScheduleManager: java.util.List listSchedules(android.content.Context)
com.google.android.material.chip.Chip: float getIconStartPadding()
com.google.android.material.chip.Chip: void setTextAppearance(int)
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: java.util.Map getSchedulesByGroupKey(android.content.Context,java.lang.String)
androidx.core.app.NotificationCompat$MessagingStyle$Api26Impl: android.app.Notification$MessagingStyle addHistoricMessage(android.app.Notification$MessagingStyle,android.app.Notification$MessagingStyle$Message)
me.carda.awesome_notifications.core.threads.NotificationThread: void runOnBackgroundThread()
me.carda.awesome_notifications.core.enumerators.NotificationImportance: NotificationImportance(java.lang.String,int,java.lang.String)
androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getMandatorySystemGestureInsets()
me.carda.awesome_notifications.core.managers.DefaultsManager: void setAwesomeExtensionClassName(android.content.Context,java.lang.Class)
io.grpc.internal.GrpcUtil$Http2Error: io.grpc.internal.GrpcUtil$Http2Error valueOf(java.lang.String)
me.carda.awesome_notifications.core.AwesomeNotifications: me.carda.awesome_notifications.core.AwesomeNotifications unsubscribeOnAwesomeNotificationEvents(me.carda.awesome_notifications.core.listeners.AwesomeEventListener)
androidx.core.app.NotificationCompatBuilder$Api29Impl: android.app.Notification$Builder setAllowSystemGeneratedContextualActions(android.app.Notification$Builder,boolean)
com.google.android.material.textfield.TextInputLayout: void setTextInputAccessibilityDelegate(com.google.android.material.textfield.TextInputLayout$AccessibilityDelegate)
me.carda.awesome_notifications.core.utils.HtmlUtils: android.text.Spanned fromHtml(java.lang.String)
me.carda.awesome_notifications.core.utils.CalendarUtils: java.util.Calendar calendarFromString(java.lang.String)
io.flutter.view.TextureRegistry$GLTextureConsumer: android.graphics.SurfaceTexture getSurfaceTexture()
androidx.recyclerview.widget.RecyclerView: void setRecycledViewPool(androidx.recyclerview.widget.RecyclerView$RecycledViewPool)
androidx.core.app.NotificationCompat$Builder$Api21Impl: android.media.AudioAttributes build(android.media.AudioAttributes$Builder)
me.carda.awesome_notifications.core.externalLibs.CronExpression: void validateExpression(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void onEndFrame()
me.carda.awesome_notifications.core.externalLibs.CronExpression: int getMonthNumber(java.lang.String)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter name(java.lang.String)
com.google.android.material.textfield.TextInputLayout: void setBoxStrokeErrorColor(android.content.res.ColorStateList)
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setMandatorySystemGestureInsets(androidx.core.graphics.Insets)
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceDestroyed(long)
com.google.android.material.appbar.MaterialToolbar: void setLogoAdjustViewBounds(boolean)
androidx.recyclerview.widget.RecyclerView: void setHasFixedSize(boolean)
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver: void onBroadcastNotificationDisplayed(android.content.Context,me.carda.awesome_notifications.core.models.returnedData.NotificationReceived)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getRotation()
io.flutter.embedding.engine.FlutterJNI: void lambda$decodeImage$0(long,android.graphics.ImageDecoder,android.graphics.ImageDecoder$ImageInfo,android.graphics.ImageDecoder$Source)
androidx.core.view.ViewCompat$Api30Impl: void setStateDescription(android.view.View,java.lang.CharSequence)
me.carda.awesome_notifications.core.managers.ScheduleManager: boolean isPreciseAlarmGloballyAllowed(android.content.Context)
androidx.appcompat.widget.AppCompatTextView: android.content.res.ColorStateList getSupportCompoundDrawablesTintList()
androidx.appcompat.view.menu.ActionMenuItemView: void setItemInvoker(androidx.appcompat.view.menu.MenuBuilder$ItemInvoker)
androidx.coordinatorlayout.widget.CoordinatorLayout: void setStatusBarBackgroundColor(int)
me.carda.awesome_notifications.core.services.ForegroundService$ForegroundServiceIntent: java.lang.String toString()
com.google.gson.stream.JsonReader: int peekNumber()
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmojiModifier(int)
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: java.util.Map getSchedulesByChannelKey(android.content.Context,java.lang.String)
androidx.appcompat.widget.AppCompatImageButton: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.google.firebase.firestore.local.QueryPurpose: com.google.firebase.firestore.local.QueryPurpose valueOf(java.lang.String)
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: void onCreate(android.database.sqlite.SQLiteDatabase)
com.google.android.material.chip.Chip: void setChipText(java.lang.CharSequence)
io.flutter.plugins.GeneratedPluginRegistrant: void registerWith(io.flutter.embedding.engine.FlutterEngine)
me.carda.awesome_notifications.core.completion_handlers.ActivityCompletionHandler: void handle()
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: float getFloat(android.content.Context,java.lang.String,java.lang.String,float)
me.carda.awesome_notifications.core.broadcasters.senders.BroadcastSender: void sendBroadcastSilentAction(android.content.Context,me.carda.awesome_notifications.core.models.returnedData.ActionReceived)
com.google.android.material.chip.Chip: void setTextStartPaddingResource(int)
me.carda.awesome_notifications.core.AwesomeNotifications: me.carda.awesome_notifications.core.AwesomeNotifications subscribeOnNotificationEvents(me.carda.awesome_notifications.core.listeners.AwesomeNotificationEventListener)
android.support.v4.media.RatingCompat$Api19Impl: boolean isThumbUp(android.media.Rating)
androidx.core.view.MenuItemCompat$Api26Impl: android.graphics.PorterDuff$Mode getIconTintMode(android.view.MenuItem)
me.carda.awesome_notifications.core.models.AbstractModel: java.util.List getValueOrDefaultListString(java.util.Map,java.lang.String,java.util.List)
com.google.gson.internal.sql.SqlDateTypeAdapter: SqlDateTypeAdapter()
com.google.android.material.button.MaterialButton: void setCornerRadiusResource(int)
androidx.core.view.ViewCompat$Api30Impl: androidx.core.view.WindowInsetsControllerCompat getWindowInsetsController(android.view.View)
androidx.core.view.ViewGroupCompat$Api21Impl: void setTransitionGroup(android.view.ViewGroup,boolean)
com.google.android.material.chip.Chip: void setCloseIconEndPaddingResource(int)
com.google.android.material.chip.Chip: void setGravity(int)
me.carda.awesome_notifications.core.enumerators.ForegroundServiceType: me.carda.awesome_notifications.core.enumerators.ForegroundServiceType getSafeEnum(java.lang.String)
androidx.core.view.ViewGroupCompat$Api21Impl: int getNestedScrollAxes(android.view.ViewGroup)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setKeyListener(android.text.method.KeyListener)
io.grpc.internal.GzipInflatingBuffer$State: io.grpc.internal.GzipInflatingBuffer$State[] values()
com.google.protobuf.GeneratedMessageLite$MethodToInvoke: com.google.protobuf.GeneratedMessageLite$MethodToInvoke valueOf(java.lang.String)
android.support.v4.media.MediaDescriptionCompat$Api21Impl: void setTitle(android.media.MediaDescription$Builder,java.lang.CharSequence)
me.carda.awesome_notifications.core.managers.DismissedManager: boolean commitChanges(android.content.Context)
me.carda.awesome_notifications.core.AwesomeNotifications: boolean dismissNotification(java.lang.Integer)
androidx.appcompat.widget.Toolbar: int getContentInsetStart()
androidx.constraintlayout.widget.VirtualLayout: void setElevation(float)
me.carda.awesome_notifications.core.models.AbstractModel: long[] getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,long[])
androidx.appcompat.widget.AppCompatTextView: void setFilters(android.text.InputFilter[])
io.grpc.okhttp.OkHttpChannelProvider: io.grpc.ManagedChannelBuilder builderForTarget(java.lang.String)
androidx.transition.ViewUtilsApi22$Api29Impl: void setLeftTopRightBottom(android.view.View,int,int,int,int)
com.google.firestore.v1.Precondition$ConditionTypeCase: com.google.firestore.v1.Precondition$ConditionTypeCase valueOf(java.lang.String)
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setSystemWindowInsets(androidx.core.graphics.Insets)
com.google.android.material.internal.ClippableRoundedCornerLayout: ClippableRoundedCornerLayout(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushClipRRect(int,int,int,int,float[])
io.flutter.embedding.engine.FlutterJNI: void prefetchDefaultFontManager()
androidx.core.view.ViewParentCompat$Api21Impl: void onNestedScroll(android.view.ViewParent,android.view.View,int,int,int,int)
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type[] values()
com.google.android.material.chip.Chip: android.graphics.RectF getCloseIconTouchBounds()
androidx.appcompat.widget.AppCompatTextView: void setTextFuture(java.util.concurrent.Future)
androidx.recyclerview.widget.RecyclerView: void setViewCacheExtension(androidx.recyclerview.widget.RecyclerView$ViewCacheExtension)
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeExceptionReceiver: AwesomeExceptionReceiver(me.carda.awesome_notifications.core.utils.StringUtils)
me.carda.awesome_notifications.core.AwesomeNotifications: java.lang.String getLocalization()
androidx.constraintlayout.widget.ConstraintHelper: int[] getReferencedIds()
androidx.core.view.ViewCompat$Api28Impl: java.lang.CharSequence getAccessibilityPaneTitle(android.view.View)
me.carda.awesome_notifications.core.builders.NotificationBuilder: java.lang.Integer getBackgroundColor(me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.models.NotificationChannelModel,androidx.core.app.NotificationCompat$Builder)
com.google.firebase.ktx.FirebaseCommonLegacyRegistrar: FirebaseCommonLegacyRegistrar()
me.carda.awesome_notifications.core.managers.SharedManager: java.lang.Boolean removeAll(android.content.Context)
me.carda.awesome_notifications.core.models.NotificationCrontabModel: me.carda.awesome_notifications.core.models.NotificationCalendarModel fromJson(java.lang.String)
me.carda.awesome_notifications.core.threads.NotificationScheduler: java.lang.Object doInBackground()
me.carda.awesome_notifications.core.exceptions.ExceptionFactory: me.carda.awesome_notifications.core.exceptions.ExceptionFactory getInstance()
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat consumeStableInsets()
androidx.core.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel)
me.carda.awesome_notifications.core.utils.CompareUtils: boolean assertEqualNumbers(java.lang.Object,java.lang.Object)
androidx.core.app.NotificationCompat$Style$Api24Impl: void setChronometerCountDown(android.widget.RemoteViews,int,boolean)
io.flutter.plugins.GeneratedPluginRegistrant: GeneratedPluginRegistrant()
com.google.gson.internal.Excluder: Excluder()
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityDelegate(io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate)
me.carda.awesome_notifications.core.logs.Logger: void w(java.lang.String,java.lang.String)
me.carda.awesome_notifications.core.managers.PermissionManager: void refreshReturnedPermissions(android.content.Context,java.lang.String,java.util.List,me.carda.awesome_notifications.core.completion_handlers.PermissionCompletionHandler)
androidx.core.os.UserManagerCompat$Api24Impl: boolean isUserUnlocked(android.content.Context)
androidx.fragment.app.SpecialEffectsController$Operation$State: androidx.fragment.app.SpecialEffectsController$Operation$State[] values()
androidx.core.app.NotificationCompat$MessagingStyle$Message$Api28Impl: android.os.Parcelable castToParcelable(android.app.Person)
me.carda.awesome_notifications.core.managers.CancellationManager: boolean cancelNotificationsByChannelKey(android.content.Context,java.lang.String)
me.carda.awesome_notifications.core.enumerators.NotificationPrivacy: java.lang.String getSafeName()
androidx.core.widget.NestedScrollView: float getVerticalScrollFactorCompat()
androidx.appcompat.resources.Compatibility$Api21Impl: int getChangingConfigurations(android.content.res.TypedArray)
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: android.database.sqlite.SQLiteDatabase getReadableDatabase(android.content.Context)
androidx.recyclerview.widget.RecyclerView: boolean isLayoutSuppressed()
com.google.android.gms.common.api.internal.LifecycleCallback: com.google.android.gms.common.api.internal.LifecycleFragment getChimeraLifecycleFragmentImpl(com.google.android.gms.common.api.internal.LifecycleActivity)
androidx.coordinatorlayout.widget.CoordinatorLayout: void setStatusBarBackgroundResource(int)
me.carda.awesome_notifications.core.managers.StatusBarManager: void removeIndexCollapsedLayout(android.content.SharedPreferences$Editor,java.lang.String)
me.carda.awesome_notifications.core.builders.NotificationBuilder: java.lang.String getMatchedLanguageCode(java.util.Map,java.lang.String)
androidx.core.app.NotificationCompat$MessagingStyle$Api28Impl: android.app.Notification$MessagingStyle createMessagingStyle(android.app.Person)
me.carda.awesome_notifications.core.managers.LocalizationManager: me.carda.awesome_notifications.core.managers.LocalizationManager getInstance()
androidx.appcompat.widget.Toolbar: void setCollapseIcon(int)
com.google.firebase.firestore.proto.Target$TargetTypeCase: com.google.firebase.firestore.proto.Target$TargetTypeCase[] values()
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodRemoveChannel(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.constraintlayout.helper.widget.Flow: void setFirstHorizontalStyle(int)
me.carda.awesome_notifications.core.exceptions.ExceptionFactory: ExceptionFactory()
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.Number)
io.flutter.view.AccessibilityViewEmbedder: void setFlutterNodeParent(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo)
androidx.appcompat.widget.AppCompatCheckBox: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: void setLayoutParams(android.view.ViewGroup$LayoutParams)
me.carda.awesome_notifications.core.managers.RepositoryManager: java.util.List getAllObjects(android.content.Context,java.lang.String)
androidx.appcompat.widget.ActionBarContainer: void setSplitBackground(android.graphics.drawable.Drawable)
com.google.protobuf.Writer$FieldOrder: com.google.protobuf.Writer$FieldOrder valueOf(java.lang.String)
androidx.lifecycle.ProcessLifecycleOwner$attach$1: void onActivityPaused(android.app.Activity)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void disableFenceForTest()
me.carda.awesome_notifications.core.utils.BooleanUtils: boolean getValue(java.lang.Boolean)
androidx.appcompat.widget.AppCompatButton: int[] getAutoSizeTextAvailableSizes()
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getSystemWindowInsets()
me.carda.awesome_notifications.core.threads.NotificationScheduler: void cancelSchedule(android.content.Context,me.carda.awesome_notifications.core.models.NotificationModel)
com.google.android.material.chip.Chip: android.content.res.ColorStateList getRippleColor()
me.carda.awesome_notifications.core.managers.ActionManager: void setInitialNotificationAction(android.content.Context,me.carda.awesome_notifications.core.models.returnedData.ActionReceived)
com.google.gson.internal.bind.TypeAdapters$14: TypeAdapters$14()
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: long getLong(android.content.Context,java.lang.String,java.lang.String,long)
me.carda.awesome_notifications.core.enumerators.ActionType: java.lang.String getSafeName()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: FlutterRenderer$ImageTextureRegistryEntry(io.flutter.embedding.engine.renderer.FlutterRenderer,long)
com.google.android.material.textfield.TextInputLayout: void setPlaceholderTextAppearance(int)
com.google.android.material.textfield.TextInputLayout: void setStartIconScaleType(android.widget.ImageView$ScaleType)
com.google.gson.stream.JsonWriter: boolean getSerializeNulls()
me.carda.awesome_notifications.core.models.NotificationScheduleModel: me.carda.awesome_notifications.core.models.AbstractModel fromMap(java.util.Map)
androidx.appcompat.view.menu.ListMenuItemView: ListMenuItemView(android.content.Context,android.util.AttributeSet)
androidx.appcompat.widget.Toolbar: java.util.ArrayList getCurrentMenuItems()
com.google.gson.stream.JsonReader$1: void promoteNameToValue(com.google.gson.stream.JsonReader)
me.carda.awesome_notifications.core.models.returnedData.NotificationReceived: java.util.Map toMap()
androidx.core.view.ViewConfigurationCompat$Api28Impl: boolean shouldShowMenuShortcutsWhenKeyboardPresent(android.view.ViewConfiguration)
com.google.protobuf.NullValue: com.google.protobuf.NullValue[] values()
androidx.media.AudioAttributesImplApi21: AudioAttributesImplApi21()
me.carda.awesome_notifications.core.managers.PermissionManager: boolean handlePermissionResult(int,java.lang.String[],int[])
me.carda.awesome_notifications.core.models.NotificationScheduleModel: java.util.Calendar getNextValidDate(java.util.Calendar)
com.google.firebase.firestore.ktx.FirebaseFirestoreKtxRegistrar: FirebaseFirestoreKtxRegistrar()
io.flutter.embedding.engine.FlutterJNI: void onSurfaceCreated(android.view.Surface)
io.flutter.view.TextureRegistry$SurfaceProducer: boolean handlesCropAndRotation()
androidx.core.widget.TextViewCompat$Api24Impl: android.icu.text.DecimalFormatSymbols getInstance(java.util.Locale)
com.google.android.material.textfield.TextInputLayout: void setCounterEnabled(boolean)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getStrokeAlpha()
com.google.android.material.appbar.MaterialToolbar: MaterialToolbar(android.content.Context,android.util.AttributeSet)
androidx.core.widget.CompoundButtonCompat$Api21Impl: android.graphics.PorterDuff$Mode getButtonTintMode(android.widget.CompoundButton)
com.google.android.material.chip.Chip: void setTextEndPaddingResource(int)
com.google.android.material.floatingactionbutton.FloatingActionButton$Behavior: FloatingActionButton$Behavior()
com.google.android.material.chip.Chip: void setOnCloseIconClickListener(android.view.View$OnClickListener)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: void finalize()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: android.graphics.Matrix getLocalMatrix()
io.flutter.embedding.engine.FlutterJNI: void removeIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: boolean remove(android.content.Context,java.lang.String,java.lang.String,java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void invokePlatformMessageEmptyResponseCallback(int)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setBackgroundResource(int)
me.carda.awesome_notifications.core.builders.NotificationBuilder: java.lang.Class getMainTargetClass(android.content.Context)
androidx.appcompat.widget.AppCompatEditText: java.lang.CharSequence getText()
androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type: androidx.constraintlayout.solver.widgets.ConstraintAnchor$Type[] values()
com.google.gson.internal.bind.TypeAdapters$12: TypeAdapters$12()
com.google.firebase.firestore.FirebaseFirestoreKtxRegistrar: java.util.List getComponents()
com.google.android.material.chip.Chip: void setBackground(android.graphics.drawable.Drawable)
androidx.appcompat.widget.ViewStubCompat: void setLayoutResource(int)
me.carda.awesome_notifications.core.models.NotificationMessageModel: me.carda.awesome_notifications.core.models.AbstractModel fromJson(java.lang.String)
androidx.core.view.MenuItemCompat$Api26Impl: java.lang.CharSequence getContentDescription(android.view.MenuItem)
androidx.core.widget.CompoundButtonCompat$Api23Impl: android.graphics.drawable.Drawable getButtonDrawable(android.widget.CompoundButton)
me.carda.awesome_notifications.core.databases.SqLiteCypher: java.lang.String getDatabaseSecret(android.content.Context)
me.carda.awesome_notifications.core.services.ForegroundService$ForegroundServiceIntent: ForegroundService$ForegroundServiceIntent(me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.enumerators.ForegroundStartMode,me.carda.awesome_notifications.core.enumerators.ForegroundServiceType)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodGetLocalTimeZone(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
me.carda.awesome_notifications.core.models.AbstractModel: void putDataOnSerializedMap(java.lang.String,java.util.Map,me.carda.awesome_notifications.core.models.AbstractModel)
androidx.core.view.WindowInsetsCompat$BuilderImpl30: WindowInsetsCompat$BuilderImpl30()
androidx.coordinatorlayout.widget.CoordinatorLayout: int getSuggestedMinimumWidth()
androidx.appcompat.widget.AppCompatTextView: void setBackgroundResource(int)
androidx.core.view.WindowInsetsCompat$Impl: boolean equals(java.lang.Object)
me.carda.awesome_notifications.core.enumerators.NotificationLayout: java.lang.String getSafeName()
me.carda.awesome_notifications.DartBackgroundExecutor: void access$100(me.carda.awesome_notifications.DartBackgroundExecutor,io.flutter.plugin.common.BinaryMessenger)
com.google.android.material.chip.Chip: void setCloseIconSizeResource(int)
androidx.core.app.RemoteInput$Api26Impl: java.util.Set getAllowedDataTypes(java.lang.Object)
me.carda.awesome_notifications.core.externalLibs.CronExpression: void addToSet(int,int,int,int)
android.support.v4.media.AudioAttributesImplBaseParcelizer: AudioAttributesImplBaseParcelizer()
com.google.firebase.firestore.model.MutableDocument$DocumentType: com.google.firebase.firestore.model.MutableDocument$DocumentType[] values()
androidx.appcompat.widget.ActionBarContextView: int getAnimatedVisibility()
com.google.android.material.textfield.TextInputLayout: java.lang.CharSequence getStartIconContentDescription()
com.google.android.material.chip.Chip: android.content.res.ColorStateList getChipIconTint()
androidx.appcompat.widget.AppCompatImageButton: void setSupportBackgroundTintList(android.content.res.ColorStateList)
me.carda.awesome_notifications.core.managers.CancellationManager: boolean cancelSchedule(android.content.Context,java.lang.Integer)
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setSystemGestureInsets(androidx.core.graphics.Insets)
com.google.gson.internal.sql.SqlDateTypeAdapter$1: SqlDateTypeAdapter$1()
android.support.v4.media.RatingCompat$Api19Impl: boolean isRated(android.media.Rating)
me.carda.awesome_notifications.core.managers.StatusBarManager: StatusBarManager()
androidx.appcompat.widget.AppCompatImageButton: void setImageURI(android.net.Uri)
me.carda.awesome_notifications.core.models.NotificationMessageModel: java.lang.String toJson()
io.grpc.internal.DnsNameResolverProvider: DnsNameResolverProvider()
me.carda.awesome_notifications.core.models.AbstractModel: me.carda.awesome_notifications.core.enumerators.NotificationLayout getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,me.carda.awesome_notifications.core.enumerators.NotificationLayout)
com.google.android.material.internal.NavigationMenuItemView: void setHorizontalPadding(int)
android.support.v4.media.RatingCompat$Api19Impl: android.media.Rating newPercentageRating(float)
io.grpc.util.SecretRoundRobinLoadBalancerProvider$Provider: io.grpc.NameResolver$ConfigOrError parseLoadBalancingPolicyConfig(java.util.Map)
me.carda.awesome_notifications.core.managers.PermissionManager: void showDnDGlobalOverridingPage(android.content.Context,me.carda.awesome_notifications.core.completion_handlers.PermissionCompletionHandler)
me.carda.awesome_notifications.core.managers.ScheduleManager: java.lang.Boolean removeSchedule(android.content.Context,me.carda.awesome_notifications.core.models.NotificationModel)
com.google.android.material.chip.Chip: void setCloseIconStartPadding(float)
me.carda.awesome_notifications.core.broadcasters.senders.BroadcastSender: void sendBroadcastBackgroundAction(android.content.Context,me.carda.awesome_notifications.core.models.returnedData.ActionReceived)
me.carda.awesome_notifications.core.managers.BadgeManager: void setGlobalBadgeCounter(android.content.Context,int)
androidx.coordinatorlayout.widget.CoordinatorLayout: CoordinatorLayout(android.content.Context,android.util.AttributeSet)
me.carda.awesome_notifications.core.builders.NotificationBuilder: java.lang.Boolean setMessagingLayout(android.content.Context,boolean,me.carda.awesome_notifications.core.models.NotificationContentModel,me.carda.awesome_notifications.core.models.NotificationChannelModel,androidx.core.app.NotificationCompat$Builder)
androidx.core.app.NotificationCompatBuilder$Api28Impl: android.app.Notification$Action$Builder setSemanticAction(android.app.Notification$Action$Builder,int)
androidx.constraintlayout.widget.Barrier: void setDpMargin(int)
androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetRight(android.view.DisplayCutout)
me.carda.awesome_notifications.core.models.NotificationContentModel: NotificationContentModel()
androidx.constraintlayout.helper.widget.Flow: void setMaxElementsWrap(int)
io.grpc.InternalChannelz$ChannelTrace$Event$Severity: io.grpc.InternalChannelz$ChannelTrace$Event$Severity valueOf(java.lang.String)
me.carda.awesome_notifications.core.models.returnedData.ActionReceived: me.carda.awesome_notifications.core.models.AbstractModel fromJson(java.lang.String)
me.carda.awesome_notifications.core.managers.RepositoryManager: me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB getDbInstance(android.content.Context)
me.carda.awesome_notifications.core.managers.ScheduleManager: me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB _getPrimitiveDB(android.content.Context)
com.google.android.material.chip.Chip: void setIconEndPadding(float)
com.google.android.material.button.MaterialButton: void setChecked(boolean)
com.google.android.material.chip.Chip: void setChipIconEnabledResource(int)
androidx.core.os.LocaleListCompat$Api24Impl: android.os.LocaleList createLocaleList(java.util.Locale[])
me.carda.awesome_notifications.core.managers.DefaultsManager: java.lang.String getDefaultIcon(android.content.Context)
me.carda.awesome_notifications.core.models.NotificationButtonModel: void processRetroCompatibility(java.util.Map)
me.carda.awesome_notifications.core.models.NotificationCrontabModel: java.util.Calendar getNextMinimalPreciseSchedule(java.util.Calendar)
androidx.appcompat.widget.SearchView$SearchAutoComplete: void setImeVisibility(boolean)
androidx.appcompat.widget.AppCompatReceiveContentHelper$OnDropApi24Impl: boolean onDropForTextView(android.view.DragEvent,android.widget.TextView,android.app.Activity)
com.google.android.material.internal.CheckableImageButton: void setPressed(boolean)
androidx.constraintlayout.widget.VirtualLayout: void setVisibility(int)
androidx.core.view.ViewCompat$Api21Impl: boolean startNestedScroll(android.view.View,int)
com.google.gson.stream.JsonReader: boolean fillBuffer(int)
me.carda.awesome_notifications.core.models.NotificationScheduleModel: java.lang.Boolean hasNextValidDate()
androidx.appcompat.widget.AppCompatButton: void setFilters(android.text.InputFilter[])
com.google.firebase.firestore.ListenSource: com.google.firebase.firestore.ListenSource valueOf(java.lang.String)
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: void saveSchedule(android.content.Context,java.lang.Integer,java.lang.String,java.lang.String,java.lang.String)
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: SQLiteSchedulesDB(android.content.Context,java.lang.String)
com.google.android.material.chip.Chip: com.google.android.material.animation.MotionSpec getShowMotionSpec()
androidx.core.view.ViewCompat$Api21Impl: android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View)
androidx.appcompat.widget.AppCompatTextView: void setLastBaselineToBottomHeight(int)
androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setStableInsets(androidx.core.graphics.Insets)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void inflate(android.graphics.drawable.Drawable,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)
com.google.android.material.textfield.TextInputLayout: android.content.res.ColorStateList getCursorColor()
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodIncrementBadge(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: void setAnimationMode(int)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodDismissNotificationsByGroupKey(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
me.carda.awesome_notifications.core.managers.LifeCycleManager: void onDestroyed()
androidx.appcompat.view.menu.ActionMenuItemView: java.lang.CharSequence getAccessibilityClassName()
me.carda.awesome_notifications.core.enumerators.ForegroundServiceType: me.carda.awesome_notifications.core.enumerators.ForegroundServiceType[] $values()
io.flutter.view.TextureRegistry$SurfaceProducer: void setCallback(io.flutter.view.TextureRegistry$SurfaceProducer$Callback)
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setSound(android.content.Context,me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.models.NotificationChannelModel,androidx.core.app.NotificationCompat$Builder)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodShouldShowRationale(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.firebase.firestore.local.IndexManager$IndexType: com.google.firebase.firestore.local.IndexManager$IndexType valueOf(java.lang.String)
androidx.core.app.NotificationCompat$Builder$Api21Impl: android.media.AudioAttributes$Builder setUsage(android.media.AudioAttributes$Builder,int)
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow valueOf(java.lang.String)
com.google.protobuf.FieldType$Collection: com.google.protobuf.FieldType$Collection valueOf(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void release()
androidx.core.view.WindowInsetsCompat$Impl20: void copyRootViewBounds(android.view.View)
androidx.appcompat.widget.AppCompatCheckBox: void setAllCaps(boolean)
androidx.appcompat.widget.SearchView$SearchAutoComplete: SearchView$SearchAutoComplete(android.content.Context,android.util.AttributeSet)
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements: void endRearDisplayPresentationSession()
com.google.gson.internal.bind.TypeAdapters$22: TypeAdapters$22()
androidx.appcompat.widget.LinearLayoutCompat: void setGravity(int)
android.support.v4.media.session.PlaybackStateCompat$Api21Impl: void setState(android.media.session.PlaybackState$Builder,int,long,float,long)
io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$PigeonTransactionType: io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$PigeonTransactionType[] values()
me.carda.awesome_notifications.core.externalLibs.CronExpression: int getLastDayOfMonth(int,int)
androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper$Impl: AppCompatTextViewAutoSizeHelper$Impl()
io.flutter.view.TextureRegistry$SurfaceTextureEntry$-CC: void $default$setOnFrameConsumedListener(io.flutter.view.TextureRegistry$SurfaceTextureEntry,io.flutter.view.TextureRegistry$OnFrameConsumedListener)
androidx.core.app.NotificationCompatBuilder$Api26Impl: android.app.Notification$Builder setBadgeIconType(android.app.Notification$Builder,int)
com.google.firestore.v1.StructuredQuery$CompositeFilter$Operator: com.google.firestore.v1.StructuredQuery$CompositeFilter$Operator valueOf(java.lang.String)
androidx.lifecycle.ProcessLifecycleOwner$attach$1$onActivityPreCreated$1: void onActivityPostStarted(android.app.Activity)
me.carda.awesome_notifications.core.builders.NotificationBuilder: me.carda.awesome_notifications.core.builders.NotificationBuilder setMediaSession(android.support.v4.media.session.MediaSessionCompat)
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides[] values()
me.carda.awesome_notifications.core.broadcasters.senders.BroadcastSender: void enqueueSilentAction(android.content.Context,java.lang.String,me.carda.awesome_notifications.core.models.returnedData.ActionReceived,android.content.Intent)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelShowNotificationPage(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: SurfaceTextureWrapper(android.graphics.SurfaceTexture,java.lang.Runnable)
androidx.appcompat.widget.Toolbar: androidx.appcompat.widget.ActionMenuPresenter getOuterActionMenuPresenter()
androidx.appcompat.widget.ActionBarContainer: void setPrimaryBackground(android.graphics.drawable.Drawable)
me.carda.awesome_notifications.core.managers.BadgeManager: boolean isBadgeGloballyAllowed(android.content.Context)
io.flutter.view.AccessibilityViewEmbedder: void cacheVirtualIdMappings(android.view.View,int,int)
com.google.android.material.textfield.TextInputLayout: java.lang.CharSequence getHint()
com.google.protobuf.WireFormat$FieldType: com.google.protobuf.WireFormat$FieldType valueOf(java.lang.String)
androidx.core.view.WindowInsetsCompat$TypeImpl30: int toPlatformType(int)
com.google.android.material.chip.Chip: void setCheckedIconEnabled(boolean)
io.flutter.plugins.firebase.firestore.FlutterFirebaseFirestoreRegistrar: FlutterFirebaseFirestoreRegistrar()
androidx.core.widget.TextViewCompat$Api23Impl: void setCompoundDrawableTintMode(android.widget.TextView,android.graphics.PorterDuff$Mode)
androidx.appcompat.view.menu.ActionMenuItemView: void setCheckable(boolean)
me.carda.awesome_notifications.core.utils.BitmapUtils: android.graphics.Bitmap getBitmapFromResource(android.content.Context,java.lang.String)
me.carda.awesome_notifications.core.managers.DismissedManager: boolean removeDismissed(android.content.Context,java.lang.Integer,java.util.Calendar)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsRegionalIndicator(int)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void applyTheme(android.graphics.drawable.Drawable,android.content.res.Resources$Theme)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void setCallback(io.flutter.view.TextureRegistry$SurfaceProducer$Callback)
me.carda.awesome_notifications.core.externalLibs.CronExpression: int checkNext(int,java.lang.String,int,int)
io.flutter.embedding.engine.FlutterJNI: void addEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener)
io.flutter.embedding.engine.FlutterJNI: void ensureRunningOnMainThread()
androidx.appcompat.widget.AppCompatImageView: void setBackgroundDrawable(android.graphics.drawable.Drawable)
me.carda.awesome_notifications.core.models.AbstractModel: void putDataOnSerializedMap(java.lang.String,java.util.Map,java.io.Serializable)
me.carda.awesome_notifications.core.models.NotificationContentModel: boolean registerDisplayedEvent(me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle)
me.carda.awesome_notifications.core.managers.EventManager: java.lang.String _getKeyById(java.lang.Integer)
com.google.android.material.button.MaterialButtonToggleGroup: void setEnabled(boolean)
androidx.core.widget.TextViewCompat$Api28Impl: android.text.PrecomputedText$Params getTextMetricsParams(android.widget.TextView)
androidx.core.text.HtmlCompat$Api24Impl: android.text.Spanned fromHtml(java.lang.String,int,android.text.Html$ImageGetter,android.text.Html$TagHandler)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: android.graphics.SurfaceTexture surfaceTexture()
com.google.android.material.textfield.TextInputLayout: int getBoxStrokeColor()
me.carda.awesome_notifications.core.models.NotificationIntervalModel: me.carda.awesome_notifications.core.models.NotificationIntervalModel fromJson(java.lang.String)
com.google.firestore.v1.StructuredQuery$FieldFilter$Operator: com.google.firestore.v1.StructuredQuery$FieldFilter$Operator valueOf(java.lang.String)
androidx.appcompat.widget.AppCompatTextView: android.view.ActionMode$Callback getCustomSelectionActionModeCallback()
androidx.appcompat.widget.AppCompatTextView: void setAutoSizeTextTypeWithDefaults(int)
com.google.android.material.textfield.TextInputLayout: void setStartIconTintList(android.content.res.ColorStateList)
me.carda.awesome_notifications.core.managers.ScheduleManager: java.util.List listScheduledIds(android.content.Context)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.util.Map getAllLongValues(android.content.Context,java.lang.String)
com.google.firebase.firestore.core.ActivityScope$StopListenerSupportFragment: ActivityScope$StopListenerSupportFragment()
me.carda.awesome_notifications.core.managers.StatusBarManager: java.util.List unregisterActiveGroupKey(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void scheduleFrame()
androidx.core.content.ContextCompat$Api23Impl: java.lang.Object getSystemService(android.content.Context,java.lang.Class)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$100(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
com.google.android.material.chip.Chip: float getChipCornerRadius()
io.flutter.embedding.engine.FlutterJNI: void nativeNotifyLowMemoryWarning(long)
me.carda.awesome_notifications.core.managers.ScheduleManager: me.carda.awesome_notifications.core.models.NotificationModel getScheduleById(android.content.Context,java.lang.Integer)
com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton$ExtendedFloatingActionButtonBehavior: ExtendedFloatingActionButton$ExtendedFloatingActionButtonBehavior(android.content.Context,android.util.AttributeSet)
androidx.core.app.JobIntentService: void processorFinished()
androidx.media.app.NotificationCompat$Api21Impl: android.app.Notification$MediaStyle fillInMediaStyle(android.app.Notification$MediaStyle,int[],android.support.v4.media.session.MediaSessionCompat$Token)
androidx.appcompat.widget.DropDownListView$Api33Impl: boolean isSelectedChildViewEnabled(android.widget.AbsListView)
me.carda.awesome_notifications.core.AwesomeNotifications: void setEventsHandle(java.lang.Long,java.lang.Long,java.lang.Long,java.lang.Long)
me.leolin.shortcutbadger.impl.DefaultBadger: DefaultBadger()
me.carda.awesome_notifications.core.utils.JsonUtils: org.json.JSONArray listToJson(java.util.List)
me.carda.awesome_notifications.core.managers.LifeCycleManager: void onStopped()
androidx.core.view.ViewCompat$Api29Impl: void saveAttributeDataForStyleable(android.view.View,android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)
androidx.lifecycle.ProcessLifecycleOwner$Api29Impl: void registerActivityLifecycleCallbacks(android.app.Activity,android.app.Application$ActivityLifecycleCallbacks)
androidx.appcompat.widget.Toolbar: void setNavigationContentDescription(java.lang.CharSequence)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: ImeSyncDeferringInsetsCallback$AnimationCallback(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
com.google.android.material.appbar.MaterialToolbar: void setNavigationIconTint(int)
androidx.core.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel)
androidx.constraintlayout.helper.widget.Flow: void setPaddingRight(int)
me.carda.awesome_notifications.core.managers.SharedManager: java.lang.String generateSharedKey(java.lang.String,java.lang.String)
me.carda.awesome_notifications.core.databases.SqLiteCypher: void initializeEncryption(android.content.Context)
androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact: androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact[] values()
androidx.appcompat.widget.ActionMenuView: void setOverflowIcon(android.graphics.drawable.Drawable)
io.grpc.stub.ClientCalls$StubType: io.grpc.stub.ClientCalls$StubType[] values()
com.google.android.material.internal.NavigationMenuItemView: void setTextAppearance(int)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodCheckPermissions(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.FlutterJNI: void nativeDestroy(long)
me.carda.awesome_notifications.core.utils.AudioUtils: int getAudioResourceId(android.content.Context,java.lang.String)
com.google.firebase.firestore.core.OnlineState: com.google.firebase.firestore.core.OnlineState valueOf(java.lang.String)
com.google.android.material.textfield.TextInputLayout: int getEndIconMode()
me.carda.awesome_notifications.DartBackgroundExecutor: void addSilentIntent(android.content.Intent)
com.google.android.material.behavior.HideBottomViewOnScrollBehavior: HideBottomViewOnScrollBehavior()
com.google.android.material.transformation.ExpandableBehavior: ExpandableBehavior(android.content.Context,android.util.AttributeSet)
com.google.gson.internal.bind.TypeAdapters$1: TypeAdapters$1()
io.flutter.embedding.engine.FlutterJNI: void nativeUpdateRefreshRate(float)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: android.media.Image acquireLatestImage()
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] values()
com.google.gson.internal.bind.TypeAdapters$10: TypeAdapters$10()
androidx.appcompat.widget.AppCompatButton: android.content.res.ColorStateList getSupportCompoundDrawablesTintList()
androidx.appcompat.widget.AppCompatCheckBox: void setEmojiCompatEnabled(boolean)
me.carda.awesome_notifications.core.models.NotificationIntervalModel: java.util.Map toMap()
me.carda.awesome_notifications.core.models.NotificationContentModel: java.util.List messagesToMap(java.util.List)
me.carda.awesome_notifications.core.listeners.AwesomeLifeCycleEventListener: void onNewLifeCycleEvent(me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: FlutterMutatorsStack()
me.carda.awesome_notifications.core.utils.AudioUtils: java.lang.Boolean isValidAudio(android.content.Context,java.lang.String)
androidx.appcompat.widget.AppCompatCheckBox: void setSupportBackgroundTintList(android.content.res.ColorStateList)
me.carda.awesome_notifications.core.managers.ActionManager: me.carda.awesome_notifications.core.models.returnedData.ActionReceived getActionByKey(android.content.Context,java.lang.Integer)
me.carda.awesome_notifications.core.managers.ActionManager: me.carda.awesome_notifications.core.managers.ActionManager getInstance()
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerView$Adapter getAdapter()
me.carda.awesome_notifications.core.AwesomeNotifications: void showNotificationPage(java.lang.String,me.carda.awesome_notifications.core.completion_handlers.PermissionCompletionHandler)
io.flutter.plugins.firebase.core.FlutterFirebasePlugin: com.google.android.gms.tasks.Task getPluginConstantsForFirebaseApp(com.google.firebase.FirebaseApp)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int numImages()
me.carda.awesome_notifications.core.managers.PermissionManager: java.lang.Boolean areNotificationsGloballyAllowed(android.content.Context)
io.flutter.view.AccessibilityViewEmbedder: void copyAccessibilityFields(android.view.accessibility.AccessibilityNodeInfo,android.view.accessibility.AccessibilityNodeInfo)
me.carda.awesome_notifications.core.utils.CalendarUtils: java.lang.String calendarToString(java.util.Calendar)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: android.content.res.ColorStateList getSupportCompoundDrawablesTintList()
androidx.appcompat.widget.ButtonBarLayout: void setStacked(boolean)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: int longCount(android.content.Context,java.lang.String)
androidx.appcompat.widget.Toolbar: android.graphics.drawable.Drawable getNavigationIcon()
me.carda.awesome_notifications.core.models.AbstractModel: void putSafeEnumOnSerializedMap(java.lang.String,java.util.Map,me.carda.awesome_notifications.core.enumerators.SafeEnum)
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode[] values()
com.google.android.material.chip.Chip: void setChipIcon(android.graphics.drawable.Drawable)
me.carda.awesome_notifications.core.enumerators.ForegroundStartMode: ForegroundStartMode(java.lang.String,int,java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.media.ImageReader createImageReader()
me.carda.awesome_notifications.core.utils.ThreadUtils: ThreadUtils()
me.carda.awesome_notifications.core.builders.NotificationBuilder: android.content.Intent buildNotificationIntentFromNotificationModel(android.content.Context,android.content.Intent,java.lang.String,me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.models.NotificationChannelModel,me.carda.awesome_notifications.core.enumerators.ActionType,java.lang.Class)
me.carda.awesome_notifications.core.threads.NotificationScheduler: java.lang.Object onPostExecute(java.lang.Object)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api34Impl: void getBoundsInWindow(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Rect)
androidx.appcompat.widget.LinearLayoutCompat: void setHorizontalGravity(int)
com.google.gson.stream.JsonScope: JsonScope()
me.carda.awesome_notifications.core.managers.LostEventsManager: void saveDismissed(android.content.Context,me.carda.awesome_notifications.core.models.returnedData.ActionReceived)
androidx.appcompat.widget.ViewStubCompat: int getInflatedId()
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api33Impl: androidx.core.view.accessibility.AccessibilityNodeInfoCompat getChild(android.view.accessibility.AccessibilityNodeInfo,int,int)
me.carda.awesome_notifications.core.managers.ChannelManager: java.util.List listChannels(android.content.Context)
com.google.android.material.textfield.TextInputLayout: void setMaxEms(int)
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: FlutterFirebasePluginRegistry()
me.carda.awesome_notifications.core.managers.ChannelGroupManager: void saveChannelGroup(android.content.Context,me.carda.awesome_notifications.core.models.NotificationChannelGroupModel)
me.carda.awesome_notifications.core.threads.NotificationForegroundSender: me.carda.awesome_notifications.core.models.NotificationModel onPostExecute(me.carda.awesome_notifications.core.models.NotificationModel)
com.google.android.material.behavior.HideBottomViewOnScrollBehavior: HideBottomViewOnScrollBehavior(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.engine.FlutterJNI: void setRefreshRateFPS(float)
androidx.core.view.ViewCompat$Api26Impl: void setImportantForAutofill(android.view.View,int)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter beginObject()
androidx.constraintlayout.widget.Barrier: void setType(int)
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: float getActionTextColorAlpha()
com.google.android.material.textfield.TextInputLayout: void setStartIconContentDescription(java.lang.CharSequence)
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: void removeSchedulesByGroupKey(android.content.Context,java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation[] values()
androidx.appcompat.widget.Toolbar: void setContentInsetStartWithNavigation(int)
androidx.appcompat.widget.Toolbar: void setOnMenuItemClickListener(androidx.appcompat.widget.Toolbar$OnMenuItemClickListener)
io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite valueOf(java.lang.String)
com.google.firebase.firestore.remote.WatchChange$WatchTargetChangeType: com.google.firebase.firestore.remote.WatchChange$WatchTargetChangeType[] values()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)
me.carda.awesome_notifications.core.utils.HtmlUtils: HtmlUtils()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType valueOf(java.lang.String)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodGetUtcTimeZone(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.appcompat.widget.ActionBarContextView: void setTitleOptional(boolean)
com.google.android.material.textfield.TextInputLayout: java.lang.CharSequence getPrefixText()
androidx.core.app.NotificationCompatBuilder$Api26Impl: android.app.Notification$Builder setColorized(android.app.Notification$Builder,boolean)
androidx.core.view.ViewConfigurationCompat$Api28Impl: int getScaledHoverSlop(android.view.ViewConfiguration)
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver: me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver getInstance()
androidx.constraintlayout.widget.Barrier: void setAllowsGoneWidget(boolean)
androidx.appcompat.widget.ViewStubCompat: void setLayoutInflater(android.view.LayoutInflater)
me.carda.awesome_notifications.core.managers.SharedManager: java.lang.Boolean remove(android.content.Context,java.lang.String,java.lang.String)
com.google.android.material.chip.Chip: void setChipIconTintResource(int)
androidx.core.view.ViewCompat$Api26Impl: void setAutofillHints(android.view.View,java.lang.String[])
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements: void addRearDisplayPresentationStatusListener(androidx.window.extensions.core.util.function.Consumer)
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityPaused(android.app.Activity)
androidx.appcompat.widget.AppCompatTextHelper$Api24Impl: android.os.LocaleList forLanguageTags(java.lang.String)
me.carda.awesome_notifications.core.externalLibs.CronExpression: me.carda.awesome_notifications.core.externalLibs.ValueSet getValue(int,java.lang.String,int)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: android.graphics.Matrix getPlatformViewMatrix()
androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type valueOf(java.lang.String)
com.google.android.material.appbar.AppBarLayout$Behavior: AppBarLayout$Behavior(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: io.flutter.view.TextureRegistry$SurfaceProducer$Callback access$200(io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer)
com.google.firebase.firestore.LoadBundleTaskProgress$TaskState: com.google.firebase.firestore.LoadBundleTaskProgress$TaskState valueOf(java.lang.String)
me.carda.awesome_notifications.core.models.DefaultsModel: DefaultsModel(java.lang.String,java.lang.Long,java.lang.Long,java.lang.String)
com.google.android.material.chip.Chip: void setCloseIconHovered(boolean)
com.google.gson.stream.JsonReader: java.lang.String nextName()
com.google.android.material.textfield.TextInputLayout: void setEndIconOnClickListener(android.view.View$OnClickListener)
me.carda.awesome_notifications.core.managers.CreatedManager: boolean removeAllCreated(android.content.Context)
com.google.android.material.textfield.TextInputLayout: com.google.android.material.textfield.TextInputLayout$LengthCounter getLengthCounter()
me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType: me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType[] $values()
androidx.core.view.ViewCompat$Api26Impl: boolean isFocusedByDefault(android.view.View)
androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper$Impl: boolean isHorizontallyScrollable(android.widget.TextView)
androidx.transition.TransitionUtils$Api28Impl: android.graphics.Bitmap createBitmap(android.graphics.Picture)
me.carda.awesome_notifications.core.managers.CreatedManager: boolean saveCreated(android.content.Context,me.carda.awesome_notifications.core.models.returnedData.NotificationReceived)
androidx.recyclerview.widget.RecyclerView: void setChildDrawingOrderCallback(androidx.recyclerview.widget.RecyclerView$ChildDrawingOrderCallback)
me.carda.awesome_notifications.core.models.AbstractModel: AbstractModel()
me.carda.awesome_notifications.core.models.NotificationChannelModel: boolean isChannelEnabled()
me.carda.awesome_notifications.core.models.NotificationContentModel: java.util.Map toMap()
com.google.android.material.chip.Chip: float getIconEndPadding()
com.google.android.material.textfield.TextInputLayout: void setMinWidth(int)
com.google.firebase.firestore.local.IndexManager$IndexType: com.google.firebase.firestore.local.IndexManager$IndexType[] values()
androidx.core.view.ViewCompat$Api28Impl: boolean isScreenReaderFocusable(android.view.View)
com.google.gson.stream.JsonToken: JsonToken(java.lang.String,int)
me.carda.awesome_notifications.core.threads.NotificationScheduler: void whenComplete(java.lang.Object,me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException)
androidx.appcompat.widget.Toolbar: Toolbar(android.content.Context,android.util.AttributeSet)
me.carda.awesome_notifications.core.AwesomeNotifications: java.lang.String getPackageName(android.content.Context)
me.carda.awesome_notifications.core.models.NotificationLocalizationModel: void validate(android.content.Context)
me.carda.awesome_notifications.core.models.returnedData.NotificationReceived: me.carda.awesome_notifications.core.models.NotificationContentModel fromJson(java.lang.String)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.String)
me.carda.awesome_notifications.core.threads.NotificationScheduler: java.util.Calendar doInBackground()
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerView$OnFlingListener getOnFlingListener()
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.lang.String toString()
androidx.appcompat.widget.ActionBarContextView: void setCustomView(android.view.View)
androidx.core.widget.ImageViewCompat$Api21Impl: android.content.res.ColorStateList getImageTintList(android.widget.ImageView)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: void lambda$setAllFloatValues$5(android.content.ContentValues,java.lang.Float)
com.google.android.material.textfield.TextInputLayout: void setTypeface(android.graphics.Typeface)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceChanged(int,int)
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action valueOf(java.lang.String)
com.google.android.material.button.MaterialButton: android.content.res.ColorStateList getIconTint()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean shouldUpdate()
me.carda.awesome_notifications.core.managers.StatusBarManager: java.util.List _getAllActiveIdsWithoutServices()
androidx.core.view.ViewCompat$Api21Impl$1: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)
androidx.core.view.WindowInsetsCompat$Impl21: androidx.core.view.WindowInsetsCompat consumeStableInsets()
me.carda.awesome_notifications.core.managers.RepositoryManager: boolean commit(android.content.Context)
android.support.v4.media.MediaDescriptionCompat$Api21Impl: void setSubtitle(android.media.MediaDescription$Builder,java.lang.CharSequence)
androidx.appcompat.widget.Toolbar$Api33Impl: void tryUnregisterOnBackInvokedCallback(java.lang.Object,java.lang.Object)
com.google.android.material.textfield.TextInputLayout: void setCursorColor(android.content.res.ColorStateList)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api34Impl: long getMinDurationBetweenContentChangeMillis(android.view.accessibility.AccessibilityNodeInfo)
me.carda.awesome_notifications.core.utils.StringUtils: java.lang.String join(java.util.Iterator,java.lang.String)
androidx.appcompat.widget.ActionBarContainer: void setStackedBackground(android.graphics.drawable.Drawable)
com.google.android.material.button.MaterialButton: android.text.Layout$Alignment getActualTextAlignment()
me.carda.awesome_notifications.core.managers.PermissionManager: void access$000(me.carda.awesome_notifications.core.managers.PermissionManager,android.content.Context,java.lang.String,java.util.List,me.carda.awesome_notifications.core.completion_handlers.PermissionCompletionHandler)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)
me.carda.awesome_notifications.core.logs.Logger: void i(java.lang.String,java.lang.String)
me.carda.awesome_notifications.core.managers.SharedManager: void commit(android.content.Context)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: void removeAllBoolean(android.content.Context,java.lang.String)
androidx.core.view.WindowInsetsCompat$Impl30: WindowInsetsCompat$Impl30(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl30)
me.carda.awesome_notifications.core.enumerators.ForegroundStartMode: me.carda.awesome_notifications.core.enumerators.ForegroundStartMode valueOf(java.lang.String)
androidx.appcompat.widget.ActionBarContextView: void setSubtitle(java.lang.CharSequence)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: int numTrims()
androidx.appcompat.widget.SearchView$Api29Impl: void refreshAutoCompleteResults(android.widget.AutoCompleteTextView)
me.carda.awesome_notifications.core.exceptions.ExceptionFactory: me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException createNewAwesomeException(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
com.google.gson.stream.JsonReader: void skipQuotedValue(char)
io.grpc.okhttp.internal.Platform$TlsExtensionType: io.grpc.okhttp.internal.Platform$TlsExtensionType valueOf(java.lang.String)
com.google.android.material.textfield.TextInputLayout: void setErrorTextColor(android.content.res.ColorStateList)
com.google.android.material.chip.Chip: java.lang.CharSequence getCloseIconContentDescription()
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] values()
com.google.android.material.chip.Chip: void setBackgroundColor(int)
androidx.appcompat.view.menu.ActionMenuItemView: void setTitle(java.lang.CharSequence)
me.carda.awesome_notifications.core.managers.RepositoryManager: me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB convertOldSharedPreferencesIntoSqLite(android.content.Context,android.content.SharedPreferences)
io.flutter.embedding.engine.FlutterJNI: void nativeRunBundleAndSnapshotFromLibrary(long,java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager,java.util.List)
androidx.recyclerview.widget.RecyclerView: void setClipToPadding(boolean)
androidx.appcompat.widget.Toolbar: androidx.appcompat.widget.DecorToolbar getWrapper()
me.carda.awesome_notifications.core.services.BackgroundService: void onHandleWork(android.content.Intent)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: void lambda$setAllStringValues$4(android.content.ContentValues,java.lang.String)
com.google.android.material.textfield.TextInputLayout: android.graphics.drawable.Drawable getOrCreateOutlinedDropDownMenuBackground()
com.google.android.material.textfield.TextInputLayout: void setEndIconScaleType(android.widget.ImageView$ScaleType)
androidx.core.widget.EdgeEffectCompat$Api31Impl: android.widget.EdgeEffect create(android.content.Context,android.util.AttributeSet)
me.carda.awesome_notifications.core.models.NotificationMessageModel: java.util.Map toMap()
me.carda.awesome_notifications.core.enumerators.NotificationPrivacy: int toAndroidPrivacy(me.carda.awesome_notifications.core.enumerators.NotificationPrivacy)
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements: void startRearDisplayPresentationSession(android.app.Activity,androidx.window.extensions.core.util.function.Consumer)
me.carda.awesome_notifications.core.enumerators.NotificationPrivacy: me.carda.awesome_notifications.core.enumerators.NotificationPrivacy getSafeEnum(java.lang.String)
me.carda.awesome_notifications.core.logs.Logger: java.lang.String getCurrentTime()
com.google.android.material.textfield.TextInputLayout: android.widget.EditText getEditText()
io.grpc.util.SecretRoundRobinLoadBalancerProvider$Provider: SecretRoundRobinLoadBalancerProvider$Provider()
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
me.carda.awesome_notifications.core.threads.NotificationSender: void whenComplete(me.carda.awesome_notifications.core.models.returnedData.NotificationReceived,me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException)
com.google.android.material.drawable.DrawableUtils$OutlineCompatR: void setPath(android.graphics.Outline,android.graphics.Path)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageTextureRegistryEntry: long id()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.media.Image acquireLatestImage()
com.google.firebase.firestore.util.AsyncQueue$TimerId: com.google.firebase.firestore.util.AsyncQueue$TimerId[] values()
com.google.firebase.firestore.core.LimboDocumentChange$Type: com.google.firebase.firestore.core.LimboDocumentChange$Type valueOf(java.lang.String)
me.carda.awesome_notifications.core.managers.ActionManager: boolean commitChanges(android.content.Context)
androidx.appcompat.widget.AppCompatButton: androidx.appcompat.widget.AppCompatEmojiTextHelper getEmojiTextViewHelper()
androidx.core.view.WindowInsetsCompat$Impl20: boolean isRound()
com.google.firebase.firestore.core.DocumentViewChange$Type: com.google.firebase.firestore.core.DocumentViewChange$Type valueOf(java.lang.String)
me.carda.awesome_notifications.core.enumerators.NotificationImportance: me.carda.awesome_notifications.core.enumerators.NotificationImportance fromAndroidImportance(int)
me.carda.awesome_notifications.core.managers.DefaultsManager: boolean setDisplayedCallbackDispatcher(android.content.Context,java.lang.Long)
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat[] values()
me.carda.awesome_notifications.core.models.NotificationModel: java.util.List extractNotificationButtons(java.util.Map)
com.google.android.material.textfield.TextInputLayout: void setHintTextColor(android.content.res.ColorStateList)
me.carda.awesome_notifications.core.managers.LifeCycleManager: me.carda.awesome_notifications.core.managers.LifeCycleManager unsubscribe(me.carda.awesome_notifications.core.listeners.AwesomeLifeCycleEventListener)
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$PresentationState detachState()
io.grpc.okhttp.OkHttpServerProvider: OkHttpServerProvider()
androidx.constraintlayout.helper.widget.Flow: void setFirstHorizontalBias(float)
me.carda.awesome_notifications.core.managers.SharedManager: android.content.SharedPreferences getSharedInstance(android.content.Context)
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.util.TreeSet getSet(int)
androidx.core.view.ViewCompat$Api29Impl: java.util.List getSystemGestureExclusionRects(android.view.View)
androidx.core.app.RemoteActionCompatParcelizer: RemoteActionCompatParcelizer()
me.carda.awesome_notifications.core.models.NotificationCalendarModel: me.carda.awesome_notifications.core.models.AbstractModel fromMap(java.util.Map)
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver: me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver subscribeOnNotificationEvents(me.carda.awesome_notifications.core.listeners.AwesomeNotificationEventListener)
com.google.android.material.chip.Chip: void setMaxWidth(int)
androidx.core.app.JobIntentService: boolean doStopCurrentWork()
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: boolean setInt(android.content.Context,java.lang.String,java.lang.String,int)
me.carda.awesome_notifications.core.managers.DismissedManager: java.util.List listDismisses(android.content.Context)
com.google.android.material.textfield.TextInputLayout: float getBoxCornerRadiusTopStart()
io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$DocumentChangeType: io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$DocumentChangeType[] values()
com.google.firebase.firestore.remote.Stream$State: com.google.firebase.firestore.remote.Stream$State[] values()
com.google.gson.internal.bind.TypeAdapters$4: TypeAdapters$4()
me.carda.awesome_notifications.core.utils.CalendarUtils: java.util.Calendar getCurrentCalendar()
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType[] values()
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.lang.String getCronExpression()
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityStopped(android.app.Activity)
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements: android.util.DisplayMetrics getRearDisplayMetrics()
com.google.android.material.chip.Chip: void setEllipsize(android.text.TextUtils$TruncateAt)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization valueOf(java.lang.String)
androidx.core.view.MenuItemCompat$Api26Impl: android.view.MenuItem setIconTintMode(android.view.MenuItem,android.graphics.PorterDuff$Mode)
androidx.core.view.ViewConfigurationCompat$Api34Impl: int getScaledMaximumFlingVelocity(android.view.ViewConfiguration,int,int,int)
android.support.v4.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel)
me.carda.awesome_notifications.core.builders.NotificationBuilder: android.app.Notification createNewAndroidNotification(android.content.Context,android.content.Intent,me.carda.awesome_notifications.core.models.NotificationModel)
me.carda.awesome_notifications.core.models.NotificationLocalizationModel: java.util.Map toMap()
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.lang.String getString(android.content.Context,java.lang.String,java.lang.String,java.lang.String)
io.flutter.embedding.android.KeyData$DeviceType: io.flutter.embedding.android.KeyData$DeviceType[] values()
androidx.core.view.ViewCompat$Api23Impl: androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)
me.carda.awesome_notifications.core.managers.RepositoryManager: java.util.List getAllObjectsStartingWith(android.content.Context,java.lang.String,java.lang.String)
com.google.android.material.textfield.TextInputLayout: void setBoxBackgroundColorResource(int)
androidx.core.widget.CompoundButtonCompat$Api21Impl: android.content.res.ColorStateList getButtonTintList(android.widget.CompoundButton)
androidx.appcompat.widget.AppCompatTextView: void setLineHeight(int)
me.carda.awesome_notifications.core.models.NotificationChannelModel: boolean equals(java.lang.Object)
androidx.core.widget.PopupWindowCompat$Api23Impl: void setOverlapAnchor(android.widget.PopupWindow,boolean)
androidx.profileinstaller.ProfileInstallReceiver: ProfileInstallReceiver()
com.google.protobuf.WireFormat$JavaType: com.google.protobuf.WireFormat$JavaType[] values()
androidx.core.view.MenuItemCompat$Api26Impl: android.view.MenuItem setContentDescription(android.view.MenuItem,java.lang.CharSequence)
me.carda.awesome_notifications.core.listeners.AwesomeActionEventListener: boolean onNewActionReceivedWithInterruption(java.lang.String,me.carda.awesome_notifications.core.models.returnedData.ActionReceived)
me.carda.awesome_notifications.core.managers.BadgeManager: me.carda.awesome_notifications.core.managers.BadgeManager getInstance()
me.carda.awesome_notifications.core.decoders.BitmapResourceDecoder: void whenComplete(byte[],me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException)
io.grpc.util.OutlierDetectionLoadBalancerProvider: boolean isAvailable()
androidx.appcompat.widget.AppCompatCheckBox: void setSupportCompoundDrawablesTintList(android.content.res.ColorStateList)
me.carda.awesome_notifications.core.models.NotificationButtonModel: me.carda.awesome_notifications.core.models.AbstractModel fromJson(java.lang.String)
com.google.firestore.v1.Write$OperationCase: com.google.firestore.v1.Write$OperationCase valueOf(java.lang.String)
me.carda.awesome_notifications.core.threads.NotificationForegroundSender: NotificationForegroundSender(android.content.Context,me.carda.awesome_notifications.core.utils.StringUtils,me.carda.awesome_notifications.core.services.ForegroundService$ForegroundServiceIntent,me.carda.awesome_notifications.core.builders.NotificationBuilder,me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle,me.carda.awesome_notifications.core.completion_handlers.NotificationThreadCompletionHandler)
com.google.android.material.button.MaterialButtonToggleGroup: void setSingleSelection(boolean)
androidx.core.view.ViewCompat$Api21Impl$1: ViewCompat$Api21Impl$1(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)
androidx.appcompat.widget.Toolbar: int getCurrentContentInsetLeft()
me.carda.awesome_notifications.core.models.NotificationModel: me.carda.awesome_notifications.core.models.AbstractModel fromJson(java.lang.String)
androidx.constraintlayout.widget.ConstraintLayout: void setOptimizationLevel(int)
androidx.core.view.ViewCompat$Api28Impl: java.lang.Object requireViewById(android.view.View,int)
io.flutter.view.TextureRegistry$SurfaceTextureEntry$-CC: void $default$setOnTrimMemoryListener(io.flutter.view.TextureRegistry$SurfaceTextureEntry,io.flutter.view.TextureRegistry$OnTrimMemoryListener)
me.carda.awesome_notifications.DartDismissedNotificationReceiver: DartDismissedNotificationReceiver()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.media.ImageReader createImageReader29()
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodStopForeground(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.android.material.textfield.TextInputLayout: void setSuffixTextAppearance(int)
me.carda.awesome_notifications.core.managers.DismissedManager: DismissedManager()
androidx.appcompat.widget.ActionBarContainer: void setTransitioning(boolean)
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation valueOf(java.lang.String)
com.google.android.material.textfield.TextInputLayout: void setStartIconDrawable(int)
me.carda.awesome_notifications.core.databases.SqLiteCypher: java.lang.String getInstallationSecret(java.lang.String)
android.support.v4.media.AudioAttributesImplApi26Parcelizer: AudioAttributesImplApi26Parcelizer()
me.carda.awesome_notifications.core.builders.NotificationBuilder: java.lang.Integer getLayoutColor(me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.models.NotificationChannelModel)
me.carda.awesome_notifications.core.managers.PermissionManager: void shouldShowAndroidRequestDialog(android.app.Activity,android.content.Context,java.lang.String,java.util.List,java.util.List,me.carda.awesome_notifications.core.completion_handlers.PermissionCompletionHandler)
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: void setBackgroundTintList(android.content.res.ColorStateList)
me.carda.awesome_notifications.core.models.NotificationModel: me.carda.awesome_notifications.core.models.NotificationModel ClonePush()
androidx.core.view.ViewCompat$Api21Impl: void stopNestedScroll(android.view.View)
me.carda.awesome_notifications.core.AwesomeNotifications: boolean dismissNotificationsByChannelKey(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void nativeRegisterTexture(long,long,java.lang.ref.WeakReference)
com.google.android.material.snackbar.SnackbarContentLayout: SnackbarContentLayout(android.content.Context,android.util.AttributeSet)
com.google.android.material.textfield.TextInputLayout: android.content.res.ColorStateList getBoxStrokeErrorColor()
com.google.android.material.chip.Chip: void setCheckedIcon(android.graphics.drawable.Drawable)
me.carda.awesome_notifications.core.builders.NotificationBuilder: void ensureCriticalAlert(android.content.Context)
me.carda.awesome_notifications.core.enumerators.NotificationImportance: me.carda.awesome_notifications.core.enumerators.NotificationImportance[] values()
me.carda.awesome_notifications.core.services.BackgroundService: java.lang.Long getDartCallbackDispatcher(android.content.Context)
androidx.core.view.WindowInsetsCompat$Impl28: int hashCode()
me.carda.awesome_notifications.core.models.NotificationChannelModel: java.lang.String getChannelHashKey(android.content.Context,boolean)
androidx.core.view.ViewCompat$Api28Impl: boolean isAccessibilityHeading(android.view.View)
io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$AggregateType: io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$AggregateType[] values()
com.google.gson.stream.MalformedJsonException: MalformedJsonException(java.lang.Throwable)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType valueOf(java.lang.String)
me.carda.awesome_notifications.core.managers.LocalizationManager: boolean setLocalization(android.content.Context,java.lang.String)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.Boolean)
androidx.recyclerview.widget.RecyclerView: androidx.recyclerview.widget.RecyclerView$RecycledViewPool getRecycledViewPool()
me.carda.awesome_notifications.core.models.NotificationCrontabModel: me.carda.awesome_notifications.core.models.AbstractModel fromJson(java.lang.String)
com.google.android.material.button.MaterialButton: int getCornerRadius()
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()
androidx.core.view.WindowInsetsCompat$Impl: WindowInsetsCompat$Impl(androidx.core.view.WindowInsetsCompat)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodCancelAllNotifications(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
me.carda.awesome_notifications.core.broadcasters.senders.BroadcastSender: BroadcastSender()
androidx.transition.ViewUtilsApi19$Api29Impl: void setTransitionAlpha(android.view.View,float)
com.google.android.material.chip.Chip: void setTextEndPadding(float)
android.support.v4.media.session.PlaybackStateCompat$Api21Impl: long getLastPositionUpdateTime(android.media.session.PlaybackState)
io.flutter.embedding.engine.FlutterJNI: void handlePlatformMessageResponse(int,java.nio.ByteBuffer)
com.google.firebase.firestore.core.UserData$Source: com.google.firebase.firestore.core.UserData$Source valueOf(java.lang.String)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void getTransformMatrix(float[])
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: void removeAllSchedules(android.content.Context)
me.carda.awesome_notifications.core.externalLibs.CronExpression: boolean isSatisfiedBy(java.util.Date)
me.carda.awesome_notifications.core.enumerators.ForegroundServiceType: me.carda.awesome_notifications.core.enumerators.ForegroundServiceType[] values()
com.google.android.material.textfield.TextInputLayout: java.lang.CharSequence getPasswordVisibilityToggleContentDescription()
com.google.android.material.button.MaterialButton: android.graphics.drawable.Drawable getIcon()
androidx.recyclerview.widget.RecyclerView: void setItemAnimator(androidx.recyclerview.widget.RecyclerView$ItemAnimator)
com.google.android.material.button.MaterialButton: void setStrokeWidth(int)
com.google.gson.internal.bind.TypeAdapters$18: TypeAdapters$18()
androidx.constraintlayout.solver.widgets.analyzer.WidgetRun$RunType: androidx.constraintlayout.solver.widgets.analyzer.WidgetRun$RunType[] values()
androidx.core.view.WindowInsetsCompat$Impl20: WindowInsetsCompat$Impl20(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodCancelSchedulesByGroupKey(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.firebase.firestore.core.OrderBy$Direction: com.google.firebase.firestore.core.OrderBy$Direction[] values()
me.carda.awesome_notifications.core.managers.StatusBarManager: java.lang.String getIndexActiveNotificationChannel(java.lang.String)
me.carda.awesome_notifications.core.managers.DefaultsManager: me.carda.awesome_notifications.core.models.DefaultsModel getDefaults(android.content.Context)
com.google.android.material.internal.NavigationMenuView: NavigationMenuView(android.content.Context,android.util.AttributeSet)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodGetLocalization(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api34Impl: boolean hasRequestInitialAccessibilityFocus(android.view.accessibility.AccessibilityNodeInfo)
androidx.appcompat.view.menu.ExpandedMenuView: int getWindowAnimations()
com.google.android.material.chip.Chip: void setCloseIconEndPadding(float)
androidx.appcompat.widget.Toolbar: void setCollapseIcon(android.graphics.drawable.Drawable)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setStrokeWidth(float)
me.carda.awesome_notifications.core.utils.IntegerUtils: java.lang.Integer convertToInt(java.lang.Object)
me.carda.awesome_notifications.core.models.NotificationContentModel: void validateIcon(android.content.Context)
androidx.core.app.NotificationCompatBuilder$Api31Impl: android.app.Notification$Builder setForegroundServiceBehavior(android.app.Notification$Builder,int)
androidx.core.text.HtmlCompat$Api24Impl: android.text.Spanned fromHtml(java.lang.String,int)
me.carda.awesome_notifications.core.models.NotificationLocalizationModel: me.carda.awesome_notifications.core.models.NotificationLocalizationModel fromJson(java.lang.String)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void setRootAlpha(int)
me.carda.awesome_notifications.core.builders.NotificationBuilder: NotificationBuilder(me.carda.awesome_notifications.core.utils.StringUtils,me.carda.awesome_notifications.core.utils.BitmapUtils,me.carda.awesome_notifications.core.managers.PermissionManager)
me.carda.awesome_notifications.core.utils.CalendarUtils: java.util.Calendar getCurrentCalendar(java.util.TimeZone)
androidx.core.view.animation.PathInterpolatorCompat$Api21Impl: android.view.animation.Interpolator createPathInterpolator(float,float)
com.google.android.material.textfield.TextInputLayout: void setEndIconDrawable(int)
com.google.android.material.chip.Chip: void setBackgroundResource(int)
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken[] values()
com.google.android.material.timepicker.TimePickerView: TimePickerView(android.content.Context,android.util.AttributeSet)
com.google.android.material.internal.ForegroundLinearLayout: void setForegroundGravity(int)
io.flutter.embedding.engine.FlutterJNI: void cleanupMessageData(long)
me.carda.awesome_notifications.core.managers.ActionManager: boolean removeAllActions(android.content.Context)
com.google.android.material.textfield.TextInputLayout: int getBoxStrokeWidth()
androidx.core.view.WindowInsetsCompat$Impl21: androidx.core.graphics.Insets getStableInsets()
me.carda.awesome_notifications.core.utils.StringUtils: java.lang.Boolean isNullOrEmpty(java.lang.String)
androidx.core.view.MenuItemCompat$Api26Impl: android.view.MenuItem setShortcut(android.view.MenuItem,char,char,int,int)
com.google.android.material.button.MaterialButton: com.google.android.material.shape.ShapeAppearanceModel getShapeAppearanceModel()
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken valueOf(java.lang.String)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api34Impl: boolean isAccessibilityDataSensitive(android.view.accessibility.AccessibilityNodeInfo)
androidx.core.view.VelocityTrackerCompat$Api34Impl: float getAxisVelocity(android.view.VelocityTracker,int,int)
com.google.android.material.chip.Chip: void setCloseIconEnabled(boolean)
io.flutter.embedding.engine.FlutterJNI: void nativeDeferredComponentInstallFailure(int,java.lang.String,boolean)
me.carda.awesome_notifications.core.utils.BitmapUtils: BitmapUtils()
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics getViewportMetrics()
me.carda.awesome_notifications.core.managers.ChannelManager: me.carda.awesome_notifications.core.managers.ChannelManager getInstance()
me.carda.awesome_notifications.core.enumerators.NotificationPermission: me.carda.awesome_notifications.core.enumerators.NotificationPermission valueOf(java.lang.String)
com.google.android.material.snackbar.Snackbar$SnackbarLayout: void setBackgroundTintList(android.content.res.ColorStateList)
androidx.media.AudioAttributesCompat: AudioAttributesCompat()
androidx.appcompat.widget.Toolbar: void setPopupTheme(int)
me.carda.awesome_notifications.core.broadcasters.receivers.DismissedNotificationReceiver: void onReceiveBroadcastEvent(android.content.Context,android.content.Intent)
me.carda.awesome_notifications.core.threads.NotificationForegroundSender: void whenComplete(me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException)
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver: void onBroadcastSilentActionNotification(android.content.Context,me.carda.awesome_notifications.core.models.returnedData.ActionReceived)
com.google.android.material.carousel.CarouselLayoutManager: CarouselLayoutManager(android.content.Context,android.util.AttributeSet,int,int)
com.google.gson.stream.JsonReader: void consumeNonExecutePrefix()
com.google.android.material.textfield.TextInputLayout: android.graphics.drawable.Drawable getOrCreateFilledDropDownMenuBackground()
com.google.android.material.textfield.TextInputLayout: int getEndIconMinSize()
androidx.appcompat.widget.ActionMenuView: void setPresenter(androidx.appcompat.widget.ActionMenuPresenter)
androidx.appcompat.widget.Toolbar: java.lang.CharSequence getLogoDescription()
me.carda.awesome_notifications.core.AwesomeNotifications: boolean cancelSchedulesByChannelKey(java.lang.String)
com.google.firebase.firestore.core.CompositeFilter$Operator: com.google.firebase.firestore.core.CompositeFilter$Operator[] values()
io.grpc.okhttp.OkHttpFrameLogger$Direction: io.grpc.okhttp.OkHttpFrameLogger$Direction[] values()
com.google.android.material.textfield.TextInputLayout: void setEndIconDrawable(android.graphics.drawable.Drawable)
androidx.recyclerview.widget.RecyclerView: int getMinFlingVelocity()
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setStableInsets(androidx.core.graphics.Insets)
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo getRootNode(android.view.View,int,android.graphics.Rect)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointRegionalIndicator(int)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodResetBadge(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.appcompat.widget.AppCompatTextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
com.google.android.material.internal.ForegroundLinearLayout: int getForegroundGravity()
androidx.transition.Transition$Impl26: long getTotalDuration(android.animation.Animator)
io.flutter.plugin.platform.PlatformViewWrapper: void setTouchProcessor(io.flutter.embedding.android.AndroidTouchProcessor)
me.carda.awesome_notifications.core.models.NotificationCrontabModel: me.carda.awesome_notifications.core.models.AbstractModel fromMap(java.util.Map)
me.carda.awesome_notifications.core.AwesomeNotifications: void notifyAwesomeEvent(java.lang.String,me.carda.awesome_notifications.core.models.returnedData.ActionReceived)
com.google.firebase.provider.FirebaseInitProvider: FirebaseInitProvider()
androidx.appcompat.widget.DialogTitle: DialogTitle(android.content.Context,android.util.AttributeSet)
com.google.firestore.admin.v1.Index$IndexField$Order: com.google.firestore.admin.v1.Index$IndexField$Order valueOf(java.lang.String)
io.flutter.view.AccessibilityViewEmbedder: boolean requestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent)
com.google.android.material.textfield.TextInputLayout: void setPasswordVisibilityToggleTintList(android.content.res.ColorStateList)
com.google.android.material.chip.Chip: Chip(android.content.Context,android.util.AttributeSet)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostResumed(android.app.Activity)
com.google.android.material.button.MaterialButton: void setBackgroundResource(int)
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.util.Date getNextInvalidTimeAfter(java.util.Date)
androidx.core.app.NotificationCompat$BigPictureStyle$Api31Impl: void setBigPicture(android.app.Notification$BigPictureStyle,android.graphics.drawable.Icon)
androidx.fragment.app.FragmentContainerView: void setLayoutTransition(android.animation.LayoutTransition)
androidx.appcompat.widget.AppCompatImageView: void setImageResource(int)
androidx.appcompat.widget.Toolbar: int getCurrentContentInsetRight()
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection valueOf(java.lang.String)
io.flutter.embedding.android.FlutterView: void setDelegate(io.flutter.embedding.android.FlutterViewDelegate)
io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$PigeonTransactionResult: io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$PigeonTransactionResult valueOf(java.lang.String)
com.google.android.material.chip.Chip: void setChipEndPaddingResource(int)
com.google.android.material.button.MaterialButton: android.graphics.PorterDuff$Mode getBackgroundTintMode()
com.google.gson.internal.sql.SqlTimeTypeAdapter: SqlTimeTypeAdapter()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode valueOf(java.lang.String)
androidx.appcompat.widget.AppCompatTextView: int[] getAutoSizeTextAvailableSizes()
androidx.appcompat.view.menu.ActionMenuItemView: androidx.appcompat.view.menu.MenuItemImpl getItemData()
com.google.android.material.chip.Chip: void setChipIconSizeResource(int)
me.carda.awesome_notifications.core.utils.StringUtils: java.lang.String getValueOrDefault(java.lang.String,java.lang.String)
me.carda.awesome_notifications.core.utils.AudioUtils: me.carda.awesome_notifications.core.utils.AudioUtils getInstance()
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodListAllSchedules(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.appcompat.widget.TooltipCompat$Api26Impl: void setTooltipText(android.view.View,java.lang.CharSequence)
io.flutter.embedding.engine.FlutterJNI: void nativeUpdateJavaAssetManager(long,android.content.res.AssetManager,java.lang.String)
me.carda.awesome_notifications.core.utils.ListUtils: boolean isNullOrEmpty(java.util.List)
androidx.core.view.WindowCompat$Api30Impl: void setDecorFitsSystemWindows(android.view.Window,boolean)
androidx.appcompat.widget.AppCompatEditText: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
androidx.constraintlayout.helper.widget.Flow: void setHorizontalAlign(int)
com.google.android.material.chip.Chip: void setAccessibilityClassName(java.lang.CharSequence)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api33Impl: java.lang.String getCollectionItemColumnTitle(java.lang.Object)
me.carda.awesome_notifications.core.AwesomeNotifications: boolean dismissNotificationsByGroupKey(java.lang.String)
com.google.android.material.textfield.TextInputLayout: void setErrorIconTintMode(android.graphics.PorterDuff$Mode)
androidx.core.widget.TextViewCompat$Api23Impl: void setHyphenationFrequency(android.widget.TextView,int)
io.grpc.internal.PickFirstLoadBalancerProvider: int getPriority()
me.carda.awesome_notifications.core.managers.DefaultsManager: me.carda.awesome_notifications.core.managers.DefaultsManager getInstance(android.content.Context)
androidx.core.content.res.FontResourcesParserCompat$Api21Impl: int getType(android.content.res.TypedArray,int)
com.google.firestore.v1.BatchGetDocumentsResponse$ResultCase: com.google.firestore.v1.BatchGetDocumentsResponse$ResultCase valueOf(java.lang.String)
io.flutter.view.TextureRegistry$SurfaceTextureEntry: void setOnFrameConsumedListener(io.flutter.view.TextureRegistry$OnFrameConsumedListener)
androidx.core.app.JobIntentService: void enqueueWork(android.content.Context,java.lang.Class,int,android.content.Intent)
io.flutter.embedding.engine.FlutterJNI: void onBeginFrame()
androidx.core.view.WindowInsetsCompat$Impl21: WindowInsetsCompat$Impl21(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)
com.google.gson.stream.JsonReader: boolean hasNext()
me.carda.awesome_notifications.core.managers.PermissionManager: PermissionManager(me.carda.awesome_notifications.core.utils.StringUtils)
com.google.android.material.chip.Chip: void setRippleColor(android.content.res.ColorStateList)
androidx.profileinstaller.ProfileInstallerInitializer$Handler28Impl: android.os.Handler createAsync(android.os.Looper)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api34Impl: void setRequestInitialAccessibilityFocus(android.view.accessibility.AccessibilityNodeInfo,boolean)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getMandatorySystemGestureInsets()
me.carda.awesome_notifications.core.models.AbstractModel: java.lang.String getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,java.lang.String)
com.google.android.material.chip.Chip: void setChipIconResource(int)
io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState: io.flutter.embedding.engine.systemchannels.LifecycleChannel$AppLifecycleState valueOf(java.lang.String)
androidx.core.view.WindowInsetsCompat$BuilderImpl20: android.view.WindowInsets createWindowInsetsInstance()
me.carda.awesome_notifications.core.threads.NotificationScheduler: void cancelSchedulesByGroupKey(android.content.Context,java.lang.String)
com.google.android.material.chip.Chip: void setChipIconVisible(boolean)
androidx.appcompat.widget.LinearLayoutCompat: void setBaselineAligned(boolean)
androidx.appcompat.widget.Toolbar: android.graphics.drawable.Drawable getCollapseIcon()
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void detachAwesomeNotificationsPlugin(android.content.Context)
com.google.android.material.textfield.TextInputLayout: void setErrorAccessibilityLiveRegion(int)
io.grpc.okhttp.internal.Platform$TlsExtensionType: io.grpc.okhttp.internal.Platform$TlsExtensionType[] values()
androidx.core.view.WindowInsetsCompat$BuilderImpl30: WindowInsetsCompat$BuilderImpl30(androidx.core.view.WindowInsetsCompat)
me.carda.awesome_notifications.core.utils.MapUtils: com.google.common.base.Optional extractArgument(java.lang.Object,java.lang.Class)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean access$300(io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer)
me.carda.awesome_notifications.core.utils.BitmapUtils: android.graphics.Bitmap getBitmapFromFile(java.lang.String)
me.carda.awesome_notifications.core.enumerators.SafeEnum: java.lang.String getSafeName()
androidx.appcompat.widget.ActionMenuView: int getWindowAnimations()
me.carda.awesome_notifications.core.utils.TimeZoneUtils: java.util.TimeZone getValidTimeZone(java.lang.String)
androidx.appcompat.widget.Toolbar: android.graphics.drawable.Drawable getOverflowIcon()
me.carda.awesome_notifications.AwesomeNotificationsPlugin: me.carda.awesome_notifications.core.AwesomeNotifications access$100(me.carda.awesome_notifications.AwesomeNotificationsPlugin)
android.support.v4.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel)
me.carda.awesome_notifications.core.models.AbstractModel: me.carda.awesome_notifications.core.enumerators.NotificationPermission getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,me.carda.awesome_notifications.core.enumerators.NotificationPermission)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmoji(int)
me.carda.awesome_notifications.core.managers.ChannelGroupManager: java.lang.Boolean removeChannelGroup(android.content.Context,java.lang.String)
com.google.firestore.v1.StructuredQuery$Direction: com.google.firestore.v1.StructuredQuery$Direction[] values()
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeBroadcastReceiver: void onReceiveBroadcastEvent(android.content.Context,android.content.Intent)
kotlinx.coroutines.android.AndroidExceptionPreHandler: AndroidExceptionPreHandler()
me.carda.awesome_notifications.core.AwesomeNotifications: me.carda.awesome_notifications.core.AwesomeNotifications subscribeOnActionEvents(me.carda.awesome_notifications.core.listeners.AwesomeActionEventListener)
me.carda.awesome_notifications.core.enumerators.NotificationPlayState: me.carda.awesome_notifications.core.enumerators.NotificationPlayState valueOf(java.lang.String)
androidx.core.widget.EdgeEffectCompat$Api31Impl: float onPullDistance(android.widget.EdgeEffect,float,float)
androidx.appcompat.widget.Toolbar$Api33Impl: android.window.OnBackInvokedDispatcher findOnBackInvokedDispatcher(android.view.View)
android.support.v4.media.AudioAttributesImplBaseParcelizer: void write(androidx.media.AudioAttributesImplBase,androidx.versionedparcelable.VersionedParcel)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: java.lang.String getGroupName()
androidx.loader.app.LoaderManagerImpl$LoaderViewModel: LoaderManagerImpl$LoaderViewModel()
androidx.core.widget.NestedScrollView: int getNestedScrollAxes()
androidx.media.AudioAttributesImplApi26Parcelizer: void write(androidx.media.AudioAttributesImplApi26,androidx.versionedparcelable.VersionedParcel)
com.google.android.material.button.MaterialButtonToggleGroup: MaterialButtonToggleGroup(android.content.Context,android.util.AttributeSet)
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action[] values()
me.carda.awesome_notifications.core.models.AbstractModel: void validate(android.content.Context)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.util.Map getFloatsStartingWith(android.content.Context,java.lang.String,java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: long id()
androidx.appcompat.view.menu.ListMenuItemView: androidx.appcompat.view.menu.MenuItemImpl getItemData()
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,int,java.nio.ByteBuffer,int)
me.carda.awesome_notifications.core.logs.Logger: java.lang.String getLastLine()
me.carda.awesome_notifications.core.managers.DisplayedManager: java.util.List listDisplayed(android.content.Context)
me.carda.awesome_notifications.core.managers.StatusBarManager: void removeAllIndexes(android.content.SharedPreferences$Editor,java.lang.String)
androidx.core.view.MenuItemCompat$Api26Impl: android.view.MenuItem setAlphabeticShortcut(android.view.MenuItem,char,int)
androidx.transition.ViewUtilsApi21$Api29Impl: void transformMatrixToGlobal(android.view.View,android.graphics.Matrix)
com.google.android.material.datepicker.MaterialDatePicker: MaterialDatePicker()
me.carda.awesome_notifications.core.AwesomeNotifications: boolean cancelNotification(java.lang.Integer)
com.google.android.material.button.MaterialButton: void setInternalBackground(android.graphics.drawable.Drawable)
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setTimeoutAfter(me.carda.awesome_notifications.core.models.NotificationModel,androidx.core.app.NotificationCompat$Builder)
androidx.core.app.Person$Api28Impl: android.app.Person toAndroidPerson(androidx.core.app.Person)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setScaleX(float)
me.carda.awesome_notifications.core.managers.StatusBarManager: java.util.List getAllAndroidActiveNotificationsByGroupKey(android.content.Context,java.lang.String)
androidx.core.app.JobIntentService: void ensureProcessorRunningLocked(boolean)
com.google.android.material.chip.Chip: void setInternalOnCheckedChangeListener(com.google.android.material.internal.MaterialCheckable$OnCheckedChangeListener)
com.google.android.material.textfield.TextInputLayout: java.lang.CharSequence getSuffixText()
androidx.core.view.ViewCompat$Api26Impl: int getNextClusterForwardId(android.view.View)
androidx.core.app.NotificationCompatBuilder$Api26Impl: android.app.Notification$Builder setTimeoutAfter(android.app.Notification$Builder,long)
me.carda.awesome_notifications.core.managers.StatusBarManager: void removeIndexActiveNotificationGroup(android.content.SharedPreferences$Editor,java.lang.String)
me.carda.awesome_notifications.core.utils.ThreadUtils: boolean isMainThread()
com.google.android.material.button.MaterialButton: void setIconPadding(int)
me.carda.awesome_notifications.core.enumerators.NotificationSource: NotificationSource(java.lang.String,int,java.lang.String)
me.carda.awesome_notifications.core.models.returnedData.ActionReceived: me.carda.awesome_notifications.core.models.returnedData.NotificationReceived fromJson(java.lang.String)
androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setHotspot(android.graphics.drawable.Drawable,float,float)
me.carda.awesome_notifications.core.utils.BooleanUtils: BooleanUtils()
androidx.core.graphics.drawable.IconCompat$Api23Impl: android.graphics.drawable.Drawable loadDrawable(android.graphics.drawable.Icon,android.content.Context)
androidx.startup.InitializationProvider: InitializationProvider()
io.flutter.embedding.engine.FlutterJNI: FlutterJNI()
androidx.appcompat.widget.AppCompatImageView: void setBackgroundResource(int)
androidx.core.view.ViewCompat$Api26Impl: boolean hasExplicitFocusable(android.view.View)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void lambda$dequeueImage$0()
kotlin.random.Random: Random()
com.google.android.material.textfield.TextInputLayout: void setPasswordVisibilityToggleContentDescription(int)
android.support.v4.media.MediaDescriptionCompat$Api21Impl: android.os.Bundle getExtras(android.media.MediaDescription)
androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper$Api23Impl: android.text.StaticLayout createStaticLayoutForMeasuring(java.lang.CharSequence,android.text.Layout$Alignment,int,int,android.widget.TextView,android.text.TextPaint,androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper$Impl)
me.carda.awesome_notifications.core.exceptions.ExceptionFactory: void registerAwesomeException(java.lang.String,me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: void removeBoolean(android.content.Context,java.lang.String,java.lang.String)
com.google.android.material.textfield.TextInputEditText: java.lang.CharSequence getHint()
io.flutter.view.TextureRegistry$SurfaceTextureEntry: void setOnTrimMemoryListener(io.flutter.view.TextureRegistry$OnTrimMemoryListener)
me.carda.awesome_notifications.core.managers.DismissedManager: me.carda.awesome_notifications.core.models.returnedData.NotificationReceived getDismissedByIdAndDate(android.content.Context,java.lang.Integer,java.util.Calendar)
androidx.window.area.reflectionguard.ExtensionWindowAreaStatusRequirements: android.util.DisplayMetrics getWindowAreaDisplayMetrics()
com.google.android.material.chip.Chip: void setShowMotionSpecResource(int)
me.carda.awesome_notifications.core.utils.CalendarUtils: java.util.Calendar shiftTimeZone(java.util.Calendar,java.lang.String)
me.carda.awesome_notifications.core.decoders.BitmapResourceDecoder: java.lang.Object doInBackground()
me.carda.awesome_notifications.core.models.returnedData.ActionReceived: me.carda.awesome_notifications.core.models.returnedData.NotificationReceived fromMap(java.util.Map)
com.google.firebase.database.collection.LLRBNode$Color: com.google.firebase.database.collection.LLRBNode$Color valueOf(java.lang.String)
com.google.android.material.chip.Chip: void setChipIconVisible(int)
androidx.coordinatorlayout.widget.CoordinatorLayout: android.graphics.drawable.Drawable getStatusBarBackground()
me.carda.awesome_notifications.core.AwesomeNotifications: boolean cancelSchedule(java.lang.Integer)
androidx.constraintlayout.widget.ConstraintLayout: int getMaxHeight()
com.google.common.collect.Ordering: Ordering()
me.carda.awesome_notifications.core.AwesomeNotifications: boolean captureNotificationActionFromIntent(android.content.Intent)
androidx.appcompat.widget.AppCompatCheckBox: android.content.res.ColorStateList getSupportButtonTintList()
me.carda.awesome_notifications.core.models.AbstractModel: java.util.TimeZone getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,java.util.TimeZone)
me.carda.awesome_notifications.core.managers.PermissionManager: boolean gotoAndroidChannelPage(android.content.Context,java.lang.String)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets access$500(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
me.carda.awesome_notifications.core.utils.StringUtils: java.lang.Enum getEnumFromString(java.lang.Class,java.lang.String)
android.support.v4.media.session.PlaybackStateCompat$Api21Impl: java.lang.CharSequence getName(android.media.session.PlaybackState$CustomAction)
me.carda.awesome_notifications.core.managers.LostEventsManager: void saveCreated(android.content.Context,me.carda.awesome_notifications.core.models.returnedData.NotificationReceived)
kotlinx.coroutines.selects.TrySelectDetailedResult: kotlinx.coroutines.selects.TrySelectDetailedResult[] values()
me.carda.awesome_notifications.core.listeners.AwesomeActionEventListener: void onNewActionReceived(java.lang.String,me.carda.awesome_notifications.core.models.returnedData.ActionReceived)
me.carda.awesome_notifications.core.models.AbstractModel: me.carda.awesome_notifications.core.enumerators.GroupSort getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,me.carda.awesome_notifications.core.enumerators.GroupSort)
me.carda.awesome_notifications.core.models.AbstractModel: java.lang.Float getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,java.lang.Float)
io.grpc.internal.KeepAliveManager$State: io.grpc.internal.KeepAliveManager$State valueOf(java.lang.String)
androidx.appcompat.widget.AppCompatImageButton: void setImageLevel(int)
me.carda.awesome_notifications.core.models.AbstractModel: java.lang.Long getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,java.lang.Long)
androidx.constraintlayout.helper.widget.Flow: void setPadding(int)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType[] values()
android.support.v4.media.RatingCompat$Api19Impl: android.media.Rating newStarRating(int,float)
androidx.lifecycle.ReportFragment: ReportFragment()
me.carda.awesome_notifications.DartBackgroundExecutor: io.flutter.embedding.engine.FlutterEngine access$000(me.carda.awesome_notifications.DartBackgroundExecutor)
me.carda.awesome_notifications.core.managers.StatusBarManager: void closeStatusBar(android.content.Context)
io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$AggregateSource: io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$AggregateSource[] values()
io.grpc.internal.ClientStreamListener$RpcProgress: io.grpc.internal.ClientStreamListener$RpcProgress[] values()
com.google.android.material.appbar.AppBarLayout$BaseBehavior: AppBarLayout$BaseBehavior()
me.carda.awesome_notifications.core.models.returnedData.NotificationReceived: me.carda.awesome_notifications.core.models.NotificationContentModel fromMap(java.util.Map)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api30Impl: java.lang.CharSequence getStateDescription(android.view.accessibility.AccessibilityNodeInfo)
me.carda.awesome_notifications.core.AwesomeNotifications: java.lang.String getLocalTimeZone()
com.google.android.material.chip.Chip: void setCloseIconContentDescription(java.lang.CharSequence)
androidx.appcompat.widget.AppCompatButton: void setSupportCompoundDrawablesTintMode(android.graphics.PorterDuff$Mode)
me.carda.awesome_notifications.core.listeners.AwesomeExceptionListener: void onNewAwesomeException(java.lang.Exception)
me.carda.awesome_notifications.core.models.NotificationIntervalModel: java.lang.String toJson()
androidx.core.graphics.drawable.DrawableCompat$Api23Impl: int getLayoutDirection(android.graphics.drawable.Drawable)
me.carda.awesome_notifications.core.threads.NotificationSender: void send(android.content.Context,me.carda.awesome_notifications.core.builders.NotificationBuilder,me.carda.awesome_notifications.core.enumerators.NotificationSource,me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle,me.carda.awesome_notifications.core.models.NotificationModel,android.content.Intent,me.carda.awesome_notifications.core.completion_handlers.NotificationThreadCompletionHandler)
androidx.appcompat.widget.AppCompatEditText: android.view.textclassifier.TextClassifier getTextClassifier()
androidx.profileinstaller.ProfileInstallerInitializer$Choreographer16Impl: void postFrameCallback(java.lang.Runnable)
com.google.android.material.textfield.TextInputLayout: void setBoxStrokeColorStateList(android.content.res.ColorStateList)
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)
com.google.android.material.textfield.TextInputLayout: void setBoxStrokeWidth(int)
com.google.android.material.chip.Chip: void setShapeAppearanceModel(com.google.android.material.shape.ShapeAppearanceModel)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
me.carda.awesome_notifications.core.exceptions.ExceptionFactory: me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException createNewAwesomeException(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Exception)
androidx.core.widget.CompoundButtonCompat$Api21Impl: void setButtonTintList(android.widget.CompoundButton,android.content.res.ColorStateList)
androidx.core.app.RemoteActionCompat: RemoteActionCompat()
me.carda.awesome_notifications.core.models.NotificationMessageModel: me.carda.awesome_notifications.core.models.AbstractModel fromMap(java.util.Map)
me.carda.awesome_notifications.core.background.BackgroundExecutor: boolean isDone()
me.carda.awesome_notifications.core.broadcasters.receivers.NotificationActionReceiver: NotificationActionReceiver()
androidx.core.view.ViewCompat$Api23Impl: void setScrollIndicators(android.view.View,int)
androidx.constraintlayout.widget.ConstraintLayout: int getPaddingWidth()
android.support.v4.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel)
androidx.appcompat.widget.Toolbar$Api33Impl: void tryRegisterOnBackInvokedCallback(java.lang.Object,java.lang.Object)
android.support.v4.media.AudioAttributesImplBaseParcelizer: androidx.media.AudioAttributesImplBase read(androidx.versionedparcelable.VersionedParcel)
androidx.core.view.ViewCompat$Api26Impl: void setKeyboardNavigationCluster(android.view.View,boolean)
androidx.core.text.HtmlCompat$Api24Impl: java.lang.String toHtml(android.text.Spanned,int)
me.carda.awesome_notifications.core.models.NotificationCrontabModel: void validate(android.content.Context)
me.carda.awesome_notifications.core.models.returnedData.NotificationReceived: java.lang.String toJson()
me.carda.awesome_notifications.core.AwesomeNotifications: void setChannels(android.content.Context,java.util.List)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: void setAlpha(float)
androidx.core.view.WindowInsetsCompat$Impl20: boolean equals(java.lang.Object)
me.carda.awesome_notifications.core.models.DefaultsModel: java.lang.String toJson()
me.carda.awesome_notifications.core.managers.StatusBarManager: java.util.Map loadNotificationIdFromPreferences(java.lang.String)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.util.Map getAllFloatValues(android.content.Context,java.lang.String)
com.google.gson.stream.JsonReader: int doPeek()
me.carda.awesome_notifications.core.managers.LostEventsManager: java.util.Map recoverNotificationCreated(android.content.Context)
com.google.android.material.textfield.TextInputLayout: void setPasswordVisibilityToggleTintMode(android.graphics.PorterDuff$Mode)
com.google.android.material.button.MaterialButtonToggleGroup: int getCheckedButtonId()
androidx.core.app.NotificationCompatBuilder$Api21Impl: android.app.Notification$Builder setColor(android.app.Notification$Builder,int)
com.google.android.material.button.MaterialButton: void setCheckable(boolean)
me.carda.awesome_notifications.core.services.ForegroundService: ForegroundService()
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setImportance(me.carda.awesome_notifications.core.models.NotificationChannelModel,androidx.core.app.NotificationCompat$Builder)
me.carda.awesome_notifications.core.enumerators.LogLevel: me.carda.awesome_notifications.core.enumerators.LogLevel[] $values()
com.google.android.material.internal.NavigationMenuItemView: void setCheckable(boolean)
androidx.core.widget.NestedScrollView: void setOnScrollChangeListener(androidx.core.widget.NestedScrollView$OnScrollChangeListener)
androidx.appcompat.widget.AppCompatImageView: android.content.res.ColorStateList getSupportImageTintList()
me.carda.awesome_notifications.core.managers.CancellationManager: void dismissAllNotifications(android.content.Context)
androidx.core.content.res.ResourcesCompat$Api21Impl: android.graphics.drawable.Drawable getDrawableForDensity(android.content.res.Resources,int,int,android.content.res.Resources$Theme)
me.carda.awesome_notifications.core.managers.LifeCycleManager: void onStarted()
androidx.core.view.MenuItemCompat$Api26Impl: java.lang.CharSequence getTooltipText(android.view.MenuItem)
me.carda.awesome_notifications.core.utils.JsonUtils: java.util.List jsonToList(org.json.JSONArray)
androidx.appcompat.widget.AppCompatTextView: int getAutoSizeStepGranularity()
io.flutter.embedding.engine.FlutterJNI: long performNativeAttach(io.flutter.embedding.engine.FlutterJNI)
androidx.core.view.ViewCompat$Api29Impl: android.view.contentcapture.ContentCaptureSession getContentCaptureSession(android.view.View)
me.carda.awesome_notifications.core.AwesomeNotifications: boolean onNewActionReceivedWithInterruption(java.lang.String,me.carda.awesome_notifications.core.models.returnedData.ActionReceived)
io.flutter.embedding.engine.FlutterJNI: void updateJavaAssetManager(android.content.res.AssetManager,java.lang.String)
me.carda.awesome_notifications.core.utils.BitmapUtils: android.graphics.Bitmap getBitmapFromUrl(java.lang.String)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPath: void setPathData(androidx.core.graphics.PathParser$PathDataNode[])
com.google.gson.stream.JsonWriter: boolean isLenient()
androidx.appcompat.widget.Toolbar: void setTitleMarginStart(int)
me.carda.awesome_notifications.core.models.AbstractModel: java.util.Map getValueOrDefaultMap(java.util.Map,java.lang.String,java.util.Map)
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setSystemGestureInsets(androidx.core.graphics.Insets)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: void removeAllString(android.content.Context,java.lang.String)
com.google.gson.Gson$FutureTypeAdapter: Gson$FutureTypeAdapter()
me.carda.awesome_notifications.core.AwesomeNotifications: void clearStoredActions()
com.google.android.material.chip.Chip: float getChipStrokeWidth()
me.carda.awesome_notifications.core.managers.ActionManager: boolean saveAction(android.content.Context,me.carda.awesome_notifications.core.models.returnedData.ActionReceived)
androidx.appcompat.widget.AppCompatButton: void setEmojiCompatEnabled(boolean)
androidx.appcompat.widget.AppCompatCheckBox: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
me.carda.awesome_notifications.DartBackgroundExecutor: void executeDartCallbackInBackgroundIsolate(android.content.Intent)
io.grpc.Context$DirectExecutor: io.grpc.Context$DirectExecutor[] values()
androidx.appcompat.widget.LinearLayoutCompat: int getShowDividers()
androidx.constraintlayout.helper.widget.Flow: void setVerticalAlign(int)
me.carda.awesome_notifications.core.managers.CancellationManager: boolean dismissNotification(android.content.Context,java.lang.Integer)
me.carda.awesome_notifications.core.utils.EnumUtils: EnumUtils()
androidx.appcompat.widget.AppCompatTextView: int getAutoSizeTextType()
me.carda.awesome_notifications.core.utils.BitmapUtils: android.graphics.Bitmap getBitmapFromSource(android.content.Context,java.lang.String,boolean)
me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException: AwesomeNotificationsException(java.lang.String,java.lang.String,java.lang.String)
kotlinx.coroutines.android.AndroidDispatcherFactory: AndroidDispatcherFactory()
me.carda.awesome_notifications.core.AwesomeNotifications: boolean setChannel(me.carda.awesome_notifications.core.models.NotificationChannelModel,boolean)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.lang.Object getRow(android.content.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.Object,me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB$iGetRow)
com.google.android.material.button.MaterialButton: void setToggleCheckedStateOnClick(boolean)
com.google.android.material.sidesheet.SideSheetBehavior: SideSheetBehavior()
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api34Impl: void setQueryFromAppProcessEnabled(android.view.accessibility.AccessibilityNodeInfo,android.view.View,boolean)
me.carda.awesome_notifications.core.models.NotificationCalendarModel: me.carda.awesome_notifications.core.models.NotificationCalendarModel fromJson(java.lang.String)
androidx.appcompat.widget.LinearLayoutCompat: float getWeightSum()
androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper$Impl29: boolean isHorizontallyScrollable(android.widget.TextView)
me.carda.awesome_notifications.core.enumerators.LogLevel: LogLevel(java.lang.String,int,java.lang.String)
androidx.appcompat.widget.Toolbar: java.lang.CharSequence getCollapseContentDescription()
io.flutter.embedding.engine.FlutterJNI: void nativeCleanupMessageData(long)
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness valueOf(java.lang.String)
me.carda.awesome_notifications.core.utils.MapUtils: java.lang.Boolean isNullOrEmpty(java.util.Map)
com.google.protobuf.WireFormat$JavaType: com.google.protobuf.WireFormat$JavaType valueOf(java.lang.String)
com.google.android.material.internal.NavigationMenuItemView: void setIcon(android.graphics.drawable.Drawable)
me.carda.awesome_notifications.core.managers.ChannelManager: boolean androidChannelNeedsUpdate(me.carda.awesome_notifications.core.models.NotificationChannelModel,android.app.NotificationChannel)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: void lambda$setAllBooleanValues$6(android.content.ContentValues,java.lang.Boolean)
androidx.appcompat.widget.ListPopupWindow$Api29Impl: void setIsClippedToScreen(android.widget.PopupWindow,boolean)
androidx.core.view.WindowInsetsCompat$BuilderImpl20: androidx.core.view.WindowInsetsCompat build()
androidx.media.AudioAttributesImplApi21Parcelizer: AudioAttributesImplApi21Parcelizer()
me.carda.awesome_notifications.core.enumerators.ForegroundServiceType: java.lang.String getSafeName()
android.support.v4.media.AudioAttributesImplApi26Parcelizer: void write(androidx.media.AudioAttributesImplApi26,androidx.versionedparcelable.VersionedParcel)
androidx.core.view.WindowInsetsCompat$Impl28: androidx.core.view.DisplayCutoutCompat getDisplayCutout()
androidx.constraintlayout.helper.widget.Flow: void setHorizontalGap(int)
me.carda.awesome_notifications.core.models.AbstractModel: me.carda.awesome_notifications.core.enumerators.NotificationPrivacy getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,me.carda.awesome_notifications.core.enumerators.NotificationPrivacy)
me.leolin.shortcutbadger.impl.XiaomiHomeBadger: XiaomiHomeBadger()
androidx.core.view.MenuItemCompat$Api26Impl: int getAlphabeticModifiers(android.view.MenuItem)
com.google.android.material.appbar.MaterialToolbar: java.lang.Integer getNavigationIconTint()
androidx.core.content.res.ResourcesCompat$Api23Impl: android.content.res.ColorStateList getColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme)
me.carda.awesome_notifications.core.enumerators.NotificationSource: me.carda.awesome_notifications.core.enumerators.NotificationSource getSafeEnum(java.lang.String)
me.carda.awesome_notifications.core.managers.ScheduleManager: void cancelScheduleById(android.content.Context,java.lang.Integer)
androidx.window.extensions.core.util.function.Function: java.lang.Object apply(java.lang.Object)
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver: void addAwesomeActionEvent(android.content.Context,java.lang.String,me.carda.awesome_notifications.core.models.returnedData.ActionReceived)
androidx.core.view.ViewCompat$Api31Impl: androidx.core.view.ContentInfoCompat performReceiveContent(android.view.View,androidx.core.view.ContentInfoCompat)
com.google.android.material.textfield.TextInputLayout: void setPrefixTextColor(android.content.res.ColorStateList)
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setVisibility(android.content.Context,me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.models.NotificationChannelModel,androidx.core.app.NotificationCompat$Builder)
me.carda.awesome_notifications.core.externalLibs.CronExpression: int storeExpressionVals(int,java.lang.String,int)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: void lambda$setAllIntValues$3(android.content.ContentValues,java.lang.Integer)
me.carda.awesome_notifications.core.models.NotificationCrontabModel: java.util.Calendar getNextValidDate(java.util.Calendar)
me.carda.awesome_notifications.core.AwesomeNotificationsExtension: void loadExternalExtensions(android.content.Context)
com.google.android.material.textfield.TextInputLayout: void setBoxCollapsedPaddingTop(int)
androidx.constraintlayout.widget.Guideline: void setVisibility(int)
io.flutter.embedding.engine.FlutterJNI: void requestDartDeferredLibrary(int)
me.carda.awesome_notifications.core.enumerators.ForegroundStartMode: int toAndroidStartMode()
androidx.appcompat.view.menu.ListMenuItemView: void setGroupDividerEnabled(boolean)
androidx.core.widget.TextViewCompat$Api34Impl: void setLineHeight(android.widget.TextView,int,float)
me.carda.awesome_notifications.core.models.NotificationIntervalModel: me.carda.awesome_notifications.core.models.AbstractModel fromJson(java.lang.String)
me.carda.awesome_notifications.core.exceptions.ExceptionFactory: void registerNewAwesomeException(java.lang.String,java.lang.String,java.lang.String,java.lang.Exception)
me.carda.awesome_notifications.core.AwesomeNotifications: boolean captureNotificationActionFromIntent(android.content.Intent,boolean)
com.google.firestore.v1.StructuredQuery$FieldFilter$Operator: com.google.firestore.v1.StructuredQuery$FieldFilter$Operator[] values()
me.carda.awesome_notifications.core.managers.RepositoryManager: java.lang.Boolean remove(android.content.Context,java.lang.String,java.lang.String)
me.carda.awesome_notifications.core.managers.ChannelManager: ChannelManager(me.carda.awesome_notifications.core.utils.StringUtils,me.carda.awesome_notifications.core.utils.AudioUtils)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: void setTranslateX(float)
io.grpc.ConnectivityState: io.grpc.ConnectivityState[] values()
me.carda.awesome_notifications.core.AwesomeNotifications: me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle getApplicationLifeCycle()
io.grpc.okhttp.internal.CipherSuite: io.grpc.okhttp.internal.CipherSuite[] values()
androidx.profileinstaller.FileSectionType: androidx.profileinstaller.FileSectionType[] values()
androidx.core.view.ViewCompat$Api20Impl: android.view.WindowInsets dispatchApplyWindowInsets(android.view.View,android.view.WindowInsets)
androidx.core.app.NotificationCompat$BubbleMetadata$Api30Impl: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)
androidx.appcompat.widget.AppCompatButton: android.content.res.ColorStateList getSupportBackgroundTintList()
com.google.android.material.textfield.TextInputLayout: void setPlaceholderTextEnabled(boolean)
io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$PigeonTransactionType: io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$PigeonTransactionType valueOf(java.lang.String)
me.carda.awesome_notifications.core.managers.StatusBarManager: void showNotificationOnStatusBar(android.content.Context,me.carda.awesome_notifications.core.models.NotificationModel,android.app.Notification)
me.carda.awesome_notifications.core.builders.NotificationBuilder: void wakeUpScreen(android.content.Context)
me.carda.awesome_notifications.core.externalLibs.CronExpression: CronExpression(me.carda.awesome_notifications.core.externalLibs.CronExpression)
me.carda.awesome_notifications.core.utils.CalendarUtils: java.util.TimeZone getUtcTimeZone()
io.grpc.MethodDescriptor$MethodType: io.grpc.MethodDescriptor$MethodType valueOf(java.lang.String)
android.support.v4.media.AudioAttributesCompatParcelizer: androidx.media.AudioAttributesCompat read(androidx.versionedparcelable.VersionedParcel)
com.google.android.material.search.SearchView$Behavior: SearchView$Behavior()
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: void setBackground(android.graphics.drawable.Drawable)
me.carda.awesome_notifications.core.externalLibs.CronExpression: CronExpression(java.lang.String)
me.carda.awesome_notifications.core.utils.JsonUtils: java.lang.String toJson(java.lang.Object)
androidx.core.view.ViewParentCompat$Api21Impl: boolean onStartNestedScroll(android.view.ViewParent,android.view.View,android.view.View,int)
androidx.constraintlayout.helper.widget.Flow: void setPaddingLeft(int)
com.google.firebase.firestore.model.MutableDocument$DocumentType: com.google.firebase.firestore.model.MutableDocument$DocumentType valueOf(java.lang.String)
me.carda.awesome_notifications.core.broadcasters.receivers.ScheduledNotificationReceiver: void onReceiveBroadcastEvent(android.content.Context,android.content.Intent)
me.carda.awesome_notifications.core.models.AbstractModel: java.lang.String templateToJson()
me.carda.awesome_notifications.core.models.AbstractModel: me.carda.awesome_notifications.core.models.AbstractModel fromJson(java.lang.String)
com.google.android.material.internal.NavigationMenuItemView: NavigationMenuItemView(android.content.Context,android.util.AttributeSet)
io.flutter.embedding.engine.FlutterJNI: void registerTexture(long,io.flutter.embedding.engine.renderer.SurfaceTextureWrapper)
androidx.appcompat.widget.ButtonBarLayout: void setAllowStacking(boolean)
com.google.android.material.button.MaterialButton: int getStrokeWidth()
com.google.android.material.button.MaterialButtonToggleGroup: int getVisibleButtonCount()
me.carda.awesome_notifications.core.enumerators.NotificationPrivacy: NotificationPrivacy(java.lang.String,int,java.lang.String)
androidx.appcompat.widget.LinearLayoutCompat: android.graphics.drawable.Drawable getDividerDrawable()
androidx.appcompat.widget.Toolbar: int getContentInsetRight()
androidx.coordinatorlayout.widget.CoordinatorLayout: androidx.core.view.WindowInsetsCompat getLastWindowInsets()
androidx.constraintlayout.widget.ConstraintLayout: int getOptimizationLevel()
androidx.lifecycle.ProcessLifecycleOwner$attach$1: ProcessLifecycleOwner$attach$1(androidx.lifecycle.ProcessLifecycleOwner)
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver: boolean isReadyToReceiveEvents()
androidx.appcompat.widget.AppCompatCheckBox: void setButtonDrawable(android.graphics.drawable.Drawable)
com.google.android.material.textfield.TextInputLayout: TextInputLayout(android.content.Context,android.util.AttributeSet)
androidx.core.view.ViewCompat$Api26Impl: void addKeyboardNavigationClusters(android.view.View,java.util.Collection,int)
me.carda.awesome_notifications.core.managers.SharedManager: SharedManager(me.carda.awesome_notifications.core.utils.StringUtils,java.lang.String,java.lang.Class,java.lang.String)
me.carda.awesome_notifications.core.utils.ListUtils: boolean listHasDuplicates(java.util.List)
me.carda.awesome_notifications.core.threads.NotificationForegroundSender: me.carda.awesome_notifications.core.models.NotificationModel doInBackground()
androidx.recyclerview.widget.RecyclerView: void setScrollState(int)
androidx.appcompat.widget.LinearLayoutCompat: void setShowDividers(int)
androidx.appcompat.widget.Toolbar: int getContentInsetStartWithNavigation()
me.carda.awesome_notifications.DartBackgroundService: DartBackgroundService()
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver: void notifyActionEvent(java.lang.String,me.carda.awesome_notifications.core.models.returnedData.ActionReceived)
androidx.core.app.NotificationCompatBuilder$Api29Impl: android.app.Notification$Builder setBubbleMetadata(android.app.Notification$Builder,android.app.Notification$BubbleMetadata)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void attachToGLContext(int)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.util.Map getRowsStartingWith(android.content.Context,java.lang.String,java.lang.String,java.lang.String,me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB$iGetRow)
androidx.core.app.NotificationManagerCompat$Api24Impl: int getImportance(android.app.NotificationManager)
me.carda.awesome_notifications.core.AwesomeNotifications: boolean isNotificationActiveOnStatusBar(int)
com.google.gson.internal.sql.SqlTimeTypeAdapter$1: SqlTimeTypeAdapter$1()
me.carda.awesome_notifications.core.AwesomeNotifications: void attachAsMainInstance(me.carda.awesome_notifications.core.listeners.AwesomeEventListener)
com.google.android.material.chip.Chip: void setCloseIconResource(int)
androidx.core.view.ViewConfigurationCompat$Api26Impl: float getScaledVerticalScrollFactor(android.view.ViewConfiguration)
me.carda.awesome_notifications.core.utils.CronUtils: java.util.Calendar applyToleranceDate(java.util.Calendar)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VPathRenderer: float getAlpha()
com.google.android.material.chip.Chip: void setLines(int)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void AttachAwesomeNotificationsPlugin(android.content.Context,io.flutter.plugin.common.MethodChannel)
android.support.v4.media.MediaDescriptionCompat$Api21Impl: void setIconUri(android.media.MediaDescription$Builder,android.net.Uri)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View access$400(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
com.google.android.material.appbar.AppBarLayout$Behavior: AppBarLayout$Behavior()
androidx.appcompat.widget.AppCompatTextView: androidx.appcompat.widget.AppCompatTextView$SuperCaller getSuperCaller()
androidx.core.view.WindowInsetsCompat$BuilderImpl: void setTappableElementInsets(androidx.core.graphics.Insets)
me.carda.awesome_notifications.core.models.AbstractModel: java.util.Map getValueOrDefaultStringMap(java.util.Map,java.lang.String,java.util.Map)
androidx.transition.ViewUtilsApi19$Api29Impl: float getTransitionAlpha(android.view.View)
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind valueOf(java.lang.String)
me.carda.awesome_notifications.core.models.NotificationMessageModel: me.carda.awesome_notifications.core.models.NotificationButtonModel fromJson(java.lang.String)
me.carda.awesome_notifications.core.threads.NotificationSender: me.carda.awesome_notifications.core.models.returnedData.NotificationReceived onPostExecute(me.carda.awesome_notifications.core.models.returnedData.NotificationReceived)
com.google.android.material.textfield.TextInputLayout: android.content.res.ColorStateList getCursorErrorColor()
androidx.activity.OnBackPressedDispatcher$Api33Impl: void unregisterOnBackInvokedCallback(java.lang.Object,java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: void deferredComponentInstallFailure(int,java.lang.String,boolean)
me.carda.awesome_notifications.core.listeners.AwesomeNotificationEventListener: void onNewNotificationReceived(java.lang.String,me.carda.awesome_notifications.core.models.returnedData.NotificationReceived)
me.carda.awesome_notifications.core.AwesomeNotifications: java.lang.Object areNotificationsGloballyAllowed()
me.carda.awesome_notifications.core.threads.NotificationScheduler: void _removeAllFromAlarm(android.content.Context,java.util.List)
androidx.core.app.NotificationCompatBuilder$Api29Impl: android.app.Notification$Builder setLocusId(android.app.Notification$Builder,java.lang.Object)
com.google.gson.stream.JsonWriter: void newline()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List getFinalClippingPaths()
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: float getTrimPathOffset()
androidx.appcompat.widget.Toolbar: android.graphics.drawable.Drawable getLogo()
androidx.appcompat.widget.AppCompatImageView: void setImageLevel(int)
androidx.appcompat.widget.AppCompatTextHelper$Api28Impl: android.graphics.Typeface create(android.graphics.Typeface,int,boolean)
androidx.media.AudioAttributesImplApi26Parcelizer: AudioAttributesImplApi26Parcelizer()
me.carda.awesome_notifications.core.managers.PermissionManager: boolean isCriticalAlertsGloballyAllowed(android.content.Context)
io.flutter.embedding.engine.FlutterJNI: void ensureAttachedToNative()
androidx.core.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel)
me.carda.awesome_notifications.core.managers.LifeCycleManager: void stopListeners()
androidx.constraintlayout.widget.Guideline: void setGuidelinePercent(float)
androidx.core.view.WindowInsetsCompat$Impl28: boolean equals(java.lang.Object)
me.carda.awesome_notifications.core.enumerators.MediaSource: MediaSource(java.lang.String,int,java.lang.String)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: int getStrokeColor()
androidx.window.extensions.core.util.function.Consumer: void accept(java.lang.Object)
me.carda.awesome_notifications.core.managers.StatusBarManager: boolean dismissNotificationsByGroupKey(android.content.Context,java.lang.String)
androidx.appcompat.widget.AppCompatImageView: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
me.carda.awesome_notifications.core.managers.PermissionManager: me.carda.awesome_notifications.core.managers.PermissionManager getInstance()
com.google.android.material.textfield.TextInputLayout: void setErrorContentDescription(java.lang.CharSequence)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: SQLitePrimitivesDB(android.content.Context,java.lang.String)
android.support.v4.media.AudioAttributesCompatParcelizer: AudioAttributesCompatParcelizer()
me.carda.awesome_notifications.core.AwesomeNotifications: void cancelAllSchedules()
com.google.gson.stream.JsonReader: void close()
me.carda.awesome_notifications.core.enumerators.ForegroundServiceType: me.carda.awesome_notifications.core.enumerators.ForegroundServiceType valueOf(java.lang.String)
me.carda.awesome_notifications.core.threads.NotificationThread: boolean itMustRunOnBackgroundThread(me.carda.awesome_notifications.core.models.NotificationModel)
me.carda.awesome_notifications.core.managers.CancellationManager: boolean cancelNotification(android.content.Context,java.lang.Integer)
com.google.android.material.chip.Chip: com.google.android.material.animation.MotionSpec getHideMotionSpec()
androidx.core.view.ViewCompat$Api21Impl: void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VFullPath: void setTrimPathStart(float)
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType[] values()
com.google.firestore.v1.Write$OperationCase: com.google.firestore.v1.Write$OperationCase[] values()
com.google.common.util.concurrent.DirectExecutor: com.google.common.util.concurrent.DirectExecutor valueOf(java.lang.String)
com.google.gson.internal.bind.TypeAdapters$21: TypeAdapters$21()
androidx.constraintlayout.helper.widget.Flow: void setVerticalGap(int)
io.grpc.util.SecretRoundRobinLoadBalancerProvider$Provider: int getPriority()
me.carda.awesome_notifications.core.utils.SerializableUtils: java.lang.Object serializeCalendar(java.util.Calendar)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api33Impl: android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo getExtraRenderingInfo(android.view.accessibility.AccessibilityNodeInfo)
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setTicker(me.carda.awesome_notifications.core.models.NotificationModel,androidx.core.app.NotificationCompat$Builder)
androidx.core.app.NotificationCompat$BigPictureStyle$Api31Impl: void setContentDescription(android.app.Notification$BigPictureStyle,java.lang.CharSequence)
me.carda.awesome_notifications.core.managers.SharedManager: java.util.List getAllObjects(android.content.Context,java.lang.String)
me.carda.awesome_notifications.core.managers.DefaultsManager: java.lang.Long getDisplayedCallbackDispatcher(android.content.Context)
androidx.core.widget.NestedScrollView: void setNestedScrollingEnabled(boolean)
com.google.android.material.textfield.TextInputLayout: void setCounterTextAppearance(int)
com.google.firebase.firestore.core.ViewSnapshot$SyncState: com.google.firebase.firestore.core.ViewSnapshot$SyncState valueOf(java.lang.String)
androidx.appcompat.widget.Toolbar: int getContentInsetLeft()
com.google.firestore.admin.v1.Index$QueryScope: com.google.firestore.admin.v1.Index$QueryScope[] values()
androidx.appcompat.widget.AppCompatImageView: void setSupportImageTintList(android.content.res.ColorStateList)
me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle: me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle getSafeEnum(java.lang.String)
androidx.recyclerview.widget.RecyclerView: RecyclerView(android.content.Context,android.util.AttributeSet)
androidx.appcompat.widget.Toolbar: int getTitleMarginBottom()
me.carda.awesome_notifications.core.models.NotificationModel: me.carda.awesome_notifications.core.models.NotificationModel fromMap(java.util.Map)
android.support.v4.media.MediaDescriptionCompat$Api23Impl: android.net.Uri getMediaUri(android.media.MediaDescription)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.lang.Boolean lambda$getAllBooleanValues$2(android.database.Cursor,int)
com.google.firestore.v1.StructuredQuery$Filter$FilterTypeCase: com.google.firestore.v1.StructuredQuery$Filter$FilterTypeCase valueOf(java.lang.String)
androidx.appcompat.widget.LinearLayoutCompat: int getBaseline()
androidx.core.app.JobIntentService: androidx.core.app.JobIntentService$GenericWorkItem dequeueWork()
androidx.transition.FragmentTransitionSupport: FragmentTransitionSupport()
me.carda.awesome_notifications.core.utils.SerializableUtils: me.carda.awesome_notifications.core.utils.SerializableUtils getInstance()
com.google.gson.internal.bind.TypeAdapters$28: TypeAdapters$28()
com.google.android.material.textfield.TextInputLayout: int getHintCurrentCollapsedTextColor()
androidx.constraintlayout.widget.ConstraintLayout: void setConstraintSet(androidx.constraintlayout.widget.ConstraintSet)
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedPreScroll(android.view.View,int,int,int[],int[])
com.google.firebase.firestore.remote.WatchChangeAggregator$BloomFilterApplicationStatus: com.google.firebase.firestore.remote.WatchChangeAggregator$BloomFilterApplicationStatus[] values()
me.carda.awesome_notifications.core.exceptions.ExceptionFactory: me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException createNewAwesomeException(java.lang.String,java.lang.String,java.lang.String,java.lang.Exception)
me.carda.awesome_notifications.core.managers.ChannelManager: android.app.NotificationChannel getAndroidChannel(android.content.Context,java.lang.String,java.lang.String)
me.carda.awesome_notifications.core.managers.LostEventsManager: java.util.Map recoverNotificationActions(android.content.Context)
com.google.android.material.textfield.TextInputLayout: void setPlaceholderText(java.lang.CharSequence)
com.google.android.material.textfield.TextInputLayout: int getMinEms()
com.google.android.material.textfield.TextInputLayout: int getErrorCurrentTextColors()
com.google.firebase.firestore.core.ViewSnapshot$SyncState: com.google.firebase.firestore.core.ViewSnapshot$SyncState[] values()
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setBadge(android.content.Context,me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.models.NotificationChannelModel,androidx.core.app.NotificationCompat$Builder)
androidx.core.app.NotificationCompatBuilder$Api24Impl: android.app.Notification$Builder setCustomBigContentView(android.app.Notification$Builder,android.widget.RemoteViews)
io.grpc.internal.DnsNameResolverProvider: int priority()
me.carda.awesome_notifications.core.services.BackgroundService: java.lang.Long getActionCallbackDispatcher(android.content.Context)
com.google.android.material.textfield.TextInputLayout: com.google.android.material.shape.MaterialShapeDrawable getBoxBackground()
androidx.constraintlayout.widget.ConstraintLayout: void setOnConstraintsChanged(androidx.constraintlayout.widget.ConstraintsChangedListener)
me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle: me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle[] values()
com.google.android.material.chip.Chip: void setChipStartPaddingResource(int)
me.carda.awesome_notifications.core.models.NotificationScheduleModel: me.carda.awesome_notifications.core.models.NotificationScheduleModel fromMap(java.util.Map)
androidx.appcompat.widget.MenuPopupWindow$Api23Impl: void setEnterTransition(android.widget.PopupWindow,android.transition.Transition)
me.carda.awesome_notifications.core.managers.RepositoryManager: java.lang.Boolean removeAll(android.content.Context,java.lang.String)
me.carda.awesome_notifications.core.AwesomeNotifications: java.util.List listAllPendingSchedules()
androidx.recyclerview.widget.RecyclerView: int getItemDecorationCount()
io.grpc.okhttp.NegotiationType: io.grpc.okhttp.NegotiationType[] values()
com.google.android.material.chip.Chip: float getTextStartPadding()
me.carda.awesome_notifications.core.threads.NotificationScheduler: void schedule(android.content.Context,me.carda.awesome_notifications.core.enumerators.NotificationSource,me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.completion_handlers.NotificationThreadCompletionHandler)
androidx.core.view.ViewCompat$Api21Impl: void setZ(android.view.View,float)
androidx.core.view.WindowInsetsCompat$Impl20: void setRootWindowInsets(androidx.core.view.WindowInsetsCompat)
io.flutter.embedding.engine.FlutterJNI: java.lang.String getVMServiceUri()
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api30Impl: void setStateDescription(android.view.accessibility.AccessibilityNodeInfo,java.lang.CharSequence)
me.carda.awesome_notifications.core.models.NotificationIntervalModel: java.util.Calendar getNextValidDate(java.util.Calendar)
io.flutter.embedding.engine.FlutterJNI: boolean nativeGetIsSoftwareRenderingEnabled()
androidx.core.graphics.drawable.DrawableCompat$Api23Impl: boolean setLayoutDirection(android.graphics.drawable.Drawable,int)
com.google.protobuf.FieldType$Collection: com.google.protobuf.FieldType$Collection[] values()
android.support.v4.media.session.PlaybackStateCompat$Api21Impl: long getActions(android.media.session.PlaybackState)
me.carda.awesome_notifications.core.models.NotificationModel: void validate(android.content.Context)
androidx.lifecycle.LifecycleDispatcher$DispatcherActivityCallback: void onActivityCreated(android.app.Activity,android.os.Bundle)
com.google.android.gms.common.api.GoogleApiActivity: GoogleApiActivity()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View$OnApplyWindowInsetsListener getInsetsListener()
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodCancelSchedule(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
me.carda.awesome_notifications.core.models.NotificationLocalizationModel: java.lang.String toJson()
androidx.appcompat.widget.ActionMenuView: ActionMenuView(android.content.Context,android.util.AttributeSet)
androidx.appcompat.widget.AppCompatReceiveContentHelper$OnDropApi24Impl: boolean onDropForView(android.view.DragEvent,android.view.View,android.app.Activity)
me.carda.awesome_notifications.core.models.returnedData.NotificationReceived: NotificationReceived()
androidx.appcompat.widget.MenuPopupWindow$MenuDropDownListView: void setHoverListener(androidx.appcompat.widget.MenuItemHoverListener)
me.carda.awesome_notifications.core.models.AbstractModel: me.carda.awesome_notifications.core.enumerators.LogLevel getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,me.carda.awesome_notifications.core.enumerators.LogLevel)
com.google.firestore.admin.v1.Index$QueryScope: com.google.firestore.admin.v1.Index$QueryScope valueOf(java.lang.String)
me.carda.awesome_notifications.core.AwesomeNotifications: void showDnDGlobalOverridingPage(me.carda.awesome_notifications.core.completion_handlers.PermissionCompletionHandler)
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Builder setGroup(android.app.Notification$Builder,java.lang.String)
androidx.core.view.ViewCompat$Api26Impl: void setTooltipText(android.view.View,java.lang.CharSequence)
com.google.gson.stream.JsonReader: void skipUnquotedValue()
me.carda.awesome_notifications.core.managers.StatusBarManager: androidx.core.app.NotificationManagerCompat getAdaptedOldNotificationManager(android.content.Context)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void cleanup()
me.carda.awesome_notifications.core.models.NotificationChannelGroupModel: me.carda.awesome_notifications.core.models.AbstractModel fromMap(java.util.Map)
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityFeaturesInNative(int)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: void setAllIntValues(android.content.Context,java.lang.String,java.util.Map)
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons valueOf(java.lang.String)
me.carda.awesome_notifications.core.externalLibs.CronExpression: boolean isLeapYear(int)
me.carda.awesome_notifications.core.utils.MediaUtils: java.lang.Boolean matchMediaType(java.lang.String,java.lang.String)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: void removeAllLong(android.content.Context,java.lang.String)
androidx.appcompat.widget.MenuPopupWindow$MenuDropDownListView: void setSelector(android.graphics.drawable.Drawable)
androidx.fragment.app.DefaultSpecialEffectsController$Api26Impl: void reverse(android.animation.AnimatorSet)
me.carda.awesome_notifications.core.utils.CalendarUtils: java.util.Calendar calendarFromString(java.lang.String,java.util.TimeZone)
androidx.vectordrawable.graphics.drawable.VectorDrawableCompat$VGroup: float getScaleX()
com.google.android.material.internal.NavigationMenuItemView: androidx.appcompat.view.menu.MenuItemImpl getItemData()
androidx.core.app.NotificationCompatBuilder$Api20Impl: android.app.Notification$Builder setGroupSummary(android.app.Notification$Builder,boolean)
me.carda.awesome_notifications.core.threads.NotificationScheduler: void cancelScheduleById(android.content.Context,java.lang.Integer)
com.google.android.material.textfield.TextInputLayout: void setDefaultHintTextColor(android.content.res.ColorStateList)
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: void setBackgroundDrawable(android.graphics.drawable.Drawable)
io.flutter.view.TextureRegistry$ImageTextureEntry: void release()
me.carda.awesome_notifications.core.managers.LifeCycleManager: me.carda.awesome_notifications.core.managers.LifeCycleManager subscribe(me.carda.awesome_notifications.core.listeners.AwesomeLifeCycleEventListener)
kotlinx.coroutines.android.AndroidExceptionPreHandler: void handleException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)
com.google.android.material.chip.Chip: void setCloseIcon(android.graphics.drawable.Drawable)
androidx.core.view.ViewCompat$Api21Impl: java.lang.String getTransitionName(android.view.View)
androidx.appcompat.resources.Compatibility$Api21Impl: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)
com.google.android.material.textfield.TextInputLayout: void setHintTextAppearance(int)
android.support.v4.media.RatingCompat$Api19Impl: float getPercentRating(android.media.Rating)
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: void lambda$didReinitializeFirebaseCore$1(com.google.android.gms.tasks.TaskCompletionSource)
com.google.android.material.button.MaterialButton: void setIcon(android.graphics.drawable.Drawable)
com.google.android.material.textfield.TextInputLayout: void setEnabled(boolean)
com.google.android.material.search.SearchView$Behavior: SearchView$Behavior(android.content.Context,android.util.AttributeSet)
me.carda.awesome_notifications.core.enumerators.NotificationPlayState: int toMap()
io.flutter.plugin.platform.SingleViewPresentation: SingleViewPresentation(android.content.Context,android.view.Display,io.flutter.plugin.platform.PlatformView,io.flutter.plugin.platform.AccessibilityEventsDelegate,int,android.view.View$OnFocusChangeListener)
me.carda.awesome_notifications.core.models.NotificationScheduleModel: me.carda.awesome_notifications.core.models.NotificationScheduleModel getScheduleModelFromMap(java.util.Map)
me.carda.awesome_notifications.core.builders.NotificationBuilder: void createActionButtons(android.content.Context,android.content.Intent,me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.models.NotificationChannelModel,androidx.core.app.NotificationCompat$Builder)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: java.util.Map getAll(android.content.Context,java.lang.String,java.lang.String,me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB$iGetAll)
androidx.appcompat.widget.Toolbar: void setNavigationContentDescription(int)
androidx.recyclerview.widget.StaggeredGridLayoutManager: StaggeredGridLayoutManager(android.content.Context,android.util.AttributeSet,int,int)
me.carda.awesome_notifications.DartBackgroundExecutor: boolean runBackgroundAction(android.content.Context,android.content.Intent)
me.carda.awesome_notifications.core.models.NotificationChannelModel: java.util.Map toMap()
androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getTappableElementInsets()
me.carda.awesome_notifications.DartBackgroundService: void initializeExternalPlugins(android.content.Context)
com.google.android.material.chip.Chip: void setMinLines(int)
me.carda.awesome_notifications.core.enumerators.NotificationLayout: me.carda.awesome_notifications.core.enumerators.NotificationLayout getSafeEnum(java.lang.String)
com.google.android.material.textfield.TextInputLayout: void setCounterOverflowTextColor(android.content.res.ColorStateList)
androidx.appcompat.widget.Toolbar: int getCurrentContentInsetStart()
androidx.coordinatorlayout.widget.CoordinatorLayout: int getSuggestedMinimumHeight()
io.grpc.util.OutlierDetectionLoadBalancerProvider: OutlierDetectionLoadBalancerProvider()
me.carda.awesome_notifications.core.managers.DisplayedManager: me.carda.awesome_notifications.core.managers.DisplayedManager getInstance()
androidx.window.area.reflectionguard.ExtensionWindowAreaPresentationRequirements: void setPresentationView(android.view.View)
androidx.window.area.reflectionguard.WindowAreaComponentApi3Requirements: androidx.window.extensions.area.ExtensionWindowAreaPresentation getRearDisplayPresentation()
com.google.android.gms.common.api.internal.zzb: zzb()
com.google.android.material.chip.Chip: void setChipStartPadding(float)
androidx.activity.Api34Impl: float touchY(android.window.BackEvent)
me.carda.awesome_notifications.core.managers.PermissionManager: void showChannelConfigPage(android.content.Context,java.lang.String,me.carda.awesome_notifications.core.completion_handlers.PermissionCompletionHandler)
io.grpc.okhttp.internal.TlsVersion: io.grpc.okhttp.internal.TlsVersion valueOf(java.lang.String)
androidx.appcompat.widget.ButtonBarLayout: ButtonBarLayout(android.content.Context,android.util.AttributeSet)
androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetLeft(android.view.DisplayCutout)
me.carda.awesome_notifications.DartDismissedNotificationReceiver: void initializeExternalPlugins(android.content.Context)
io.flutter.embedding.engine.FlutterJNI: void onPreEngineRestart()
me.carda.awesome_notifications.core.AwesomeNotifications: boolean setLocalization(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void nativeLoadDartDeferredLibrary(long,int,java.lang.String[])
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State valueOf(java.lang.String)
androidx.core.view.WindowInsetsCompat$Impl21: WindowInsetsCompat$Impl21(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl21)
io.flutter.embedding.engine.FlutterJNI: void setViewportMetrics(float,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int[],int[],int[])
androidx.appcompat.widget.LinearLayoutCompat: void setMeasureWithLargestChildEnabled(boolean)
me.carda.awesome_notifications.core.models.NotificationContentModel: void validateRequiredImages(android.content.Context)
androidx.core.view.DisplayCutoutCompat$Api28Impl: android.view.DisplayCutout createDisplayCutout(android.graphics.Rect,java.util.List)
me.carda.awesome_notifications.R: R()
android.support.v4.media.MediaDescriptionCompat$Api23Impl: void setMediaUri(android.media.MediaDescription$Builder,android.net.Uri)
com.google.android.material.button.MaterialButton: void setElevation(float)
me.carda.awesome_notifications.core.managers.PermissionManager: void showNotificationConfigPage(android.content.Context,me.carda.awesome_notifications.core.completion_handlers.PermissionCompletionHandler)
androidx.profileinstaller.ProfileVerifier$Api33Impl: android.content.pm.PackageInfo getPackageInfo(android.content.pm.PackageManager,android.content.Context)
androidx.appcompat.widget.Toolbar: void setSubtitleTextColor(int)
com.google.android.material.button.MaterialButton: void setBackgroundColor(int)
androidx.core.app.NotificationCompat$MessagingStyle$Message$Api28Impl: android.app.Notification$MessagingStyle$Message createMessage(java.lang.CharSequence,long,android.app.Person)
me.carda.awesome_notifications.core.models.NotificationIntervalModel: me.carda.awesome_notifications.core.models.NotificationScheduleModel fromMap(java.util.Map)
io.flutter.embedding.android.FlutterSurfaceView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
android.support.v4.media.session.PlaybackStateCompat$Api21Impl: java.util.List getCustomActions(android.media.session.PlaybackState)
com.google.firebase.firestore.proto.Target$TargetTypeCase: com.google.firebase.firestore.proto.Target$TargetTypeCase valueOf(java.lang.String)
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory[] values()
androidx.appcompat.widget.Toolbar: void setNavigationOnClickListener(android.view.View$OnClickListener)
com.google.android.material.internal.TouchObserverFrameLayout: void setOnTouchListener(android.view.View$OnTouchListener)
me.carda.awesome_notifications.core.models.NotificationMessageModel: void validate(android.content.Context)
me.carda.awesome_notifications.core.models.returnedData.NotificationReceived: me.carda.awesome_notifications.core.models.AbstractModel fromJson(java.lang.String)
com.google.android.material.button.MaterialButton: void setRippleColor(android.content.res.ColorStateList)
androidx.appcompat.widget.AppCompatTextHelper$Api21Impl: java.util.Locale forLanguageTag(java.lang.String)
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature valueOf(java.lang.String)
com.google.common.collect.Maps$EntryFunction: com.google.common.collect.Maps$EntryFunction valueOf(java.lang.String)
androidx.media.AudioAttributesImplApi21Parcelizer: void write(androidx.media.AudioAttributesImplApi21,androidx.versionedparcelable.VersionedParcel)
com.google.android.material.textfield.TextInputLayout: int getBaseline()
com.google.android.material.textfield.TextInputLayout: void setMinEms(int)
com.google.firebase.firestore.model.FieldIndex$Segment$Kind: com.google.firebase.firestore.model.FieldIndex$Segment$Kind valueOf(java.lang.String)
me.carda.awesome_notifications.core.models.NotificationCrontabModel: NotificationCrontabModel()
androidx.appcompat.widget.Toolbar: android.content.Context getPopupContext()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPaused(android.app.Activity)
me.carda.awesome_notifications.core.managers.ScheduleManager: java.lang.Boolean saveSchedule(android.content.Context,me.carda.awesome_notifications.core.models.NotificationModel)
me.carda.awesome_notifications.core.enumerators.GroupSort: me.carda.awesome_notifications.core.enumerators.GroupSort getSafeEnum(java.lang.String)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: int getInt(android.content.Context,java.lang.String,java.lang.String,int)
androidx.constraintlayout.solver.widgets.ConstraintWidget$DimensionBehaviour: androidx.constraintlayout.solver.widgets.ConstraintWidget$DimensionBehaviour[] values()
androidx.appcompat.widget.Toolbar: void setSubtitleTextColor(android.content.res.ColorStateList)
me.carda.awesome_notifications.core.AwesomeNotifications: boolean cancelNotificationsByGroupKey(java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean handlesCropAndRotation()
androidx.core.view.ViewConfigurationCompat$Api26Impl: float getScaledHorizontalScrollFactor(android.view.ViewConfiguration)
me.carda.awesome_notifications.core.models.NotificationContentModel: void processRetroCompatibility(java.util.Map)
io.flutter.embedding.engine.FlutterJNI: io.flutter.view.FlutterCallbackInformation nativeLookupCallbackInformation(long)
com.google.gson.stream.JsonReader: boolean skipTo(java.lang.String)
me.carda.awesome_notifications.core.managers.StatusBarManager: boolean isIndexCollapsedLayout(java.lang.String)
com.google.gson.stream.JsonReader: void beginArray()
androidx.recyclerview.widget.RecyclerView: int getScrollState()
com.google.android.material.button.MaterialButton: android.content.res.ColorStateList getRippleColor()
com.google.android.material.chip.Chip: void setChecked(boolean)
androidx.appcompat.view.menu.ActionMenuItemView: void setPopupCallback(androidx.appcompat.view.menu.ActionMenuItemView$PopupCallback)
me.carda.awesome_notifications.core.models.NotificationIntervalModel: NotificationIntervalModel()
androidx.appcompat.view.menu.ActionMenuItemView: void setIcon(android.graphics.drawable.Drawable)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void registerIn(android.app.Activity)
me.carda.awesome_notifications.core.builders.NotificationBuilder: void setLayout(android.content.Context,android.content.Intent,me.carda.awesome_notifications.core.models.NotificationModel,me.carda.awesome_notifications.core.models.NotificationChannelModel,androidx.core.app.NotificationCompat$Builder)
androidx.core.view.WindowInsetsCompat$Impl20: void copyWindowDataInto(androidx.core.view.WindowInsetsCompat)
io.flutter.plugins.firebase.firestore.FlutterFirebaseFirestorePlugin: FlutterFirebaseFirestorePlugin()
io.flutter.plugins.firebase.core.FlutterFirebasePluginRegistry: void lambda$getPluginConstantsForFirebaseApp$0(com.google.firebase.FirebaseApp,com.google.android.gms.tasks.TaskCompletionSource)
io.grpc.ConnectivityState: io.grpc.ConnectivityState valueOf(java.lang.String)
com.google.gson.stream.JsonReader: boolean isLenient()
androidx.constraintlayout.helper.widget.Flow: void setPaddingBottom(int)
com.google.android.material.appbar.AppBarLayout$BaseBehavior: AppBarLayout$BaseBehavior(android.content.Context,android.util.AttributeSet)
me.carda.awesome_notifications.core.threads.NotificationScheduler: void whenComplete(java.util.Calendar,me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException)
com.google.android.material.button.MaterialButton: android.content.res.ColorStateList getStrokeColor()
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: void setBackgroundTintMode(android.graphics.PorterDuff$Mode)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setEmojiCompatEnabled(boolean)
com.google.gson.stream.JsonWriter: void setSerializeNulls(boolean)
androidx.core.app.NotificationManagerCompat$Api24Impl: boolean areNotificationsEnabled(android.app.NotificationManager)
androidx.window.area.reflectionguard.ExtensionWindowAreaPresentationRequirements: android.content.Context getPresentationContext()
me.carda.awesome_notifications.core.utils.TimeZoneUtils: me.carda.awesome_notifications.core.utils.TimeZoneUtils getInstance()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: FlutterRenderer$ImageReaderSurfaceProducer(io.flutter.embedding.engine.renderer.FlutterRenderer,long)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: boolean setString(android.content.Context,java.lang.String,java.lang.String,java.lang.String)
me.carda.awesome_notifications.core.managers.EventManager: EventManager()
androidx.core.graphics.drawable.IconCompat: IconCompat()
me.carda.awesome_notifications.core.managers.DisplayedManager: boolean commitChanges(android.content.Context)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api33Impl: java.lang.String getUniqueId(android.view.accessibility.AccessibilityNodeInfo)
androidx.appcompat.widget.FitWindowsFrameLayout: void setOnFitSystemWindowsListener(androidx.appcompat.widget.FitWindowsViewGroup$OnFitSystemWindowsListener)
me.carda.awesome_notifications.core.decoders.BitmapResourceDecoder: byte[] onPostExecute(byte[])
com.google.gson.Gson$3: Gson$3()
io.flutter.embedding.engine.FlutterJNI: void loadDartDeferredLibrary(int,java.lang.String[])
me.carda.awesome_notifications.core.builders.NotificationBuilder: me.carda.awesome_notifications.core.models.returnedData.ActionReceived buildNotificationActionFromIntent(android.content.Context,android.content.Intent,me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle)
androidx.appcompat.widget.Toolbar: void setTitleTextColor(android.content.res.ColorStateList)
me.carda.awesome_notifications.core.managers.LifeCycleManager: LifeCycleManager()
me.carda.awesome_notifications.core.managers.ChannelManager: me.carda.awesome_notifications.core.managers.ChannelManager saveChannel(android.content.Context,me.carda.awesome_notifications.core.models.NotificationChannelModel,java.lang.Boolean,java.lang.Boolean)
com.google.android.material.textfield.TextInputLayout: void setHelperTextColor(android.content.res.ColorStateList)
androidx.appcompat.widget.AppCompatImageView: void setImageDrawable(android.graphics.drawable.Drawable)
me.carda.awesome_notifications.core.models.AbstractModel: me.carda.awesome_notifications.core.enumerators.ForegroundStartMode getValueOrDefault(java.util.Map,java.lang.String,java.lang.Class,me.carda.awesome_notifications.core.enumerators.ForegroundStartMode)
com.google.gson.internal.bind.SerializationDelegatingTypeAdapter: SerializationDelegatingTypeAdapter()
com.google.android.material.textfield.TextInputLayout: void setSuffixTextColor(android.content.res.ColorStateList)
com.google.android.material.button.MaterialButton: void setShouldDrawSurfaceColorStroke(boolean)
androidx.appcompat.widget.DropDownListView$Api21Impl: void drawableHotspotChanged(android.view.View,float,float)
com.google.android.material.button.MaterialButton: android.graphics.PorterDuff$Mode getSupportBackgroundTintMode()
io.flutter.embedding.engine.FlutterJNI: void nativeScheduleFrame(long)
androidx.recyclerview.widget.RecyclerView: boolean getClipToPadding()
com.google.protobuf.GeneratedMessageLite$MethodToInvoke: com.google.protobuf.GeneratedMessageLite$MethodToInvoke[] values()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: android.view.Surface getSurface()
com.google.android.material.button.MaterialButton: void setShapeAppearanceModel(com.google.android.material.shape.ShapeAppearanceModel)
me.carda.awesome_notifications.core.threads.NotificationSender: void whenComplete(java.lang.Object,me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException)
me.carda.awesome_notifications.core.AwesomeNotifications: void showPreciseAlarmPage(me.carda.awesome_notifications.core.completion_handlers.PermissionCompletionHandler)
com.google.android.material.textfield.TextInputLayout: android.content.res.ColorStateList getCounterTextColor()
me.carda.awesome_notifications.core.BuildConfig: BuildConfig()
com.google.android.material.chip.Chip: android.text.TextUtils$TruncateAt getEllipsize()
androidx.core.view.ViewCompat$Api30Impl: java.lang.CharSequence getStateDescription(android.view.View)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: boolean removeAll(android.content.Context,java.lang.String,java.lang.String)
androidx.appcompat.view.menu.ListMenuItemView: void setTitle(java.lang.CharSequence)
androidx.core.widget.PopupWindowCompat$Api23Impl: boolean getOverlapAnchor(android.widget.PopupWindow)
androidx.core.app.NotificationCompatBuilder$Api23Impl: android.app.Notification$Builder setSmallIcon(android.app.Notification$Builder,java.lang.Object)
com.google.android.material.textfield.TextInputLayout: void setHint(java.lang.CharSequence)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodSetChannel(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.gson.stream.JsonReader: void skipToEndOfLine()
com.google.android.material.textfield.TextInputLayout: int getBoxStrokeWidthFocused()
com.google.android.material.textfield.TextInputLayout: void setPasswordVisibilityToggleDrawable(int)
me.carda.awesome_notifications.DartBackgroundExecutor: void access$200(me.carda.awesome_notifications.DartBackgroundExecutor)
me.carda.awesome_notifications.core.managers.LifeCycleManager: void updateAppLifeCycle(me.carda.awesome_notifications.core.enumerators.NotificationLifeCycle)
com.google.gson.internal.bind.TypeAdapters$26: TypeAdapters$26()
me.carda.awesome_notifications.core.completion_handlers.PermissionCompletionHandler: void handle(java.util.List)
com.google.android.material.button.MaterialButton: int getInsetTop()
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityStarted(android.app.Activity)
com.google.android.material.floatingactionbutton.FloatingActionButton$BaseBehavior: FloatingActionButton$BaseBehavior()
com.google.android.material.ripple.RippleUtils$RippleUtilsLollipop: android.graphics.drawable.Drawable createOvalRipple(android.content.Context,int)
me.carda.awesome_notifications.core.managers.CreatedManager: boolean removeCreated(android.content.Context,java.lang.Integer,java.util.Calendar)
me.carda.awesome_notifications.core.AwesomeNotifications: void stopForegroundService(java.lang.Integer)
io.flutter.embedding.engine.FlutterJNI: void removeEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener)
com.google.android.material.snackbar.Snackbar$SnackbarLayout: void setBackgroundDrawable(android.graphics.drawable.Drawable)
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag valueOf(java.lang.String)
androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.view.WindowInsetsCompat inset(int,int,int,int)
me.carda.awesome_notifications.core.builders.NotificationBuilder: android.content.res.Resources getLocalizedResources(android.content.Context,java.lang.String)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void onEnd(android.view.WindowInsetsAnimation)
androidx.appcompat.widget.Toolbar: android.view.Menu getMenu()
com.google.android.material.textfield.TextInputLayout: void setCounterMaxLength(int)
androidx.appcompat.widget.AppCompatButton: int getAutoSizeMaxTextSize()
io.flutter.view.AccessibilityViewEmbedder: AccessibilityViewEmbedder(android.view.View,int)
com.google.android.material.chip.Chip: android.graphics.Rect getCloseIconTouchBoundsInt()
me.leolin.shortcutbadger.impl.SonyHomeBadger: SonyHomeBadger()
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchEmptyPlatformMessage(long,java.lang.String,int)
androidx.core.content.res.ResourcesCompat$Api21Impl: android.graphics.drawable.Drawable getDrawable(android.content.res.Resources,int,android.content.res.Resources$Theme)
me.carda.awesome_notifications.core.utils.TimeZoneUtils: TimeZoneUtils()
me.carda.awesome_notifications.core.logs.Logger: Logger()
me.carda.awesome_notifications.core.background.BackgroundExecutor: BackgroundExecutor()
androidx.core.graphics.drawable.IconCompat$Api28Impl: int getType(java.lang.Object)
androidx.appcompat.view.menu.ListMenuItemView: void setIcon(android.graphics.drawable.Drawable)
com.google.firebase.firestore.core.Query$LimitType: com.google.firebase.firestore.core.Query$LimitType[] values()
androidx.fragment.app.SpecialEffectsController$Operation$State: androidx.fragment.app.SpecialEffectsController$Operation$State valueOf(java.lang.String)
me.carda.awesome_notifications.core.externalLibs.CronExpression: java.util.Date getTimeAfter(java.util.Date)
androidx.core.view.WindowInsetsCompat$BuilderImpl29: WindowInsetsCompat$BuilderImpl29(androidx.core.view.WindowInsetsCompat)
androidx.constraintlayout.widget.ConstraintAttribute$AttributeType: androidx.constraintlayout.widget.ConstraintAttribute$AttributeType[] values()
androidx.appcompat.widget.ActionBarOverlayLayout: void setWindowCallback(android.view.Window$Callback)
com.google.firebase.firestore.core.UserData$Source: com.google.firebase.firestore.core.UserData$Source[] values()
androidx.core.app.JobIntentService: androidx.core.app.JobIntentService$WorkEnqueuer getWorkEnqueuer(android.content.Context,android.content.ComponentName,boolean,int)
androidx.appcompat.widget.ActionBarOverlayLayout: void setIcon(android.graphics.drawable.Drawable)
androidx.core.view.WindowInsetsCompat$Impl29: void setStableInsets(androidx.core.graphics.Insets)
com.google.android.material.textfield.TextInputLayout: void setHintEnabled(boolean)
com.google.android.material.textfield.TextInputLayout: void setMaxWidthResource(int)
me.carda.awesome_notifications.core.AwesomeNotifications: void initialize(java.lang.String,java.util.List,java.util.List,java.lang.Long,boolean)
me.carda.awesome_notifications.core.threads.NotificationForegroundSender: me.carda.awesome_notifications.core.models.NotificationModel showForegroundNotification(android.content.Context,me.carda.awesome_notifications.core.models.NotificationModel)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType valueOf(java.lang.String)
me.carda.awesome_notifications.core.utils.JsonUtils: JsonUtils()
io.flutter.plugin.platform.SingleViewPresentation: void onCreate(android.os.Bundle)
androidx.appcompat.widget.LinearLayoutCompat: void setBaselineAlignedChildIndex(int)
com.google.gson.internal.bind.TypeAdapters$20: TypeAdapters$20()
com.google.android.material.button.MaterialButton: void setRippleColorResource(int)
me.carda.awesome_notifications.core.models.NotificationCalendarModel: void validate(android.content.Context)
androidx.appcompat.widget.AppCompatTextHelper$Api26Impl: int getAutoSizeStepGranularity(android.widget.TextView)
androidx.core.view.ViewCompat$Api31Impl: java.lang.String[] getReceiveContentMimeTypes(android.view.View)
com.google.android.material.textfield.TextInputLayout: void setHelperTextEnabled(boolean)
com.google.firebase.FirebaseCommonKtxRegistrar: java.util.List getComponents()
me.carda.awesome_notifications.core.managers.StatusBarManager: void dismissAllNotifications(android.content.Context)
androidx.appcompat.view.menu.ActionMenuItemView: ActionMenuItemView(android.content.Context,android.util.AttributeSet)
com.google.android.material.chip.Chip: void setSingleLine(boolean)
androidx.appcompat.widget.AppCompatTextView: int getLastBaselineToBottomHeight()
me.carda.awesome_notifications.core.AwesomeNotificationsExtension: AwesomeNotificationsExtension()
me.carda.awesome_notifications.core.models.NotificationButtonModel: me.carda.awesome_notifications.core.models.NotificationButtonModel fromMap(java.util.Map)
me.carda.awesome_notifications.core.AwesomeNotifications: void resetGlobalBadgeCounter()
me.carda.awesome_notifications.core.enumerators.ForegroundStartMode: java.lang.String getSafeName()
com.google.android.material.button.MaterialButtonToggleGroup: void setGeneratedIdIfNeeded(com.google.android.material.button.MaterialButton)
androidx.appcompat.widget.AppCompatEditText: void setSupportCompoundDrawablesTintMode(android.graphics.PorterDuff$Mode)
me.carda.awesome_notifications.core.broadcasters.senders.BroadcastSender: me.carda.awesome_notifications.core.broadcasters.senders.BroadcastSender getInstance()
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature[] values()
com.google.android.material.chip.Chip: android.content.res.ColorStateList getCheckedIconTint()
me.carda.awesome_notifications.core.managers.DismissedManager: boolean saveDismissed(android.content.Context,me.carda.awesome_notifications.core.models.returnedData.ActionReceived)
me.carda.awesome_notifications.core.AwesomeNotifications: boolean cancelSchedulesByGroupKey(java.lang.String)
me.carda.awesome_notifications.core.models.returnedData.ActionReceived: java.util.Map toMap()
me.carda.awesome_notifications.core.models.NotificationChannelModel: me.carda.awesome_notifications.core.models.AbstractModel fromMap(java.util.Map)
me.carda.awesome_notifications.core.models.NotificationButtonModel: java.util.Map toMap()
me.carda.awesome_notifications.core.services.ForegroundService: void stop(java.lang.Integer)
com.google.android.material.button.MaterialButton: void setInsetTop(int)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceWindowChanged(android.view.Surface)
com.google.firebase.firestore.DocumentChange$Type: com.google.firebase.firestore.DocumentChange$Type valueOf(java.lang.String)
me.carda.awesome_notifications.core.managers.EventManager: java.lang.String _getKeyByCalendar(java.util.Calendar)
androidx.core.view.ViewCompat$Api21Impl: void setOnApplyWindowInsetsListener(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodIsNotificationActiveOnStatusBar(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.FlutterJNI: boolean isAttached()
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest$RequestedDisplayMode valueOf(java.lang.String)
me.carda.awesome_notifications.core.managers.CancellationManager: boolean cancelSchedulesByGroupKey(android.content.Context,java.lang.String)
androidx.appcompat.widget.AppCompatTextViewAutoSizeHelper$Impl29: void computeAndSetTextDirection(android.text.StaticLayout$Builder,android.widget.TextView)
androidx.appcompat.widget.Toolbar: int getPopupTheme()
me.carda.awesome_notifications.core.managers.ChannelGroupManager: ChannelGroupManager()
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: boolean access$302(io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer,boolean)
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityFeatures(int)
androidx.appcompat.widget.AppCompatEditText: void setSupportCompoundDrawablesTintList(android.content.res.ColorStateList)
me.carda.awesome_notifications.core.models.AbstractModel: void putDataOnSerializedMap(java.lang.String,java.util.Map,java.util.Map)
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: void commit(android.content.Context)
me.carda.awesome_notifications.core.managers.StatusBarManager: void onNotificationPosted(android.service.notification.StatusBarNotification)
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getSystemWindowInsets()
me.carda.awesome_notifications.core.models.AbstractModel: me.carda.awesome_notifications.core.models.AbstractModel getClone()
com.google.android.material.button.MaterialButton: int getTextHeight()
me.carda.awesome_notifications.core.utils.MediaUtils: java.lang.String cleanMediaPath(java.lang.String)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int access$200(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
com.google.android.material.chip.Chip: void setChipCornerRadiusResource(int)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodDismissAllNotifications(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
me.carda.awesome_notifications.core.builders.NotificationBuilder: java.lang.Boolean setInboxLayout(android.content.Context,me.carda.awesome_notifications.core.models.NotificationContentModel,androidx.core.app.NotificationCompat$Builder)
me.carda.awesome_notifications.core.models.AbstractModel: void putDataOnSerializedMap(java.lang.String,java.util.Map,java.util.List)
androidx.core.view.accessibility.AccessibilityNodeInfoCompat$Api34Impl: void setBoundsInWindow(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Rect)
androidx.window.layout.adapter.sidecar.DistinctElementSidecarCallback: void onWindowLayoutChanged(android.os.IBinder,androidx.window.sidecar.SidecarWindowLayoutInfo)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: void removeInt(android.content.Context,java.lang.String,java.lang.String)
androidx.appcompat.widget.AppCompatButton: void setSupportCompoundDrawablesTintList(android.content.res.ColorStateList)
kotlin.internal.jdk8.JDK8PlatformImplementations: JDK8PlatformImplementations()
com.google.firebase.FirebaseCommonRegistrar: FirebaseCommonRegistrar()
me.carda.awesome_notifications.core.managers.StatusBarManager: StatusBarManager(android.content.Context,me.carda.awesome_notifications.core.utils.StringUtils)
androidx.core.view.WindowInsetsCompat$BuilderImpl: WindowInsetsCompat$BuilderImpl(androidx.core.view.WindowInsetsCompat)
com.google.firebase.firestore.core.OrderBy$Direction: com.google.firebase.firestore.core.OrderBy$Direction valueOf(java.lang.String)
androidx.appcompat.widget.ActionBarContextView: int getContentHeight()
me.carda.awesome_notifications.core.threads.NotificationThread: void whenComplete(java.lang.Object,me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException)
androidx.fragment.app.FragmentContainerView: FragmentContainerView(android.content.Context,android.util.AttributeSet)
me.carda.awesome_notifications.core.managers.BadgeManager: int incrementGlobalBadgeCounter(android.content.Context)
io.flutter.view.AccessibilityViewEmbedder: boolean performAction(int,int,android.os.Bundle)
io.flutter.view.TextureRegistry$SurfaceTextureEntry: void release()
androidx.appcompat.widget.ContentFrameLayout: ContentFrameLayout(android.content.Context,android.util.AttributeSet)
com.google.android.material.textfield.TextInputLayout: void setStartIconCheckable(boolean)
androidx.media.AudioAttributesImplApi21Parcelizer: androidx.media.AudioAttributesImplApi21 read(androidx.versionedparcelable.VersionedParcel)
android.support.v4.media.session.PlaybackStateCompat$Api21Impl: void setBufferedPosition(android.media.session.PlaybackState$Builder,long)
me.carda.awesome_notifications.core.enumerators.ActionType: me.carda.awesome_notifications.core.enumerators.ActionType[] values()
androidx.lifecycle.LifecycleDispatcher$DispatcherActivityCallback: LifecycleDispatcher$DispatcherActivityCallback()
androidx.core.app.NotificationCompatBuilder$Api24Impl: android.app.Notification$Action$Builder setAllowGeneratedReplies(android.app.Notification$Action$Builder,boolean)
io.flutter.embedding.engine.FlutterJNI: void setAsyncWaitForVsyncDelegate(io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate)
com.google.android.material.datepicker.MaterialCalendar: MaterialCalendar()
androidx.core.app.NotificationCompatBuilder$Api26Impl: android.app.Notification$Builder setGroupAlertBehavior(android.app.Notification$Builder,int)
androidx.core.view.WindowInsetsCompat$BuilderImpl29: androidx.core.view.WindowInsetsCompat build()
androidx.constraintlayout.solver.SolverVariable$Type: androidx.constraintlayout.solver.SolverVariable$Type[] values()
io.grpc.okhttp.internal.framed.ErrorCode: io.grpc.okhttp.internal.framed.ErrorCode[] values()
com.google.android.material.textfield.TextInputLayout: void setEndIconContentDescription(int)
androidx.appcompat.widget.SearchView$SearchAutoComplete: int getSearchViewTextMinWidthDp()
com.google.gson.stream.JsonReader: char readEscapeCharacter()
android.support.v4.media.MediaDescriptionCompat$Api21Impl: void setIconBitmap(android.media.MediaDescription$Builder,android.graphics.Bitmap)
androidx.core.view.ViewCompat$Api29Impl: void setSystemGestureExclusionRects(android.view.View,java.util.List)
androidx.core.app.NotificationCompatBuilder$Api24Impl: android.app.Notification$Builder setCustomContentView(android.app.Notification$Builder,android.widget.RemoteViews)
me.carda.awesome_notifications.core.managers.ChannelGroupManager: me.carda.awesome_notifications.core.models.NotificationChannelGroupModel getChannelGroupByKey(android.content.Context,java.lang.String)
androidx.appcompat.widget.DropDownListView$Api33Impl: void setSelectedChildViewEnabled(android.widget.AbsListView,boolean)
com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior: AppBarLayout$ScrollingViewBehavior()
com.google.android.material.textfield.TextInputLayout: android.content.res.ColorStateList getPlaceholderTextColor()
io.flutter.embedding.engine.FlutterJNI: void nativeInit(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,long)
androidx.appcompat.widget.AppCompatImageButton: android.graphics.PorterDuff$Mode getSupportImageTintMode()
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory getSafeEnum(java.lang.String)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodInitialize(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
me.carda.awesome_notifications.core.managers.BadgeManager: int decrementGlobalBadgeCounter(android.content.Context)
androidx.core.view.WindowInsetsCompat$Impl21: boolean isConsumed()
me.carda.awesome_notifications.core.models.NotificationMessageModel: NotificationMessageModel()
me.carda.awesome_notifications.core.utils.SerializableUtils: SerializableUtils(me.carda.awesome_notifications.core.utils.EnumUtils,me.carda.awesome_notifications.core.utils.StringUtils,me.carda.awesome_notifications.core.utils.CalendarUtils,me.carda.awesome_notifications.core.utils.TimeZoneUtils)
io.flutter.embedding.android.FlutterTextureView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
com.google.android.material.button.MaterialButton: void setA11yClassName(java.lang.String)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: boolean setFloat(android.content.Context,java.lang.String,java.lang.String,float)
androidx.core.app.JobIntentService: boolean onStopCurrentWork()
androidx.recyclerview.widget.RecyclerView: void setAccessibilityDelegateCompat(androidx.recyclerview.widget.RecyclerViewAccessibilityDelegate)
androidx.appcompat.widget.AppCompatImageView: android.graphics.PorterDuff$Mode getSupportImageTintMode()
com.google.firebase.firestore.DocumentChange$Type: com.google.firebase.firestore.DocumentChange$Type[] values()
androidx.core.app.NotificationCompat$BigPictureStyle$Api31Impl: void showBigPictureWhenCollapsed(android.app.Notification$BigPictureStyle,boolean)
com.google.android.material.chip.Chip: void setChipStrokeColorResource(int)
com.google.android.material.textfield.TextInputLayout: android.widget.TextView getSuffixTextView()
androidx.recyclerview.widget.RecyclerView: int getMaxFlingVelocity()
androidx.core.view.WindowInsetsCompat$Impl30: void copyRootViewBounds(android.view.View)
io.flutter.embedding.engine.FlutterJNI: void onDisplayPlatformView(int,int,int,int,int,int,int,io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack)
me.carda.awesome_notifications.core.threads.NotificationForegroundSender: void whenComplete(java.lang.Object,me.carda.awesome_notifications.core.exceptions.AwesomeNotificationsException)
com.google.firebase.firestore.core.LimboDocumentChange$Type: com.google.firebase.firestore.core.LimboDocumentChange$Type[] values()
me.leolin.shortcutbadger.impl.ApexHomeBadger: ApexHomeBadger()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: android.view.WindowInsets onProgress(android.view.WindowInsets,java.util.List)
me.carda.awesome_notifications.core.utils.EnumUtils: me.carda.awesome_notifications.core.utils.EnumUtils getInstance()
io.flutter.view.AccessibilityViewEmbedder: java.lang.Integer getRecordFlutterId(android.view.View,android.view.accessibility.AccessibilityRecord)
me.carda.awesome_notifications.core.enumerators.NotificationPermission: me.carda.awesome_notifications.core.enumerators.NotificationPermission getSafeEnum(java.lang.String)
com.google.android.material.textfield.TextInputLayout: int getStartIconMinSize()
me.carda.awesome_notifications.core.managers.LostEventsManager: void recoverLostNotificationEvents(android.content.Context,boolean,boolean,boolean,boolean)
me.carda.awesome_notifications.core.builders.NotificationBuilder: java.lang.Boolean setBigPictureLayout(android.content.Context,me.carda.awesome_notifications.core.models.NotificationModel,androidx.core.app.NotificationCompat$Builder)
io.flutter.embedding.engine.FlutterJNI: void destroyOverlaySurfaces()
io.flutter.embedding.engine.FlutterJNI: void nativeOnVsync(long,long,long)
androidx.constraintlayout.widget.Guideline: void setGuidelineBegin(int)
com.google.android.material.textfield.TextInputLayout: void setStartIconOnLongClickListener(android.view.View$OnLongClickListener)
androidx.core.widget.TextViewCompat$Api28Impl: void setFirstBaselineToTopHeight(android.widget.TextView,int)
com.google.android.material.textfield.TextInputLayout: void setEndIconTintMode(android.graphics.PorterDuff$Mode)
me.carda.awesome_notifications.core.models.AbstractModel: AbstractModel(me.carda.awesome_notifications.core.utils.SerializableUtils,me.carda.awesome_notifications.core.utils.StringUtils)
com.google.android.material.snackbar.BaseTransientBottomBar$SnackbarBaseLayout: int getAnimationMode()
me.carda.awesome_notifications.core.models.returnedData.ActionReceived: me.carda.awesome_notifications.core.models.returnedData.ActionReceived fromMap(java.util.Map)
kotlinx.coroutines.android.AndroidDispatcherFactory: int getLoadPriority()
io.flutter.embedding.engine.FlutterJNI: float getScaledFontSize(float,int)
io.flutter.embedding.android.FlutterView: io.flutter.plugin.common.BinaryMessenger getBinaryMessenger()
androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getTappableElementInsets()
androidx.appcompat.widget.AppCompatCheckBox: void setSupportCompoundDrawablesTintMode(android.graphics.PorterDuff$Mode)
com.google.android.material.internal.NavigationMenuItemView: void setNeedsEmptyIcon(boolean)
com.google.android.material.button.MaterialButton: void setTextAlignment(int)
androidx.core.app.JobIntentService: void onDestroy()
androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getRootStableInsets()
me.carda.awesome_notifications.core.models.NotificationChannelGroupModel: me.carda.awesome_notifications.core.models.NotificationChannelGroupModel fromJson(java.lang.String)
me.carda.awesome_notifications.core.managers.ChannelManager: android.net.Uri retrieveSoundResourceUri(android.content.Context,me.carda.awesome_notifications.core.enumerators.DefaultRingtoneType,java.lang.String)
me.carda.awesome_notifications.core.enumerators.NotificationCategory: me.carda.awesome_notifications.core.enumerators.NotificationCategory[] $values()
androidx.appcompat.widget.ActionBarOverlayLayout: java.lang.CharSequence getTitle()
me.carda.awesome_notifications.core.broadcasters.receivers.AwesomeEventsReceiver: void notifyNotificationEvent(java.lang.String,me.carda.awesome_notifications.core.models.returnedData.NotificationReceived)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodDismissNotificationsByChannelKey(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
me.carda.awesome_notifications.core.models.NotificationChannelModel: me.carda.awesome_notifications.core.models.AbstractModel fromJson(java.lang.String)
com.google.firebase.firestore.core.DocumentViewChange$Type: com.google.firebase.firestore.core.DocumentViewChange$Type[] values()
me.carda.awesome_notifications.core.managers.ChannelGroupManager: void cancelChannelGroup(android.content.Context,java.lang.String)
com.google.android.material.button.MaterialButton: int getIconSize()
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void channelMethodCancelNotificationsByGroupKey(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
me.carda.awesome_notifications.core.utils.BitmapUtils: java.lang.Boolean isValidBitmap(android.content.Context,java.lang.String)
me.carda.awesome_notifications.FlutterBitmapUtils: void extendCapabilities()
io.flutter.view.TextureRegistry$SurfaceTextureEntry: android.graphics.SurfaceTexture surfaceTexture()
me.carda.awesome_notifications.core.managers.PermissionManager: boolean gotoPreciseAlarmPage(android.content.Context)
androidx.constraintlayout.helper.widget.Flow: void setFirstVerticalStyle(int)
me.carda.awesome_notifications.core.managers.CancellationManager: void cancelAllSchedules(android.content.Context)
android.support.v4.media.MediaDescriptionCompat$Api21Impl: android.net.Uri getIconUri(android.media.MediaDescription)
me.carda.awesome_notifications.core.managers.DefaultsManager: boolean setActionCallbackDispatcher(android.content.Context,java.lang.Long)
io.flutter.embedding.engine.FlutterJNI: void dispatchPointerDataPacket(java.nio.ByteBuffer,int)
me.carda.awesome_notifications.core.background.BackgroundExecutor: void setBackgroundExecutorClass(java.lang.Class)
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow[] values()
com.google.android.material.chip.Chip: float getTextEndPadding()
com.google.android.material.chip.Chip: void setIconStartPaddingResource(int)
me.carda.awesome_notifications.core.managers.DefaultsManager: java.lang.Long getDartCallbackDispatcher(android.content.Context)
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI nativeSpawn(long,java.lang.String,java.lang.String,java.lang.String,java.util.List)
com.google.android.material.chip.Chip: void setCheckable(boolean)
androidx.appcompat.widget.AppCompatImageView: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
androidx.appcompat.widget.AppCompatEditText: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)
com.google.android.material.chip.Chip: void setCheckedIconResource(int)
me.carda.awesome_notifications.core.managers.PermissionManager: java.util.List arePermissionsAllowed(android.content.Context,java.lang.String,java.util.List)
me.carda.awesome_notifications.AwesomeNotificationsPlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
androidx.appcompat.widget.AppCompatAutoCompleteTextView: void setSupportBackgroundTintMode(android.graphics.PorterDuff$Mode)
com.google.firestore.v1.TargetChange$TargetChangeType: com.google.firestore.v1.TargetChange$TargetChangeType valueOf(java.lang.String)
com.google.android.material.search.SearchBar$ScrollingViewBehavior: SearchBar$ScrollingViewBehavior(android.content.Context,android.util.AttributeSet)
androidx.appcompat.widget.AppCompatTextView: java.lang.CharSequence getText()
me.carda.awesome_notifications.core.enumerators.MediaSource: me.carda.awesome_notifications.core.enumerators.MediaSource getSafeEnum(java.lang.String)
androidx.core.view.MenuItemCompat$Api26Impl: int getNumericModifiers(android.view.MenuItem)
io.flutter.embedding.engine.renderer.FlutterRenderer$ImageReaderSurfaceProducer: void pruneImageReaderQueue()
me.carda.awesome_notifications.core.builders.NotificationBuilder: me.carda.awesome_notifications.core.builders.NotificationBuilder updateMainTargetClassName(android.content.Context)
com.google.android.material.datepicker.MaterialCalendar$CalendarSelector: com.google.android.material.datepicker.MaterialCalendar$CalendarSelector[] values()
com.google.android.gms.common.SupportErrorDialogFragment: SupportErrorDialogFragment()
me.carda.awesome_notifications.core.threads.NotificationSender: java.lang.Object doInBackground()
me.carda.awesome_notifications.core.enumerators.NotificationSource: me.carda.awesome_notifications.core.enumerators.NotificationSource[] $values()
androidx.recyclerview.widget.RecyclerView: void setOnScrollListener(androidx.recyclerview.widget.RecyclerView$OnScrollListener)
com.google.android.material.textfield.TextInputLayout: android.graphics.drawable.Drawable getStartIconDrawable()
androidx.core.view.ViewCompat$Api21Impl: boolean dispatchNestedScroll(android.view.View,int,int,int,int,int[])
io.flutter.view.FlutterCallbackInformation: io.flutter.view.FlutterCallbackInformation lookupCallbackInformation(long)
androidx.core.content.ContextCompat$Api24Impl: java.io.File getDataDir(android.content.Context)
androidx.appcompat.widget.ActionBarContextView: void setTitle(java.lang.CharSequence)
me.carda.awesome_notifications.core.databases.SQLitePrimitivesDB: void lambda$setAllLongValues$7(android.content.ContentValues,java.lang.Long)
com.google.android.material.chip.Chip: float getCloseIconEndPadding()
androidx.appcompat.widget.ActionBarContextView: java.lang.CharSequence getTitle()
me.carda.awesome_notifications.core.models.NotificationChannelModel: void refreshIconResource(android.content.Context)
me.carda.awesome_notifications.DartBackgroundExecutor: void runBackgroundThread(java.lang.Long)
io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$AggregateSource: io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$AggregateSource valueOf(java.lang.String)
me.carda.awesome_notifications.core.databases.SQLiteSchedulesDB: void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int)
me.carda.awesome_notifications.core.threads.NotificationThread: void execute()
com.google.gson.stream.JsonReader: JsonReader(java.io.Reader)
me.carda.awesome_notifications.core.managers.DisplayedManager: java.lang.Boolean removeDisplayed(android.content.Context,java.lang.Integer,java.util.Calendar)
me.carda.awesome_notifications.core.managers.StatusBarManager: java.util.List unregisterActiveChannelKey(java.lang.String)
me.carda.awesome_notifications.core.models.NotificationModel: me.carda.awesome_notifications.core.models.AbstractModel fromMap(java.util.Map)
com.google.android.material.textfield.TextInputLayout: void setCounterOverflowTextAppearance(int)
io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$AggregateType: io.flutter.plugins.firebase.firestore.GeneratedAndroidFirebaseFirestore$AggregateType valueOf(java.lang.String)
